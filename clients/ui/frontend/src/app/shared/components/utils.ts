import { K8sResourceCommon, genRandomChars } from 'mod-arch-shared';
import { K8sCondition, K8sDSGResource } from '~/app/shared/components/types';

export const PreInstalledName = 'Pre-installed';

export const isOOTB = (resource: K8sResourceCommon): boolean =>
  !!resource.metadata?.labels?.['platform.opendatahub.io/part-of'];
export const isK8sDSGResource = (x?: K8sResourceCommon): x is K8sDSGResource =>
  x?.metadata?.name != null;
export const getDisplayNameFromK8sResource = (resource: K8sDSGResource): string =>
  resource.metadata.annotations?.['openshift.io/display-name'] || resource.metadata.name;
export const getResourceNameFromK8sResource = (resource: K8sDSGResource): string =>
  resource.metadata.name;
export const getDescriptionFromK8sResource = (resource: K8sDSGResource): string =>
  resource.metadata.annotations?.['openshift.io/description'] || '';
export const getCreatorFromK8sResource = (resource: K8sDSGResource): string =>
  isOOTB(resource)
    ? PreInstalledName
    : resource.metadata.annotations?.['opendatahub.io/username'] || 'unknown';

type AdditionalCriteriaForTranslation = {
  /**
   * If pure digits, prevent it with this safe string.
   * Also used when we translate to nothing, uses prefix & generated value.
   * Note: Do not exceed maxLength otherwise it will replace content with it
   */
  safeK8sPrefix?: string;
  /** If the safe prefix is to be statically applied */
  staticPrefix?: boolean;
  /**
   * Cap the characters allowed.
   * Note: This value can be problematic at very short sizes (< 3)
   */
  maxLength?: number;
};
type AdditionalCriteriaApplied = Record<
  keyof AdditionalCriteriaForTranslation | 'autoGenerated',
  boolean
>;

/**
 * Converts a display name to a k8s safe variant.
 * Provide additional criteria to help trim the value
 */
export const translateDisplayNameForK8sAndReport = (
  name: string,
  { safeK8sPrefix, staticPrefix, maxLength }: AdditionalCriteriaForTranslation = {},
): [string, AdditionalCriteriaApplied] => {
  const appliedCriteria: AdditionalCriteriaApplied = {
    autoGenerated: false,
    safeK8sPrefix: false,
    maxLength: false,
    staticPrefix: false,
  };

  let translatedName = name
    .trim()
    .toLowerCase()
    .replace(/\s/g, '-') // spaces to dashes
    .replace(/[^a-z0-9-]/g, '') // remove inverse of good k8s characters
    .replace(/^-*/, '') // remove any leading dashes
    .replace(/-*$/, '') // remove any trailing dashes
    .replace(/[-]+/g, '-'); // simplify double dashes ('A - B' turns into 'a---b' where 'a-b' is enough)

  /** Allows constant length checks -- modifies translatedName & appliedCriteria */
  const keepLength = () => {
    if (maxLength && translatedName.length > maxLength) {
      // Avoid too long
      translatedName = translatedName.slice(0, maxLength); // shorten to length
      appliedCriteria.maxLength = true;
    }

    // Trim out extra dashes that come with truncation
    translatedName = translatedName.replace(/-*$/, '');
  };

  keepLength();

  if (safeK8sPrefix) {
    if (staticPrefix && translatedName) {
      if (!translatedName.startsWith(safeK8sPrefix)) {
        translatedName = `${safeK8sPrefix}${translatedName}`;
      }
      appliedCriteria.safeK8sPrefix = true;
      appliedCriteria.staticPrefix = true;
    } else if (/^\d+/.test(translatedName)) {
      // Avoid names that start with a digit
      translatedName = `${safeK8sPrefix}${translatedName}`;
      appliedCriteria.safeK8sPrefix = true;
    }
  }

  keepLength();

  if (name.trim().length > 0 && translatedName.trim().length === 0) {
    // We trimmed it down to nothing, generate a new value
    translatedName = `${safeK8sPrefix || 'gen-'}${genRandomChars()}`;
    appliedCriteria.autoGenerated = true;
    if (safeK8sPrefix) {
      appliedCriteria.safeK8sPrefix = true;
    }
  }

  keepLength();

  return [translatedName, appliedCriteria];
};

/**
 * Simplified if you don't care what happened.
 * @see translateDisplayNameForK8sAndReport
 */
export const translateDisplayNameForK8s = (
  name: string,
  additionalCriteria: AdditionalCriteriaForTranslation = {},
): string => translateDisplayNameForK8sAndReport(name, additionalCriteria)[0];

export const isValidK8sName = (
  name?: string,
  regExp = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/,
): boolean => name === undefined || (name.length > 0 && regExp.test(name));

type ResourceWithConditions = K8sResourceCommon & { status?: { conditions?: K8sCondition[] } };

export const getConditionForType = (
  resource: ResourceWithConditions,
  type: string,
): K8sCondition | undefined => resource.status?.conditions?.find((c) => c.type === type);

export const isConditionInStatus = (
  resource: ResourceWithConditions,
  type: string,
  status: string,
): boolean => getConditionForType(resource, type)?.status === status;
