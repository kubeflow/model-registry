"""Model Registry REST API.

REST API for Model Registry to create and manage ML model metadata

The version of the OpenAPI document: v1alpha3
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Annotated, Any, Optional, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call

from mr_openapi.api_client import ApiClient, RequestSerialized
from mr_openapi.api_response import ApiResponse
from mr_openapi.models.catalog_model import CatalogModel
from mr_openapi.models.catalog_model_list import CatalogModelList
from mr_openapi.models.catalog_source_list import CatalogSourceList
from mr_openapi.models.order_by_field import OrderByField
from mr_openapi.models.sort_order import SortOrder
from mr_openapi.rest import RESTResponseType


class ModelCatalogServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech.

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    async def api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get(
        self,
        source_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogSource`.")],
        model_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogModel`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get.

        :param source_id: A unique identifier for a `CatalogSource`. (required)
        :type source_id: str
        :param model_id: A unique identifier for a `CatalogModel`. (required)
        :type model_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get_serialize(
            source_id=source_id,
            model_id=model_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": None,
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get_with_http_info(
        self,
        source_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogSource`.")],
        model_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogModel`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get.

        :param source_id: A unique identifier for a `CatalogSource`. (required)
        :type source_id: str
        :param model_id: A unique identifier for a `CatalogModel`. (required)
        :type model_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get_serialize(
            source_id=source_id,
            model_id=model_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": None,
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get_without_preload_content(
        self,
        source_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogSource`.")],
        model_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogModel`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get.

        :param source_id: A unique identifier for a `CatalogSource`. (required)
        :type source_id: str
        :param model_id: A unique identifier for a `CatalogModel`. (required)
        :type model_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get_serialize(
            source_id=source_id,
            model_id=model_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": None,
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _api_model_catalog_v1alpha3_sources_source_id_models_model_id_readme_get_serialize(
        self,
        source_id,
        model_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, Optional[str]] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source_id is not None:
            _path_params["source_id"] = source_id
        if model_id is not None:
            _path_params["model_id"] = model_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["text/markdown", "application/json"])

        # authentication setting
        _auth_settings: list[str] = ["Bearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/model_catalog/v1alpha3/sources/{source_id}/models/{model_id}/readme",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    async def get_all_catalog_models(
        self,
        source: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter models by source. If not provided, models from all sources are returned. If multiple sources are provided, models from any of the sources are returned."
            ),
        ] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None,
        order_by: Annotated[
            Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")
        ] = None,
        sort_order: Annotated[
            Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")
        ] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of entities to skip before page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CatalogModelList:
        """get_all_catalog_models.

        :param source: Filter models by source. If not provided, models from all sources are returned. If multiple sources are provided, models from any of the sources are returned.
        :type source: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param offset: Number of entities to skip before page.
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_all_catalog_models_serialize(
            source=source,
            page_size=page_size,
            order_by=order_by,
            sort_order=sort_order,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogModelList",
            "400": "Error",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def get_all_catalog_models_with_http_info(
        self,
        source: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter models by source. If not provided, models from all sources are returned. If multiple sources are provided, models from any of the sources are returned."
            ),
        ] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None,
        order_by: Annotated[
            Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")
        ] = None,
        sort_order: Annotated[
            Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")
        ] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of entities to skip before page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CatalogModelList]:
        """get_all_catalog_models.

        :param source: Filter models by source. If not provided, models from all sources are returned. If multiple sources are provided, models from any of the sources are returned.
        :type source: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param offset: Number of entities to skip before page.
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_all_catalog_models_serialize(
            source=source,
            page_size=page_size,
            order_by=order_by,
            sort_order=sort_order,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogModelList",
            "400": "Error",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def get_all_catalog_models_without_preload_content(
        self,
        source: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter models by source. If not provided, models from all sources are returned. If multiple sources are provided, models from any of the sources are returned."
            ),
        ] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None,
        order_by: Annotated[
            Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")
        ] = None,
        sort_order: Annotated[
            Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")
        ] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of entities to skip before page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_all_catalog_models.

        :param source: Filter models by source. If not provided, models from all sources are returned. If multiple sources are provided, models from any of the sources are returned.
        :type source: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param offset: Number of entities to skip before page.
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_all_catalog_models_serialize(
            source=source,
            page_size=page_size,
            order_by=order_by,
            sort_order=sort_order,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogModelList",
            "400": "Error",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_all_catalog_models_serialize(
        self,
        source,
        page_size,
        order_by,
        sort_order,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, Optional[str]] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if source is not None:

            _query_params.append(("source", source))

        if page_size is not None:

            _query_params.append(("pageSize", page_size))

        if order_by is not None:

            _query_params.append(("orderBy", order_by.value))

        if sort_order is not None:

            _query_params.append(("sortOrder", sort_order.value))

        if offset is not None:

            _query_params.append(("offset", offset))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: list[str] = ["Bearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/model_catalog/v1alpha3/models",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    async def get_catalog_model(
        self,
        source_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogSource`.")],
        model_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogModel`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CatalogModel:
        """get_catalog_model.

        :param source_id: A unique identifier for a `CatalogSource`. (required)
        :type source_id: str
        :param model_id: A unique identifier for a `CatalogModel`. (required)
        :type model_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_catalog_model_serialize(
            source_id=source_id,
            model_id=model_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogModel",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def get_catalog_model_with_http_info(
        self,
        source_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogSource`.")],
        model_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogModel`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CatalogModel]:
        """get_catalog_model.

        :param source_id: A unique identifier for a `CatalogSource`. (required)
        :type source_id: str
        :param model_id: A unique identifier for a `CatalogModel`. (required)
        :type model_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_catalog_model_serialize(
            source_id=source_id,
            model_id=model_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogModel",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def get_catalog_model_without_preload_content(
        self,
        source_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogSource`.")],
        model_id: Annotated[StrictStr, Field(description="A unique identifier for a `CatalogModel`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_catalog_model.

        :param source_id: A unique identifier for a `CatalogSource`. (required)
        :type source_id: str
        :param model_id: A unique identifier for a `CatalogModel`. (required)
        :type model_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_catalog_model_serialize(
            source_id=source_id,
            model_id=model_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogModel",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_catalog_model_serialize(
        self,
        source_id,
        model_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, Optional[str]] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if source_id is not None:
            _path_params["source_id"] = source_id
        if model_id is not None:
            _path_params["model_id"] = model_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: list[str] = ["Bearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/model_catalog/v1alpha3/sources/{source_id}/models/{model_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    async def get_catalog_sources(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None,
        order_by: Annotated[
            Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")
        ] = None,
        sort_order: Annotated[
            Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")
        ] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of entities to skip before page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CatalogSourceList:
        """List All CatalogSources.

        Gets a list of all `CatalogSource` entities.

        :param name: Name of entity to search.
        :type name: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param offset: Number of entities to skip before page.
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_catalog_sources_serialize(
            name=name,
            page_size=page_size,
            order_by=order_by,
            sort_order=sort_order,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogSourceList",
            "400": "Error",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def get_catalog_sources_with_http_info(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None,
        order_by: Annotated[
            Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")
        ] = None,
        sort_order: Annotated[
            Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")
        ] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of entities to skip before page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CatalogSourceList]:
        """List All CatalogSources.

        Gets a list of all `CatalogSource` entities.

        :param name: Name of entity to search.
        :type name: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param offset: Number of entities to skip before page.
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_catalog_sources_serialize(
            name=name,
            page_size=page_size,
            order_by=order_by,
            sort_order=sort_order,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogSourceList",
            "400": "Error",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def get_catalog_sources_without_preload_content(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None,
        order_by: Annotated[
            Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")
        ] = None,
        sort_order: Annotated[
            Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")
        ] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of entities to skip before page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List All CatalogSources.

        Gets a list of all `CatalogSource` entities.

        :param name: Name of entity to search.
        :type name: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param offset: Number of entities to skip before page.
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._get_catalog_sources_serialize(
            name=name,
            page_size=page_size,
            order_by=order_by,
            sort_order=sort_order,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "CatalogSourceList",
            "400": "Error",
            "401": "Error",
            "404": "Error",
            "500": "Error",
        }
        response_data = await self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_catalog_sources_serialize(
        self,
        name,
        page_size,
        order_by,
        sort_order,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, Optional[str]] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if name is not None:

            _query_params.append(("name", name))

        if page_size is not None:

            _query_params.append(("pageSize", page_size))

        if order_by is not None:

            _query_params.append(("orderBy", order_by.value))

        if sort_order is not None:

            _query_params.append(("sortOrder", sort_order.value))

        if offset is not None:

            _query_params.append(("offset", offset))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: list[str] = ["Bearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/model_catalog/v1alpha3/sources",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
