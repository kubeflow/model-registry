"""Model Registry REST API.

REST API for Model Registry to create and manage ML model metadata

The version of the OpenAPI document: v1alpha3
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class BaseResourceDates(BaseModel):
    """Common timestamp fields for resources."""  # noqa: E501

    create_time_since_epoch: StrictStr | None = Field(
        default=None,
        description="Output only. Create time of the resource in millisecond since epoch.",
        alias="createTimeSinceEpoch",
    )
    last_update_time_since_epoch: StrictStr | None = Field(
        default=None,
        description="Output only. Last update time of the resource since epoch in millisecond since epoch.",
        alias="lastUpdateTimeSinceEpoch",
    )
    __properties: ClassVar[list[str]] = ["createTimeSinceEpoch", "lastUpdateTimeSinceEpoch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of BaseResourceDates from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: set[str] = {
            "create_time_since_epoch",
            "last_update_time_since_epoch",
        }

        return self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of BaseResourceDates from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return cls.model_validate(
            {
                "createTimeSinceEpoch": obj.get("createTimeSinceEpoch"),
                "lastUpdateTimeSinceEpoch": obj.get("lastUpdateTimeSinceEpoch"),
            }
        )
