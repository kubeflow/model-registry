"""Model Registry REST API.

REST API for Model Registry to create and manage ML model metadata

The version of the OpenAPI document: v1alpha3
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self

from mr_openapi.models.model_version import ModelVersion


class ModelVersionList(BaseModel):
    """List of ModelVersion entities."""  # noqa: E501

    next_page_token: StrictStr = Field(
        description="Token to use to retrieve next page of results.", alias="nextPageToken"
    )
    page_size: StrictInt = Field(description="Maximum number of resources to return in the result.", alias="pageSize")
    size: StrictInt = Field(description="Number of items in result list.")
    items: list[ModelVersion] | None = Field(default=None, description="Array of `ModelVersion` entities.")
    __properties: ClassVar[list[str]] = ["nextPageToken", "pageSize", "size", "items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ModelVersionList from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict["items"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ModelVersionList from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return cls.model_validate(
            {
                "nextPageToken": obj.get("nextPageToken"),
                "pageSize": obj.get("pageSize"),
                "size": obj.get("size"),
                "items": (
                    [ModelVersion.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
                ),
            }
        )
