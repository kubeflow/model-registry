"""Model Registry REST API.

REST API for Model Registry to create and manage ML model metadata

The version of the OpenAPI document: v1alpha3
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from mr_openapi.models.catalog_model_all_of_base_model import CatalogModelAllOfBaseModel
from mr_openapi.models.catalog_model_artifact import CatalogModelArtifact


class CatalogModel(BaseModel):
    """A model in the model catalog."""  # noqa: E501

    create_time_since_epoch: StrictStr | None = Field(
        default=None,
        description="Output only. Create time of the resource in millisecond since epoch.",
        alias="createTimeSinceEpoch",
    )
    last_update_time_since_epoch: StrictStr | None = Field(
        default=None,
        description="Output only. Last update time of the resource since epoch in millisecond since epoch.",
        alias="lastUpdateTimeSinceEpoch",
    )
    repository: StrictStr = Field(description="Name of the repository in the catalog.")
    name: StrictStr = Field(description="Code name of the model.")
    provider: StrictStr | None = Field(
        default=None, description="Name of the organization or entity that provides the model."
    )
    description: StrictStr | None = Field(default=None, description="Short description of the model.")
    long_description: StrictStr | None = Field(
        default=None, description="Longer description of the model.", alias="longDescription"
    )
    logo: StrictStr | None = Field(
        default=None,
        description="URL to the model's logo. A [data URL](https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data) is recommended.",
    )
    readme: StrictStr | None = Field(default=None, description="Model documentation in Markdown.")
    language: list[StrictStr] | None = Field(
        default=None,
        description="List of supported languages (https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes).",
    )
    license: StrictStr | None = Field(default=None, description="Short name of the model's license.")
    license_link: StrictStr | None = Field(default=None, description="URL to the license text.", alias="licenseLink")
    maturity: StrictStr | None = Field(default=None, description="Maturity level of the model.")
    library_name: StrictStr | None = Field(default=None, alias="libraryName")
    base_model: list[CatalogModelAllOfBaseModel] | None = Field(
        default=None, description="Reference to the base model (if any).", alias="baseModel"
    )
    labels: list[StrictStr] | None = Field(default=None, description="List of labels for categorization.")
    tasks: list[StrictStr] | None = Field(default=None, description="List of tasks the model is designed for.")
    artifacts: list[CatalogModelArtifact] | None = Field(
        default=None, description="If a model has multiple versions, each version should have a separate artifact."
    )
    __properties: ClassVar[list[str]] = [
        "createTimeSinceEpoch",
        "lastUpdateTimeSinceEpoch",
        "repository",
        "name",
        "provider",
        "description",
        "longDescription",
        "logo",
        "readme",
        "language",
        "license",
        "licenseLink",
        "maturity",
        "libraryName",
        "baseModel",
        "labels",
        "tasks",
        "artifacts",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of CatalogModel from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: set[str] = {
            "create_time_since_epoch",
            "last_update_time_since_epoch",
        }

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in base_model (list)
        _items = []
        if self.base_model:
            for _item in self.base_model:
                if _item:
                    _items.append(_item.to_dict())
            _dict["baseModel"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["artifacts"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of CatalogModel from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return cls.model_validate(
            {
                "createTimeSinceEpoch": obj.get("createTimeSinceEpoch"),
                "lastUpdateTimeSinceEpoch": obj.get("lastUpdateTimeSinceEpoch"),
                "repository": obj.get("repository"),
                "name": obj.get("name"),
                "provider": obj.get("provider"),
                "description": obj.get("description"),
                "longDescription": obj.get("longDescription"),
                "logo": obj.get("logo"),
                "readme": obj.get("readme"),
                "language": obj.get("language"),
                "license": obj.get("license"),
                "licenseLink": obj.get("licenseLink"),
                "maturity": obj.get("maturity"),
                "libraryName": obj.get("libraryName"),
                "baseModel": (
                    [CatalogModelAllOfBaseModel.from_dict(_item) for _item in obj["baseModel"]]
                    if obj.get("baseModel") is not None
                    else None
                ),
                "labels": obj.get("labels"),
                "tasks": obj.get("tasks"),
                "artifacts": (
                    [CatalogModelArtifact.from_dict(_item) for _item in obj["artifacts"]]
                    if obj.get("artifacts") is not None
                    else None
                ),
            }
        )
