# coding: utf-8

"""
    Model Registry REST API

    REST API for Model Registry to create and manage ML model metadata

    The version of the OpenAPI document: v1alpha3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from mr_openapi.models.metadata_bool_value import MetadataBoolValue
from mr_openapi.models.metadata_double_value import MetadataDoubleValue
from mr_openapi.models.metadata_int_value import MetadataIntValue
from mr_openapi.models.metadata_proto_value import MetadataProtoValue
from mr_openapi.models.metadata_string_value import MetadataStringValue
from mr_openapi.models.metadata_struct_value import MetadataStructValue
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

METADATAVALUE_ONE_OF_SCHEMAS = ["MetadataBoolValue", "MetadataDoubleValue", "MetadataIntValue", "MetadataProtoValue", "MetadataStringValue", "MetadataStructValue"]

class MetadataValue(BaseModel):
    """
    A value in properties.
    """
    # data type: MetadataIntValue
    oneof_schema_1_validator: Optional[MetadataIntValue] = None
    # data type: MetadataDoubleValue
    oneof_schema_2_validator: Optional[MetadataDoubleValue] = None
    # data type: MetadataStringValue
    oneof_schema_3_validator: Optional[MetadataStringValue] = None
    # data type: MetadataStructValue
    oneof_schema_4_validator: Optional[MetadataStructValue] = None
    # data type: MetadataProtoValue
    oneof_schema_5_validator: Optional[MetadataProtoValue] = None
    # data type: MetadataBoolValue
    oneof_schema_6_validator: Optional[MetadataBoolValue] = None
    if TYPE_CHECKING:
        actual_instance: Union[MetadataBoolValue, MetadataDoubleValue, MetadataIntValue, MetadataProtoValue, MetadataStringValue, MetadataStructValue]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(METADATAVALUE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = MetadataValue.construct()
        error_messages = []
        match = 0
        # validate data type: MetadataIntValue
        if not isinstance(v, MetadataIntValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetadataIntValue`")
        else:
            match += 1
        # validate data type: MetadataDoubleValue
        if not isinstance(v, MetadataDoubleValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetadataDoubleValue`")
        else:
            match += 1
        # validate data type: MetadataStringValue
        if not isinstance(v, MetadataStringValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetadataStringValue`")
        else:
            match += 1
        # validate data type: MetadataStructValue
        if not isinstance(v, MetadataStructValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetadataStructValue`")
        else:
            match += 1
        # validate data type: MetadataProtoValue
        if not isinstance(v, MetadataProtoValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetadataProtoValue`")
        else:
            match += 1
        # validate data type: MetadataBoolValue
        if not isinstance(v, MetadataBoolValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetadataBoolValue`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in MetadataValue with oneOf schemas: MetadataBoolValue, MetadataDoubleValue, MetadataIntValue, MetadataProtoValue, MetadataStringValue, MetadataStructValue. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in MetadataValue with oneOf schemas: MetadataBoolValue, MetadataDoubleValue, MetadataIntValue, MetadataProtoValue, MetadataStringValue, MetadataStructValue. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> MetadataValue:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> MetadataValue:
        """Returns the object represented by the json string"""
        instance = MetadataValue.construct()
        error_messages = []
        match = 0

        # deserialize data into MetadataIntValue
        try:
            instance.actual_instance = MetadataIntValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetadataDoubleValue
        try:
            instance.actual_instance = MetadataDoubleValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetadataStringValue
        try:
            instance.actual_instance = MetadataStringValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetadataStructValue
        try:
            instance.actual_instance = MetadataStructValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetadataProtoValue
        try:
            instance.actual_instance = MetadataProtoValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetadataBoolValue
        try:
            instance.actual_instance = MetadataBoolValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into MetadataValue with oneOf schemas: MetadataBoolValue, MetadataDoubleValue, MetadataIntValue, MetadataProtoValue, MetadataStringValue, MetadataStructValue. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into MetadataValue with oneOf schemas: MetadataBoolValue, MetadataDoubleValue, MetadataIntValue, MetadataProtoValue, MetadataStringValue, MetadataStructValue. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


