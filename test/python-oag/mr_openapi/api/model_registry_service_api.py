# coding: utf-8

"""
    Model Registry REST API

    REST API for Model Registry to create and manage ML model metadata

    The version of the OpenAPI document: v1alpha3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from mr_openapi.models.artifact import Artifact
from mr_openapi.models.artifact_list import ArtifactList
from mr_openapi.models.inference_service import InferenceService
from mr_openapi.models.inference_service_create import InferenceServiceCreate
from mr_openapi.models.inference_service_list import InferenceServiceList
from mr_openapi.models.inference_service_update import InferenceServiceUpdate
from mr_openapi.models.model_artifact import ModelArtifact
from mr_openapi.models.model_artifact_create import ModelArtifactCreate
from mr_openapi.models.model_artifact_list import ModelArtifactList
from mr_openapi.models.model_artifact_update import ModelArtifactUpdate
from mr_openapi.models.model_version import ModelVersion
from mr_openapi.models.model_version_create import ModelVersionCreate
from mr_openapi.models.model_version_list import ModelVersionList
from mr_openapi.models.model_version_update import ModelVersionUpdate
from mr_openapi.models.order_by_field import OrderByField
from mr_openapi.models.registered_model import RegisteredModel
from mr_openapi.models.registered_model_create import RegisteredModelCreate
from mr_openapi.models.registered_model_list import RegisteredModelList
from mr_openapi.models.registered_model_update import RegisteredModelUpdate
from mr_openapi.models.serve_model import ServeModel
from mr_openapi.models.serve_model_create import ServeModelCreate
from mr_openapi.models.serve_model_list import ServeModelList
from mr_openapi.models.serving_environment import ServingEnvironment
from mr_openapi.models.serving_environment_create import ServingEnvironmentCreate
from mr_openapi.models.serving_environment_list import ServingEnvironmentList
from mr_openapi.models.serving_environment_update import ServingEnvironmentUpdate
from mr_openapi.models.sort_order import SortOrder

from mr_openapi.api_client import ApiClient
from mr_openapi.api_response import ApiResponse
from mr_openapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ModelRegistryServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_environment_inference_service(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], inference_service_create : Annotated[InferenceServiceCreate, Field(..., description="A new `InferenceService` to be created.")], **kwargs) -> InferenceService:  # noqa: E501
        """Create a InferenceService in ServingEnvironment  # noqa: E501

        Creates a new instance of a `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_environment_inference_service(servingenvironment_id, inference_service_create, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param inference_service_create: A new `InferenceService` to be created. (required)
        :type inference_service_create: InferenceServiceCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InferenceService
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_environment_inference_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_environment_inference_service_with_http_info(servingenvironment_id, inference_service_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_environment_inference_service_with_http_info(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], inference_service_create : Annotated[InferenceServiceCreate, Field(..., description="A new `InferenceService` to be created.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a InferenceService in ServingEnvironment  # noqa: E501

        Creates a new instance of a `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_environment_inference_service_with_http_info(servingenvironment_id, inference_service_create, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param inference_service_create: A new `InferenceService` to be created. (required)
        :type inference_service_create: InferenceServiceCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InferenceService, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'servingenvironment_id',
            'inference_service_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_environment_inference_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['servingenvironment_id']:
            _path_params['servingenvironmentId'] = _params['servingenvironment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['inference_service_create'] is not None:
            _body_params = _params['inference_service_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "InferenceService",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}/inference_services', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_inference_service(self, inference_service_create : Annotated[InferenceServiceCreate, Field(..., description="A new `InferenceService` to be created.")], **kwargs) -> InferenceService:  # noqa: E501
        """Create a InferenceService  # noqa: E501

        Creates a new instance of a `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_inference_service(inference_service_create, async_req=True)
        >>> result = thread.get()

        :param inference_service_create: A new `InferenceService` to be created. (required)
        :type inference_service_create: InferenceServiceCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InferenceService
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_inference_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_inference_service_with_http_info(inference_service_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_inference_service_with_http_info(self, inference_service_create : Annotated[InferenceServiceCreate, Field(..., description="A new `InferenceService` to be created.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a InferenceService  # noqa: E501

        Creates a new instance of a `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_inference_service_with_http_info(inference_service_create, async_req=True)
        >>> result = thread.get()

        :param inference_service_create: A new `InferenceService` to be created. (required)
        :type inference_service_create: InferenceServiceCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InferenceService, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inference_service_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_inference_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['inference_service_create'] is not None:
            _body_params = _params['inference_service_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "InferenceService",
            '400': "Error",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_inference_service_serve(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], serve_model_create : Annotated[ServeModelCreate, Field(..., description="A new `ServeModel` to be associated with the `InferenceService`.")], **kwargs) -> ServeModel:  # noqa: E501
        """Create a ServeModel action in a InferenceService  # noqa: E501

        Creates a new instance of a `ServeModel` associated with `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_inference_service_serve(inferenceservice_id, serve_model_create, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param serve_model_create: A new `ServeModel` to be associated with the `InferenceService`. (required)
        :type serve_model_create: ServeModelCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServeModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_inference_service_serve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_inference_service_serve_with_http_info(inferenceservice_id, serve_model_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_inference_service_serve_with_http_info(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], serve_model_create : Annotated[ServeModelCreate, Field(..., description="A new `ServeModel` to be associated with the `InferenceService`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a ServeModel action in a InferenceService  # noqa: E501

        Creates a new instance of a `ServeModel` associated with `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_inference_service_serve_with_http_info(inferenceservice_id, serve_model_create, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param serve_model_create: A new `ServeModel` to be associated with the `InferenceService`. (required)
        :type serve_model_create: ServeModelCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServeModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inferenceservice_id',
            'serve_model_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_inference_service_serve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['inferenceservice_id']:
            _path_params['inferenceserviceId'] = _params['inferenceservice_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['serve_model_create'] is not None:
            _body_params = _params['serve_model_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "ServeModel",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/serves', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_model_artifact(self, model_artifact_create : Annotated[ModelArtifactCreate, Field(..., description="A new `ModelArtifact` to be created.")], **kwargs) -> ModelArtifact:  # noqa: E501
        """Create a ModelArtifact  # noqa: E501

        Creates a new instance of a `ModelArtifact`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_artifact(model_artifact_create, async_req=True)
        >>> result = thread.get()

        :param model_artifact_create: A new `ModelArtifact` to be created. (required)
        :type model_artifact_create: ModelArtifactCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelArtifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_model_artifact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_model_artifact_with_http_info(model_artifact_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_model_artifact_with_http_info(self, model_artifact_create : Annotated[ModelArtifactCreate, Field(..., description="A new `ModelArtifact` to be created.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a ModelArtifact  # noqa: E501

        Creates a new instance of a `ModelArtifact`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_artifact_with_http_info(model_artifact_create, async_req=True)
        >>> result = thread.get()

        :param model_artifact_create: A new `ModelArtifact` to be created. (required)
        :type model_artifact_create: ModelArtifactCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelArtifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'model_artifact_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_model_artifact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['model_artifact_create'] is not None:
            _body_params = _params['model_artifact_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "ModelArtifact",
            '400': "Error",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_artifacts', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_model_version(self, model_version_create : Annotated[ModelVersionCreate, Field(..., description="A new `ModelVersion` to be created.")], **kwargs) -> ModelVersion:  # noqa: E501
        """Create a ModelVersion  # noqa: E501

        Creates a new instance of a `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_version(model_version_create, async_req=True)
        >>> result = thread.get()

        :param model_version_create: A new `ModelVersion` to be created. (required)
        :type model_version_create: ModelVersionCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_model_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_model_version_with_http_info(model_version_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_model_version_with_http_info(self, model_version_create : Annotated[ModelVersionCreate, Field(..., description="A new `ModelVersion` to be created.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a ModelVersion  # noqa: E501

        Creates a new instance of a `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_version_with_http_info(model_version_create, async_req=True)
        >>> result = thread.get()

        :param model_version_create: A new `ModelVersion` to be created. (required)
        :type model_version_create: ModelVersionCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'model_version_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_model_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['model_version_create'] is not None:
            _body_params = _params['model_version_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "ModelVersion",
            '400': "Error",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_versions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_model_version_artifact(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], artifact : Annotated[Artifact, Field(..., description="A new or existing `Artifact` to be associated with the `ModelVersion`.")], **kwargs) -> Artifact:  # noqa: E501
        """Create an Artifact in a ModelVersion  # noqa: E501

        Creates a new instance of an Artifact if needed and associates it with `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_version_artifact(modelversion_id, artifact, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param artifact: A new or existing `Artifact` to be associated with the `ModelVersion`. (required)
        :type artifact: Artifact
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_model_version_artifact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_model_version_artifact_with_http_info(modelversion_id, artifact, **kwargs)  # noqa: E501

    @validate_arguments
    def create_model_version_artifact_with_http_info(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], artifact : Annotated[Artifact, Field(..., description="A new or existing `Artifact` to be associated with the `ModelVersion`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create an Artifact in a ModelVersion  # noqa: E501

        Creates a new instance of an Artifact if needed and associates it with `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_version_artifact_with_http_info(modelversion_id, artifact, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param artifact: A new or existing `Artifact` to be associated with the `ModelVersion`. (required)
        :type artifact: Artifact
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'modelversion_id',
            'artifact'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_model_version_artifact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['modelversion_id']:
            _path_params['modelversionId'] = _params['modelversion_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['artifact'] is not None:
            _body_params = _params['artifact']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '201': "Artifact",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_versions/{modelversionId}/artifacts', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_registered_model(self, registered_model_create : Annotated[RegisteredModelCreate, Field(..., description="A new `RegisteredModel` to be created.")], **kwargs) -> RegisteredModel:  # noqa: E501
        """Create a RegisteredModel  # noqa: E501

        Creates a new instance of a `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_registered_model(registered_model_create, async_req=True)
        >>> result = thread.get()

        :param registered_model_create: A new `RegisteredModel` to be created. (required)
        :type registered_model_create: RegisteredModelCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegisteredModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_registered_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_registered_model_with_http_info(registered_model_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_registered_model_with_http_info(self, registered_model_create : Annotated[RegisteredModelCreate, Field(..., description="A new `RegisteredModel` to be created.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a RegisteredModel  # noqa: E501

        Creates a new instance of a `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_registered_model_with_http_info(registered_model_create, async_req=True)
        >>> result = thread.get()

        :param registered_model_create: A new `RegisteredModel` to be created. (required)
        :type registered_model_create: RegisteredModelCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegisteredModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registered_model_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_registered_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['registered_model_create'] is not None:
            _body_params = _params['registered_model_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "RegisteredModel",
            '400': "Error",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/registered_models', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_registered_model_version(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], model_version : Annotated[ModelVersion, Field(..., description="A new `ModelVersion` to be created.")], **kwargs) -> ModelVersion:  # noqa: E501
        """Create a ModelVersion in RegisteredModel  # noqa: E501

        Creates a new instance of a `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_registered_model_version(registeredmodel_id, model_version, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param model_version: A new `ModelVersion` to be created. (required)
        :type model_version: ModelVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_registered_model_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_registered_model_version_with_http_info(registeredmodel_id, model_version, **kwargs)  # noqa: E501

    @validate_arguments
    def create_registered_model_version_with_http_info(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], model_version : Annotated[ModelVersion, Field(..., description="A new `ModelVersion` to be created.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a ModelVersion in RegisteredModel  # noqa: E501

        Creates a new instance of a `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_registered_model_version_with_http_info(registeredmodel_id, model_version, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param model_version: A new `ModelVersion` to be created. (required)
        :type model_version: ModelVersion
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registeredmodel_id',
            'model_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_registered_model_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registeredmodel_id']:
            _path_params['registeredmodelId'] = _params['registeredmodel_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['model_version'] is not None:
            _body_params = _params['model_version']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "ModelVersion",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/registered_models/{registeredmodelId}/versions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_serving_environment(self, serving_environment_create : Annotated[ServingEnvironmentCreate, Field(..., description="A new `ServingEnvironment` to be created.")], **kwargs) -> ServingEnvironment:  # noqa: E501
        """Create a ServingEnvironment  # noqa: E501

        Creates a new instance of a `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_serving_environment(serving_environment_create, async_req=True)
        >>> result = thread.get()

        :param serving_environment_create: A new `ServingEnvironment` to be created. (required)
        :type serving_environment_create: ServingEnvironmentCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServingEnvironment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_serving_environment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_serving_environment_with_http_info(serving_environment_create, **kwargs)  # noqa: E501

    @validate_arguments
    def create_serving_environment_with_http_info(self, serving_environment_create : Annotated[ServingEnvironmentCreate, Field(..., description="A new `ServingEnvironment` to be created.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a ServingEnvironment  # noqa: E501

        Creates a new instance of a `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_serving_environment_with_http_info(serving_environment_create, async_req=True)
        >>> result = thread.get()

        :param serving_environment_create: A new `ServingEnvironment` to be created. (required)
        :type serving_environment_create: ServingEnvironmentCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServingEnvironment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'serving_environment_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_serving_environment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['serving_environment_create'] is not None:
            _body_params = _params['serving_environment_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "ServingEnvironment",
            '400': "Error",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/serving_environments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_inference_service(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, parent_resource_id : Annotated[Optional[StrictStr], Field(description="ID of the parent resource to use for search.")] = None, **kwargs) -> InferenceService:  # noqa: E501
        """Get an InferenceServices that matches search parameters.  # noqa: E501

        Gets the details of a single instance of `InferenceService` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_inference_service(name, external_id, parent_resource_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param parent_resource_id: ID of the parent resource to use for search.
        :type parent_resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InferenceService
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_inference_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_inference_service_with_http_info(name, external_id, parent_resource_id, **kwargs)  # noqa: E501

    @validate_arguments
    def find_inference_service_with_http_info(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, parent_resource_id : Annotated[Optional[StrictStr], Field(description="ID of the parent resource to use for search.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get an InferenceServices that matches search parameters.  # noqa: E501

        Gets the details of a single instance of `InferenceService` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_inference_service_with_http_info(name, external_id, parent_resource_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param parent_resource_id: ID of the parent resource to use for search.
        :type parent_resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InferenceService, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'external_id',
            'parent_resource_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_inference_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        if _params.get('parent_resource_id') is not None:  # noqa: E501
            _query_params.append(('parentResourceId', _params['parent_resource_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "InferenceService",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_service', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_model_artifact(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, parent_resource_id : Annotated[Optional[StrictStr], Field(description="ID of the parent resource to use for search.")] = None, **kwargs) -> ModelArtifact:  # noqa: E501
        """Get a ModelArtifact that matches search parameters.  # noqa: E501

        Gets the details of a single instance of a `ModelArtifact` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_model_artifact(name, external_id, parent_resource_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param parent_resource_id: ID of the parent resource to use for search.
        :type parent_resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelArtifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_model_artifact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_model_artifact_with_http_info(name, external_id, parent_resource_id, **kwargs)  # noqa: E501

    @validate_arguments
    def find_model_artifact_with_http_info(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, parent_resource_id : Annotated[Optional[StrictStr], Field(description="ID of the parent resource to use for search.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get a ModelArtifact that matches search parameters.  # noqa: E501

        Gets the details of a single instance of a `ModelArtifact` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_model_artifact_with_http_info(name, external_id, parent_resource_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param parent_resource_id: ID of the parent resource to use for search.
        :type parent_resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelArtifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'external_id',
            'parent_resource_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_model_artifact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        if _params.get('parent_resource_id') is not None:  # noqa: E501
            _query_params.append(('parentResourceId', _params['parent_resource_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelArtifact",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_artifact', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_model_version(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, parent_resource_id : Annotated[Optional[StrictStr], Field(description="ID of the parent resource to use for search.")] = None, **kwargs) -> ModelVersion:  # noqa: E501
        """Get a ModelVersion that matches search parameters.  # noqa: E501

        Gets the details of a single instance of a `ModelVersion` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_model_version(name, external_id, parent_resource_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param parent_resource_id: ID of the parent resource to use for search.
        :type parent_resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_model_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_model_version_with_http_info(name, external_id, parent_resource_id, **kwargs)  # noqa: E501

    @validate_arguments
    def find_model_version_with_http_info(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, parent_resource_id : Annotated[Optional[StrictStr], Field(description="ID of the parent resource to use for search.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get a ModelVersion that matches search parameters.  # noqa: E501

        Gets the details of a single instance of a `ModelVersion` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_model_version_with_http_info(name, external_id, parent_resource_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param parent_resource_id: ID of the parent resource to use for search.
        :type parent_resource_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'external_id',
            'parent_resource_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_model_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        if _params.get('parent_resource_id') is not None:  # noqa: E501
            _query_params.append(('parentResourceId', _params['parent_resource_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelVersion",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_version', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_registered_model(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, **kwargs) -> RegisteredModel:  # noqa: E501
        """Get a RegisteredModel that matches search parameters.  # noqa: E501

        Gets the details of a single instance of a `RegisteredModel` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_registered_model(name, external_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegisteredModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_registered_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_registered_model_with_http_info(name, external_id, **kwargs)  # noqa: E501

    @validate_arguments
    def find_registered_model_with_http_info(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get a RegisteredModel that matches search parameters.  # noqa: E501

        Gets the details of a single instance of a `RegisteredModel` that matches search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_registered_model_with_http_info(name, external_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegisteredModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'external_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_registered_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "RegisteredModel",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/registered_model', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def find_serving_environment(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, **kwargs) -> ServingEnvironment:  # noqa: E501
        """Find ServingEnvironment  # noqa: E501

        Finds a `ServingEnvironment` entity that matches query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_serving_environment(name, external_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServingEnvironment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_serving_environment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.find_serving_environment_with_http_info(name, external_id, **kwargs)  # noqa: E501

    @validate_arguments
    def find_serving_environment_with_http_info(self, name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find ServingEnvironment  # noqa: E501

        Finds a `ServingEnvironment` entity that matches query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_serving_environment_with_http_info(name, external_id, async_req=True)
        >>> result = thread.get()

        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServingEnvironment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'external_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_serving_environment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ServingEnvironment",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/serving_environment', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_environment_inference_services(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> InferenceServiceList:  # noqa: E501
        """List All ServingEnvironment's InferenceServices  # noqa: E501

        Gets a list of all `InferenceService` entities for the `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_environment_inference_services(servingenvironment_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InferenceServiceList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_environment_inference_services_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_environment_inference_services_with_http_info(servingenvironment_id, name, external_id, page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_environment_inference_services_with_http_info(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All ServingEnvironment's InferenceServices  # noqa: E501

        Gets a list of all `InferenceService` entities for the `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_environment_inference_services_with_http_info(servingenvironment_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InferenceServiceList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'servingenvironment_id',
            'name',
            'external_id',
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment_inference_services" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['servingenvironment_id']:
            _path_params['servingenvironmentId'] = _params['servingenvironment_id']


        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "InferenceServiceList",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}/inference_services', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_inference_service(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], **kwargs) -> InferenceService:  # noqa: E501
        """Get a InferenceService  # noqa: E501

        Gets the details of a single instance of a `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service(inferenceservice_id, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InferenceService
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_inference_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_inference_service_with_http_info(inferenceservice_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_inference_service_with_http_info(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a InferenceService  # noqa: E501

        Gets the details of a single instance of a `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service_with_http_info(inferenceservice_id, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InferenceService, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inferenceservice_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inference_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['inferenceservice_id']:
            _path_params['inferenceserviceId'] = _params['inferenceservice_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "InferenceService",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_inference_service_model(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], **kwargs) -> RegisteredModel:  # noqa: E501
        """Get InferenceService's RegisteredModel  # noqa: E501

        Gets the `RegisteredModel` entity for the `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service_model(inferenceservice_id, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegisteredModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_inference_service_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_inference_service_model_with_http_info(inferenceservice_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_inference_service_model_with_http_info(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get InferenceService's RegisteredModel  # noqa: E501

        Gets the `RegisteredModel` entity for the `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service_model_with_http_info(inferenceservice_id, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegisteredModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inferenceservice_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inference_service_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['inferenceservice_id']:
            _path_params['inferenceserviceId'] = _params['inferenceservice_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "RegisteredModel",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/model', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_inference_service_serves(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ServeModelList:  # noqa: E501
        """List All InferenceService's ServeModel actions  # noqa: E501

        Gets a list of all `ServeModel` entities for the `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service_serves(inferenceservice_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServeModelList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_inference_service_serves_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_inference_service_serves_with_http_info(inferenceservice_id, name, external_id, page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_inference_service_serves_with_http_info(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All InferenceService's ServeModel actions  # noqa: E501

        Gets a list of all `ServeModel` entities for the `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service_serves_with_http_info(inferenceservice_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServeModelList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inferenceservice_id',
            'name',
            'external_id',
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inference_service_serves" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['inferenceservice_id']:
            _path_params['inferenceserviceId'] = _params['inferenceservice_id']


        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ServeModelList",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/serves', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_inference_service_version(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], **kwargs) -> ModelVersion:  # noqa: E501
        """Get InferenceService's ModelVersion  # noqa: E501

        Gets the `ModelVersion` entity for the `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service_version(inferenceservice_id, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_inference_service_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_inference_service_version_with_http_info(inferenceservice_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_inference_service_version_with_http_info(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get InferenceService's ModelVersion  # noqa: E501

        Gets the `ModelVersion` entity for the `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_service_version_with_http_info(inferenceservice_id, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inferenceservice_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inference_service_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['inferenceservice_id']:
            _path_params['inferenceserviceId'] = _params['inferenceservice_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelVersion",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/version', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_inference_services(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> InferenceServiceList:  # noqa: E501
        """List All InferenceServices  # noqa: E501

        Gets a list of all `InferenceService` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_services(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InferenceServiceList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_inference_services_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_inference_services_with_http_info(page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_inference_services_with_http_info(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All InferenceServices  # noqa: E501

        Gets a list of all `InferenceService` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inference_services_with_http_info(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InferenceServiceList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inference_services" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "InferenceServiceList",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_model_artifact(self, modelartifact_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelArtifact`.")], **kwargs) -> ModelArtifact:  # noqa: E501
        """Get a ModelArtifact  # noqa: E501

        Gets the details of a single instance of a `ModelArtifact`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_artifact(modelartifact_id, async_req=True)
        >>> result = thread.get()

        :param modelartifact_id: A unique identifier for a `ModelArtifact`. (required)
        :type modelartifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelArtifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_model_artifact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_model_artifact_with_http_info(modelartifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_model_artifact_with_http_info(self, modelartifact_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelArtifact`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a ModelArtifact  # noqa: E501

        Gets the details of a single instance of a `ModelArtifact`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_artifact_with_http_info(modelartifact_id, async_req=True)
        >>> result = thread.get()

        :param modelartifact_id: A unique identifier for a `ModelArtifact`. (required)
        :type modelartifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelArtifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'modelartifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_artifact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['modelartifact_id']:
            _path_params['modelartifactId'] = _params['modelartifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelArtifact",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_artifacts/{modelartifactId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_model_artifacts(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ModelArtifactList:  # noqa: E501
        """List All ModelArtifacts  # noqa: E501

        Gets a list of all `ModelArtifact` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_artifacts(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelArtifactList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_model_artifacts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_model_artifacts_with_http_info(page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_model_artifacts_with_http_info(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All ModelArtifacts  # noqa: E501

        Gets a list of all `ModelArtifact` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_artifacts_with_http_info(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelArtifactList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_artifacts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelArtifactList",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_artifacts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_model_version(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], **kwargs) -> ModelVersion:  # noqa: E501
        """Get a ModelVersion  # noqa: E501

        Gets the details of a single instance of a `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_version(modelversion_id, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_model_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_model_version_with_http_info(modelversion_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_model_version_with_http_info(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a ModelVersion  # noqa: E501

        Gets the details of a single instance of a `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_version_with_http_info(modelversion_id, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'modelversion_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['modelversion_id']:
            _path_params['modelversionId'] = _params['modelversion_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelVersion",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_versions/{modelversionId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_model_version_artifacts(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ArtifactList:  # noqa: E501
        """List all artifacts associated with the `ModelVersion`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_version_artifacts(modelversion_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ArtifactList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_model_version_artifacts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_model_version_artifacts_with_http_info(modelversion_id, name, external_id, page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_model_version_artifacts_with_http_info(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all artifacts associated with the `ModelVersion`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_version_artifacts_with_http_info(modelversion_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ArtifactList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'modelversion_id',
            'name',
            'external_id',
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_version_artifacts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['modelversion_id']:
            _path_params['modelversionId'] = _params['modelversion_id']


        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ArtifactList",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_versions/{modelversionId}/artifacts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_model_versions(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ModelVersionList:  # noqa: E501
        """List All ModelVersions  # noqa: E501

        Gets a list of all `ModelVersion` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_versions(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersionList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_model_versions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_model_versions_with_http_info(page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_model_versions_with_http_info(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All ModelVersions  # noqa: E501

        Gets a list of all `ModelVersion` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_versions_with_http_info(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersionList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_versions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelVersionList",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_registered_model(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], **kwargs) -> RegisteredModel:  # noqa: E501
        """Get a RegisteredModel  # noqa: E501

        Gets the details of a single instance of a `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registered_model(registeredmodel_id, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegisteredModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_registered_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_registered_model_with_http_info(registeredmodel_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_registered_model_with_http_info(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a RegisteredModel  # noqa: E501

        Gets the details of a single instance of a `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registered_model_with_http_info(registeredmodel_id, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegisteredModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registeredmodel_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registered_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registeredmodel_id']:
            _path_params['registeredmodelId'] = _params['registeredmodel_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "RegisteredModel",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/registered_models/{registeredmodelId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_registered_model_versions(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ModelVersionList:  # noqa: E501
        """List All RegisteredModel's ModelVersions  # noqa: E501

        Gets a list of all `ModelVersion` entities for the `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registered_model_versions(registeredmodel_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersionList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_registered_model_versions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_registered_model_versions_with_http_info(registeredmodel_id, name, external_id, page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_registered_model_versions_with_http_info(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], name : Annotated[Optional[StrictStr], Field(description="Name of entity to search.")] = None, external_id : Annotated[Optional[StrictStr], Field(description="External ID of entity to search.")] = None, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All RegisteredModel's ModelVersions  # noqa: E501

        Gets a list of all `ModelVersion` entities for the `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registered_model_versions_with_http_info(registeredmodel_id, name, external_id, page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param name: Name of entity to search.
        :type name: str
        :param external_id: External ID of entity to search.
        :type external_id: str
        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersionList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registeredmodel_id',
            'name',
            'external_id',
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registered_model_versions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registeredmodel_id']:
            _path_params['registeredmodelId'] = _params['registeredmodel_id']


        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('external_id') is not None:  # noqa: E501
            _query_params.append(('externalId', _params['external_id']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelVersionList",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/registered_models/{registeredmodelId}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_registered_models(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> RegisteredModelList:  # noqa: E501
        """List All RegisteredModels  # noqa: E501

        Gets a list of all `RegisteredModel` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registered_models(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegisteredModelList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_registered_models_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_registered_models_with_http_info(page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_registered_models_with_http_info(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All RegisteredModels  # noqa: E501

        Gets a list of all `RegisteredModel` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_registered_models_with_http_info(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegisteredModelList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registered_models" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "RegisteredModelList",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/registered_models', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_serving_environment(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], **kwargs) -> ServingEnvironment:  # noqa: E501
        """Get a ServingEnvironment  # noqa: E501

        Gets the details of a single instance of a `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serving_environment(servingenvironment_id, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServingEnvironment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_serving_environment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_serving_environment_with_http_info(servingenvironment_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_serving_environment_with_http_info(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a ServingEnvironment  # noqa: E501

        Gets the details of a single instance of a `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serving_environment_with_http_info(servingenvironment_id, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServingEnvironment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'servingenvironment_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_serving_environment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['servingenvironment_id']:
            _path_params['servingenvironmentId'] = _params['servingenvironment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ServingEnvironment",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_serving_environments(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ServingEnvironmentList:  # noqa: E501
        """List All ServingEnvironments  # noqa: E501

        Gets a list of all `ServingEnvironment` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serving_environments(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServingEnvironmentList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_serving_environments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_serving_environments_with_http_info(page_size, order_by, sort_order, next_page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def get_serving_environments_with_http_info(self, page_size : Annotated[Optional[StrictStr], Field(description="Number of entities in each page.")] = None, order_by : Annotated[Optional[OrderByField], Field(description="Specifies the order by criteria for listing entities.")] = None, sort_order : Annotated[Optional[SortOrder], Field(description="Specifies the sort order for listing entities, defaults to ASC.")] = None, next_page_token : Annotated[Optional[StrictStr], Field(description="Token to use to retrieve next page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List All ServingEnvironments  # noqa: E501

        Gets a list of all `ServingEnvironment` entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serving_environments_with_http_info(page_size, order_by, sort_order, next_page_token, async_req=True)
        >>> result = thread.get()

        :param page_size: Number of entities in each page.
        :type page_size: str
        :param order_by: Specifies the order by criteria for listing entities.
        :type order_by: OrderByField
        :param sort_order: Specifies the sort order for listing entities, defaults to ASC.
        :type sort_order: SortOrder
        :param next_page_token: Token to use to retrieve next page of results.
        :type next_page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServingEnvironmentList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page_size',
            'order_by',
            'sort_order',
            'next_page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_serving_environments" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by'].value))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order'].value))

        if _params.get('next_page_token') is not None:  # noqa: E501
            _query_params.append(('nextPageToken', _params['next_page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ServingEnvironmentList",
            '401': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/serving_environments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_inference_service(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], inference_service_update : Annotated[InferenceServiceUpdate, Field(..., description="Updated `InferenceService` information.")], **kwargs) -> InferenceService:  # noqa: E501
        """Update a InferenceService  # noqa: E501

        Updates an existing `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_inference_service(inferenceservice_id, inference_service_update, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param inference_service_update: Updated `InferenceService` information. (required)
        :type inference_service_update: InferenceServiceUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InferenceService
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_inference_service_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_inference_service_with_http_info(inferenceservice_id, inference_service_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_inference_service_with_http_info(self, inferenceservice_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `InferenceService`.")], inference_service_update : Annotated[InferenceServiceUpdate, Field(..., description="Updated `InferenceService` information.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a InferenceService  # noqa: E501

        Updates an existing `InferenceService`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_inference_service_with_http_info(inferenceservice_id, inference_service_update, async_req=True)
        >>> result = thread.get()

        :param inferenceservice_id: A unique identifier for a `InferenceService`. (required)
        :type inferenceservice_id: str
        :param inference_service_update: Updated `InferenceService` information. (required)
        :type inference_service_update: InferenceServiceUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InferenceService, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inferenceservice_id',
            'inference_service_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_inference_service" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['inferenceservice_id']:
            _path_params['inferenceserviceId'] = _params['inferenceservice_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['inference_service_update'] is not None:
            _body_params = _params['inference_service_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "InferenceService",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_model_artifact(self, modelartifact_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelArtifact`.")], model_artifact_update : Annotated[ModelArtifactUpdate, Field(..., description="Updated `ModelArtifact` information.")], **kwargs) -> ModelArtifact:  # noqa: E501
        """Update a ModelArtifact  # noqa: E501

        Updates an existing `ModelArtifact`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_model_artifact(modelartifact_id, model_artifact_update, async_req=True)
        >>> result = thread.get()

        :param modelartifact_id: A unique identifier for a `ModelArtifact`. (required)
        :type modelartifact_id: str
        :param model_artifact_update: Updated `ModelArtifact` information. (required)
        :type model_artifact_update: ModelArtifactUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelArtifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_model_artifact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_model_artifact_with_http_info(modelartifact_id, model_artifact_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_model_artifact_with_http_info(self, modelartifact_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelArtifact`.")], model_artifact_update : Annotated[ModelArtifactUpdate, Field(..., description="Updated `ModelArtifact` information.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a ModelArtifact  # noqa: E501

        Updates an existing `ModelArtifact`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_model_artifact_with_http_info(modelartifact_id, model_artifact_update, async_req=True)
        >>> result = thread.get()

        :param modelartifact_id: A unique identifier for a `ModelArtifact`. (required)
        :type modelartifact_id: str
        :param model_artifact_update: Updated `ModelArtifact` information. (required)
        :type model_artifact_update: ModelArtifactUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelArtifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'modelartifact_id',
            'model_artifact_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_model_artifact" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['modelartifact_id']:
            _path_params['modelartifactId'] = _params['modelartifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['model_artifact_update'] is not None:
            _body_params = _params['model_artifact_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelArtifact",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_artifacts/{modelartifactId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_model_version(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], model_version_update : Annotated[ModelVersionUpdate, Field(..., description="Updated `ModelVersion` information.")], **kwargs) -> ModelVersion:  # noqa: E501
        """Update a ModelVersion  # noqa: E501

        Updates an existing `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_model_version(modelversion_id, model_version_update, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param model_version_update: Updated `ModelVersion` information. (required)
        :type model_version_update: ModelVersionUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_model_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_model_version_with_http_info(modelversion_id, model_version_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_model_version_with_http_info(self, modelversion_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ModelVersion`.")], model_version_update : Annotated[ModelVersionUpdate, Field(..., description="Updated `ModelVersion` information.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a ModelVersion  # noqa: E501

        Updates an existing `ModelVersion`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_model_version_with_http_info(modelversion_id, model_version_update, async_req=True)
        >>> result = thread.get()

        :param modelversion_id: A unique identifier for a `ModelVersion`. (required)
        :type modelversion_id: str
        :param model_version_update: Updated `ModelVersion` information. (required)
        :type model_version_update: ModelVersionUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'modelversion_id',
            'model_version_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_model_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['modelversion_id']:
            _path_params['modelversionId'] = _params['modelversion_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['model_version_update'] is not None:
            _body_params = _params['model_version_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ModelVersion",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/model_versions/{modelversionId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_registered_model(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], registered_model_update : Annotated[RegisteredModelUpdate, Field(..., description="Updated `RegisteredModel` information.")], **kwargs) -> RegisteredModel:  # noqa: E501
        """Update a RegisteredModel  # noqa: E501

        Updates an existing `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_registered_model(registeredmodel_id, registered_model_update, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param registered_model_update: Updated `RegisteredModel` information. (required)
        :type registered_model_update: RegisteredModelUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegisteredModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_registered_model_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_registered_model_with_http_info(registeredmodel_id, registered_model_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_registered_model_with_http_info(self, registeredmodel_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `RegisteredModel`.")], registered_model_update : Annotated[RegisteredModelUpdate, Field(..., description="Updated `RegisteredModel` information.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a RegisteredModel  # noqa: E501

        Updates an existing `RegisteredModel`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_registered_model_with_http_info(registeredmodel_id, registered_model_update, async_req=True)
        >>> result = thread.get()

        :param registeredmodel_id: A unique identifier for a `RegisteredModel`. (required)
        :type registeredmodel_id: str
        :param registered_model_update: Updated `RegisteredModel` information. (required)
        :type registered_model_update: RegisteredModelUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegisteredModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'registeredmodel_id',
            'registered_model_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_registered_model" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['registeredmodel_id']:
            _path_params['registeredmodelId'] = _params['registeredmodel_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['registered_model_update'] is not None:
            _body_params = _params['registered_model_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "RegisteredModel",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/registered_models/{registeredmodelId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_serving_environment(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], serving_environment_update : Annotated[ServingEnvironmentUpdate, Field(..., description="Updated `ServingEnvironment` information.")], **kwargs) -> ServingEnvironment:  # noqa: E501
        """Update a ServingEnvironment  # noqa: E501

        Updates an existing `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_serving_environment(servingenvironment_id, serving_environment_update, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param serving_environment_update: Updated `ServingEnvironment` information. (required)
        :type serving_environment_update: ServingEnvironmentUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServingEnvironment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_serving_environment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_serving_environment_with_http_info(servingenvironment_id, serving_environment_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_serving_environment_with_http_info(self, servingenvironment_id : Annotated[StrictStr, Field(..., description="A unique identifier for a `ServingEnvironment`.")], serving_environment_update : Annotated[ServingEnvironmentUpdate, Field(..., description="Updated `ServingEnvironment` information.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a ServingEnvironment  # noqa: E501

        Updates an existing `ServingEnvironment`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_serving_environment_with_http_info(servingenvironment_id, serving_environment_update, async_req=True)
        >>> result = thread.get()

        :param servingenvironment_id: A unique identifier for a `ServingEnvironment`. (required)
        :type servingenvironment_id: str
        :param serving_environment_update: Updated `ServingEnvironment` information. (required)
        :type serving_environment_update: ServingEnvironmentUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServingEnvironment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'servingenvironment_id',
            'serving_environment_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_serving_environment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['servingenvironment_id']:
            _path_params['servingenvironmentId'] = _params['servingenvironment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['serving_environment_update'] is not None:
            _body_params = _params['serving_environment_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "ServingEnvironment",
            '400': "Error",
            '401': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
