openapi: 3.0.3
info:
  title: Model Catalog REST API
  version: v1alpha1
  description: REST API for Model Registry to create and manage ML model metadata
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  - url: "https://localhost:8080"
  - url: "http://localhost:8080"
paths:
  /api/model_catalog/v1alpha1/models:
    description: >-
      The REST endpoint/path used to list zero or more `CatalogModel` entities from all `CatalogSources`.
    get:
      summary: Search catalog models across sources.
      tags:
        - ModelCatalogService
      parameters:
        - name: source
          description: |-
            Filter models by source. Multiple values can be separated by commas
            to filter by multiple sources (OR logic). For example:
            ?source=huggingface,local will return models from either
            huggingface OR local sources.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          in: query
          required: false
        - name: q
          description: Free-form keyword search used to filter the response.
          schema:
            type: string
          in: query
          required: false
        - name: sourceLabel
          description: |-
            Filter models by the label associated with the source. Multiple
            values can be separated by commas. If one of the values is the
            string `null`, then models from every source without a label will
            be returned.
          schema:
            type: array
            items:
              type: string
          in: query
          required: false
        - $ref: "#/components/parameters/filterQuery"
        - $ref: "#/components/parameters/pageSize"
        - name: orderBy
          style: form
          explode: true
          examples:
            orderBy:
              value: ID
          description: |-
            Specifies the order by criteria for listing entities.

            Supported values are:
            - CREATE_TIME
            - LAST_UPDATE_TIME
            - ID
            - NAME
            - ACCURACY

            The `ACCURACY` sort will sort by the `overall_average` property in any linked metrics artifact.

            In addition, models can be sorted by properties. For example:
            - `provider.string_value` sorts by provider name
            - `artifacts.ifeval.double_value` sorts by the min/max value a property called ifeval across all associated artifacts
          schema:
            $ref: "#/components/schemas/OrderByField"
          in: query
          required: false
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/nextPageToken"
      responses:
        "200":
          $ref: "#/components/responses/CatalogModelListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: findModels
  /api/model_catalog/v1alpha1/models/filter_options:
    description: Lists options for `filterQuery` when listing models.
    get:
      summary: Lists fields and available options that can be used in `filterQuery` on the list models endpoint.
      tags:
        - ModelCatalogService
      responses:
        "200":
          $ref: "#/components/responses/FilterOptionsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: findModelsFilterOptions
  /api/model_catalog/v1alpha1/sources:
    summary: Path used to get the list of catalog sources.
    description: >-
      The REST endpoint/path used to list zero or more `CatalogSource` entities.
    get:
      summary: List All CatalogSources
      tags:
        - ModelCatalogService
      parameters:
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/nextPageToken"
      responses:
        "200":
          $ref: "#/components/responses/CatalogSourceListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: findSources
      description: Gets a list of all `CatalogSource` entities.
  /api/model_catalog/v1alpha1/sources/{source_id}/models/{model_name+}:
    description: >-
      The REST endpoint/path used to get a `CatalogModel`.
    get:
      summary: Get a `CatalogModel`.
      tags:
        - ModelCatalogService
      responses:
        "200":
          $ref: "#/components/responses/CatalogModelResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: getModel
    parameters:
      - name: source_id
        description: A unique identifier for a `CatalogSource`.
        schema:
          type: string
        in: path
        required: true
      - name: model_name+
        description: A unique identifier for the model.
        schema:
          type: string
        in: path
        required: true
  /api/model_catalog/v1alpha1/sources/{source_id}/models/{model_name}/artifacts:
    description: >-
      The REST endpoint/path used to list `CatalogArtifacts`.
    get:
      summary: List CatalogArtifacts.
      tags:
        - ModelCatalogService
      responses:
        "200":
          $ref: "#/components/responses/CatalogArtifactListResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: getAllModelArtifacts
    parameters:
      - name: source_id
        description: A unique identifier for a `CatalogSource`.
        schema:
          type: string
        in: path
        required: true
      - name: model_name
        description: A unique identifier for the model.
        schema:
          type: string
        in: path
        required: true
      - $ref: "#/components/parameters/artifactType"
      - $ref: "#/components/parameters/artifact_type"
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/orderBy"
      - $ref: "#/components/parameters/sortOrder"
      - $ref: "#/components/parameters/nextPageToken"
components:
  schemas:
    CatalogArtifact:
      description: A single artifact in the catalog API.
      oneOf:
        - $ref: "#/components/schemas/CatalogModelArtifact"
        - $ref: "#/components/schemas/CatalogMetricsArtifact"
      discriminator:
        propertyName: artifactType
        mapping:
          model-artifact: "#/components/schemas/CatalogModelArtifact"
          metrics-artifact: "#/components/schemas/CatalogMetricsArtifact"
    CatalogArtifactList:
      description: List of CatalogModel entities.
      allOf:
        - type: object
          properties:
            items:
              description: Array of `CatalogArtifact` entities.
              type: array
              items:
                $ref: "#/components/schemas/CatalogArtifact"
          required:
            - items
        - $ref: "#/components/schemas/BaseResourceList"
    ArtifactTypeQueryParam:
      description: Supported artifact types for querying.
      enum:
        - model-artifact
        - metrics-artifact
      type: string
    CatalogMetricsArtifact:
      description: A metadata Artifact Entity.
      allOf:
        - type: object
          required:
            - artifactType
            - metricsType
          properties:
            artifactType:
              type: string
              default: metrics-artifact
            metricsType:
              type: string
              enum:
                - performance-metrics
                - accuracy-metrics
            customProperties:
              description: User provided custom properties which are not defined by its type.
              type: object
              additionalProperties:
                $ref: "#/components/schemas/MetadataValue"
        - $ref: "#/components/schemas/BaseResource"
    CatalogModel:
      description: A model in the model catalog.
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              type: string
              description: Name of the model. Must be unique within a source.
              example: ibm-granite/granite-3.1-8b-base
            source_id:
              type: string
              description: ID of the source this model belongs to.
        - $ref: "#/components/schemas/BaseModel"
        - $ref: "#/components/schemas/BaseResource"
    CatalogModelArtifact:
      description: A Catalog Model Artifact Entity.
      allOf:
        - type: object
          required:
            - artifactType
            - uri
          properties:
            artifactType:
              type: string
              default: model-artifact
            uri:
              type: string
              format: uri
              description: URI where the model can be retrieved.
            customProperties:
              description: User provided custom properties which are not defined by its type.
              type: object
              additionalProperties:
                $ref: "#/components/schemas/MetadataValue"
        - $ref: "#/components/schemas/BaseResource"
    CatalogModelList:
      description: List of CatalogModel entities.
      allOf:
        - type: object
          properties:
            items:
              description: Array of `CatalogModel` entities.
              type: array
              items:
                $ref: "#/components/schemas/CatalogModel"
          required:
            - items
        - $ref: "#/components/schemas/BaseResourceList"
    CatalogSource:
      description: A catalog source. A catalog source has CatalogModel children.
      required:
        - id
        - name
        - labels
      type: object
      properties:
        id:
          description: A unique identifier for a `CatalogSource`.
          type: string
        name:
          description: The name of the catalog source.
          type: string
        enabled:
          description: Whether the catalog source is enabled.
          type: boolean
          default: true
        labels:
          description: Labels for the catalog source.
          type: array
          items:
            type: string
    CatalogSourceList:
      description: List of CatalogSource entities.
      allOf:
        - type: object
          properties:
            items:
              description: Array of `CatalogSource` entities.
              type: array
              items:
                $ref: "#/components/schemas/CatalogSource"
        - $ref: "#/components/schemas/BaseResourceList"
    FilterOption:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The data type of the filter option
          enum:
            - string
            - number
        values:
          type: array
          description: Known values of the property for string types with a small number of possible options.
          items: {}
        range:
          $ref: "#/components/schemas/FilterOptionRange"
    FilterOptionRange:
      type: object
      description: Min and max values for number types.
      properties:
        min:
          type: number
        max:
          type: number
    FilterOptionsList:
      description: List of FilterOptions
      type: object
      properties:
        filters:
          type: object
          description: A single filter option.
          additionalProperties:
            $ref: "#/components/schemas/FilterOption"
    OrderByField:
      description: |-
        Supported fields for ordering result entities.
      enum:
        - CREATE_TIME
        - LAST_UPDATE_TIME
        - ID
        - NAME
      type: string

  responses:
    CatalogArtifactListResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatalogArtifactList"
      description: A response containing a list of CatalogArtifact entities.
    CatalogModelListResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatalogModelList"
      description: A response containing a list of CatalogModel entities.
    CatalogModelResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatalogModel"
      description: A response containing a `CatalogModel` entity.
    CatalogSourceListResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatalogSourceList"
      description: A response containing a list of CatalogSource entities.
    CatalogSourceResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatalogSource"
      description: A response containing a `CatalogSource` entity.
    FilterOptionsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FilterOptionsList"
      description: A response containing options for a `filterQuery` parameter.

  parameters:
    filterQuery:
      examples:
        filterQuery:
          value: "name='my-model' AND state='LIVE'"
      name: filterQuery
      description: |
        A SQL-like query string to filter the list of catalog models. The query supports rich filtering capabilities with automatic type inference.

        **Supported Operators:**
        - Comparison: `=`, `!=`, `<>`, `>`, `<`, `>=`, `<=`
        - Pattern matching: `LIKE`, `ILIKE` (case-insensitive)
        - Set membership: `IN`
        - Logical: `AND`, `OR`
        - Grouping: `()` for complex expressions

        **Data Types:**
        - Strings: `"value"` or `'value'`
        - Numbers: `42`, `3.14`, `1e-5`
        - Booleans: `true`, `false` (case-insensitive)

        **Property Access:**
        - Standard properties: `name`, `id`, `state`, `createTimeSinceEpoch`
        - Custom properties: Any user-defined property name
        - Escaped properties: Use backticks for special characters: `` `custom-property` ``
        - Type-specific access: `property.string_value`, `property.double_value`, `property.int_value`, `property.bool_value`
        - **Related artifact properties**: `artifacts.<propertyName>` to filter models by their artifact properties

        **Examples:**
        - Basic: `name = "my-model"`
        - Comparison: `accuracy > 0.95`
        - Pattern: `name LIKE "%tensorflow%"`
        - Complex: `(name = "model-a" OR name = "model-b") AND state = "LIVE"`
        - Custom property: `framework.string_value = "pytorch"`
        - Escaped property: `` `mlflow.source.type` = "notebook" ``
        - **Artifact filtering**: `artifacts.ttft_mean >= 90` - filter models that have artifacts with ttft_mean >= 90
        - **Artifact custom property**: `artifacts.format = "pytorch"` - filter models by artifact custom properties
        - **Combined filtering**: `name = "llm-model" AND artifacts.performance_score > 0.95` - combine model and artifact filters
      schema:
        type: string
      in: query
      required: false
    orderBy:
      style: form
      explode: true
      examples:
        orderBy:
          value: ID
      name: orderBy
      description: Specifies the order by criteria for listing entities.
      schema:
        $ref: "#/components/schemas/OrderByField"
      in: query
      required: false
    artifactType:
      style: form
      explode: true
      examples:
        artifactType:
          value: model-artifact
      name: artifactType
      description: "Specifies the artifact type for listing artifacts."
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ArtifactTypeQueryParam"
      in: query
      required: false
    artifact_type:
      deprecated: true
      style: form
      explode: true
      examples:
        artifact_type:
          value: model-artifact
      name: artifact_type
      description: "Specifies the artifact type for listing artifacts."
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ArtifactTypeQueryParam"
      in: query
      required: false
tags: []
