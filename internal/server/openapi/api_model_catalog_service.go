/*
 * Model Registry REST API
 *
 * REST API for Model Registry to create and manage ML model metadata
 *
 * API version: v1alpha3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"

	model "github.com/kubeflow/model-registry/pkg/openapi"
)

// ModelCatalogServiceAPIController binds http requests to an api service and writes the service results to the http response
type ModelCatalogServiceAPIController struct {
	service      ModelCatalogServiceAPIServicer
	errorHandler ErrorHandler
}

// ModelCatalogServiceAPIOption for how the controller is set up.
type ModelCatalogServiceAPIOption func(*ModelCatalogServiceAPIController)

// WithModelCatalogServiceAPIErrorHandler inject ErrorHandler into controller
func WithModelCatalogServiceAPIErrorHandler(h ErrorHandler) ModelCatalogServiceAPIOption {
	return func(c *ModelCatalogServiceAPIController) {
		c.errorHandler = h
	}
}

// NewModelCatalogServiceAPIController creates a default api controller
func NewModelCatalogServiceAPIController(s ModelCatalogServiceAPIServicer, opts ...ModelCatalogServiceAPIOption) Router {
	controller := &ModelCatalogServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModelCatalogServiceAPIController
func (c *ModelCatalogServiceAPIController) Routes() Routes {
	return Routes{
		"GetAllCatalogModels": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/catalog_sources/models",
			c.GetAllCatalogModels,
		},
		"GetCatalogModel": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/catalog_sources/{id}/models/{model_id}",
			c.GetCatalogModel,
		},
		"GetCatalogModelVersion": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/catalog_sources/{id}/models/{model_id}/version/{version_id}",
			c.GetCatalogModelVersion,
		},
		"GetCatalogModelVersions": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/catalog_sources/{id}/models/{model_id}/versions",
			c.GetCatalogModelVersions,
		},
		"GetCatalogModels": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/catalog_sources/{id}/models",
			c.GetCatalogModels,
		},
		"GetCatalogSource": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/catalog_sources/{id}",
			c.GetCatalogSource,
		},
		"GetCatalogSources": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/catalog_sources",
			c.GetCatalogSources,
		},
	}
}

// GetAllCatalogModels - List All CatalogModels from All CatalogSources
func (c *ModelCatalogServiceAPIController) GetAllCatalogModels(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nameParam := query.Get("name")
	externalIdParam := query.Get("externalId")
	pageSizeParam := query.Get("pageSize")
	orderByParam := query.Get("orderBy")
	sortOrderParam := query.Get("sortOrder")
	offsetParam := query.Get("offset")
	result, err := c.service.GetAllCatalogModels(r.Context(), nameParam, externalIdParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogModel - Get a CatalogModel
func (c *ModelCatalogServiceAPIController) GetCatalogModel(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	modelIdParam := chi.URLParam(r, "model_id")
	result, err := c.service.GetCatalogModel(r.Context(), idParam, modelIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogModelVersion - Get a CatalogModelVersion
func (c *ModelCatalogServiceAPIController) GetCatalogModelVersion(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	modelIdParam := chi.URLParam(r, "model_id")
	versionIdParam := chi.URLParam(r, "version_id")
	result, err := c.service.GetCatalogModelVersion(r.Context(), idParam, modelIdParam, versionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogModelVersions - List All CatalogModelVersions
func (c *ModelCatalogServiceAPIController) GetCatalogModelVersions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := chi.URLParam(r, "id")
	modelIdParam := chi.URLParam(r, "model_id")
	nameParam := query.Get("name")
	externalIdParam := query.Get("externalId")
	pageSizeParam := query.Get("pageSize")
	orderByParam := query.Get("orderBy")
	sortOrderParam := query.Get("sortOrder")
	offsetParam := query.Get("offset")
	result, err := c.service.GetCatalogModelVersions(r.Context(), idParam, modelIdParam, nameParam, externalIdParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogModels - List All CatalogModels
func (c *ModelCatalogServiceAPIController) GetCatalogModels(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := chi.URLParam(r, "id")
	nameParam := query.Get("name")
	externalIdParam := query.Get("externalId")
	pageSizeParam := query.Get("pageSize")
	orderByParam := query.Get("orderBy")
	sortOrderParam := query.Get("sortOrder")
	offsetParam := query.Get("offset")
	result, err := c.service.GetCatalogModels(r.Context(), idParam, nameParam, externalIdParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogSource - Get a CatalogSource
func (c *ModelCatalogServiceAPIController) GetCatalogSource(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	result, err := c.service.GetCatalogSource(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogSources - List All CatalogSources
func (c *ModelCatalogServiceAPIController) GetCatalogSources(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nameParam := query.Get("name")
	pageSizeParam := query.Get("pageSize")
	orderByParam := query.Get("orderBy")
	sortOrderParam := query.Get("sortOrder")
	offsetParam := query.Get("offset")
	result, err := c.service.GetCatalogSources(r.Context(), nameParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
