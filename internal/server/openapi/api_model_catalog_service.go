/*
 * Model Registry REST API
 *
 * REST API for Model Registry to create and manage ML model metadata
 *
 * API version: v1alpha3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"

	model "github.com/kubeflow/model-registry/pkg/openapi"
)

// ModelCatalogServiceAPIController binds http requests to an api service and writes the service results to the http response
type ModelCatalogServiceAPIController struct {
	service      ModelCatalogServiceAPIServicer
	errorHandler ErrorHandler
}

// ModelCatalogServiceAPIOption for how the controller is set up.
type ModelCatalogServiceAPIOption func(*ModelCatalogServiceAPIController)

// WithModelCatalogServiceAPIErrorHandler inject ErrorHandler into controller
func WithModelCatalogServiceAPIErrorHandler(h ErrorHandler) ModelCatalogServiceAPIOption {
	return func(c *ModelCatalogServiceAPIController) {
		c.errorHandler = h
	}
}

// NewModelCatalogServiceAPIController creates a default api controller
func NewModelCatalogServiceAPIController(s ModelCatalogServiceAPIServicer, opts ...ModelCatalogServiceAPIOption) Router {
	controller := &ModelCatalogServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModelCatalogServiceAPIController
func (c *ModelCatalogServiceAPIController) Routes() Routes {
	return Routes{
		"ApiModelCatalogV1alpha3SourcesSourceIdModelsModelIdReadmeGet": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/sources/{source_id}/models/{model_id}/readme",
			c.ApiModelCatalogV1alpha3SourcesSourceIdModelsModelIdReadmeGet,
		},
		"GetAllCatalogModels": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/models",
			c.GetAllCatalogModels,
		},
		"GetCatalogModel": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/sources/{source_id}/models/{model_id}",
			c.GetCatalogModel,
		},
		"GetCatalogSources": Route{
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha3/sources",
			c.GetCatalogSources,
		},
	}
}

// ApiModelCatalogV1alpha3SourcesSourceIdModelsModelIdReadmeGet -
func (c *ModelCatalogServiceAPIController) ApiModelCatalogV1alpha3SourcesSourceIdModelsModelIdReadmeGet(w http.ResponseWriter, r *http.Request) {
	sourceIdParam := chi.URLParam(r, "source_id")
	modelIdParam := chi.URLParam(r, "model_id")
	result, err := c.service.ApiModelCatalogV1alpha3SourcesSourceIdModelsModelIdReadmeGet(r.Context(), sourceIdParam, modelIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllCatalogModels -
func (c *ModelCatalogServiceAPIController) GetAllCatalogModels(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	sourceParam := query.Get("source")
	pageSizeParam := query.Get("pageSize")
	orderByParam := query.Get("orderBy")
	sortOrderParam := query.Get("sortOrder")
	offsetParam := query.Get("offset")
	result, err := c.service.GetAllCatalogModels(r.Context(), sourceParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogModel -
func (c *ModelCatalogServiceAPIController) GetCatalogModel(w http.ResponseWriter, r *http.Request) {
	sourceIdParam := chi.URLParam(r, "source_id")
	modelIdParam := chi.URLParam(r, "model_id")
	result, err := c.service.GetCatalogModel(r.Context(), sourceIdParam, modelIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCatalogSources - List All CatalogSources
func (c *ModelCatalogServiceAPIController) GetCatalogSources(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nameParam := query.Get("name")
	pageSizeParam := query.Get("pageSize")
	orderByParam := query.Get("orderBy")
	sortOrderParam := query.Get("sortOrder")
	offsetParam := query.Get("offset")
	result, err := c.service.GetCatalogSources(r.Context(), nameParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
