/*
 * Model Registry REST API
 *
 * REST API for Model Registry to create and manage ML model metadata
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"fmt"
	"github.com/kubeflow/model-registry/internal/catalog"
	"github.com/kubeflow/model-registry/pkg/openapi"
	"net/http"
)

// ModelCatalogServiceAPIService is a service that implements the logic for the ModelCatalogServiceAPIServicer
// This service should implement the business logic for every endpoint for the ModelCatalogServiceAPI s.coreApi.
// Include any external packages or services that will be required by this service.
type ModelCatalogServiceAPIService struct {
	modelCatalogs map[string]catalog.ModelCatalogApi
}

func (m ModelCatalogServiceAPIService) GetAllCatalogModels(ctx context.Context, name string, externalId string, pageSize string, orderBy openapi.OrderByField, sortOrder openapi.SortOrder, offset string) (ImplResponse, error) {
	var lastError error
	var allModels openapi.CatalogModelList
	for _, modelCatalog := range m.modelCatalogs {
		models, err := modelCatalog.GetCatalogModels(ctx, name, externalId, pageSize, orderBy, sortOrder, offset)
		if err != nil {
			lastError = err
		}
		allModels.Items = append(allModels.Items, models.Items...)
		allModels.PageSize = models.PageSize
		allModels.Size += models.Size
	}
	if lastError != nil && allModels.Size == 0 {
		// only return an error if there are no models from any catalogs
		// NOTE: catalog access errors are silently ignored if at least one catalog is functioning
		return Response(http.StatusInternalServerError, lastError), lastError
	}
	return Response(http.StatusOK, allModels), lastError
}

func (m ModelCatalogServiceAPIService) GetCatalogModel(ctx context.Context, id string, modelId string) (ImplResponse, error) {
	catalog, ok := m.modelCatalogs[id]
	if !ok {
		return missingCatalogError(id)
	}
	response, err := catalog.GetCatalogModel(ctx, modelId)
	if err != nil {
		return ErrorResponse(http.StatusBadRequest, err), err
	}
	return Response(http.StatusOK, response), nil
}

func (m ModelCatalogServiceAPIService) GetCatalogModelVersion(ctx context.Context, id string, modelId string, modelVersionId string) (ImplResponse, error) {
	catalog, ok := m.modelCatalogs[id]
	if !ok {
		return missingCatalogError(id)
	}
	response, err := catalog.GetCatalogModelVersion(ctx, modelId, modelVersionId)
	if err != nil {
		return ErrorResponse(http.StatusBadRequest, err), err
	}
	return Response(http.StatusOK, response), nil
}

func (m ModelCatalogServiceAPIService) GetCatalogModelVersions(ctx context.Context, id string, modelId string, name string, externalId string, pageSize string, orderBy openapi.OrderByField, sortOrder openapi.SortOrder, offset string) (ImplResponse, error) {
	catalog, ok := m.modelCatalogs[id]
	if !ok {
		return missingCatalogError(id)
	}
	response, err := catalog.GetCatalogModelVersions(ctx, modelId, name, externalId, pageSize, orderBy, sortOrder, offset)
	if err != nil {
		return ErrorResponse(http.StatusBadRequest, err), err
	}
	return Response(http.StatusOK, response), nil
}

func (m ModelCatalogServiceAPIService) GetCatalogModels(ctx context.Context, id string, name string, externalId string, pageSize string, orderBy openapi.OrderByField, sortOrder openapi.SortOrder, offset string) (ImplResponse, error) {
	catalog, ok := m.modelCatalogs[id]
	if !ok {
		return missingCatalogError(id)
	}
	response, err := catalog.GetCatalogModels(ctx, name, externalId, pageSize, orderBy, sortOrder, offset)
	if err != nil {
		return ErrorResponse(http.StatusBadRequest, err), err
	}
	return Response(http.StatusOK, response), nil
}

func (m ModelCatalogServiceAPIService) GetCatalogSource(ctx context.Context, id string) (ImplResponse, error) {
	catalog, ok := m.modelCatalogs[id]
	if !ok {
		return missingCatalogError(id)
	}
	response, err := catalog.GetCatalogSource()
	if err != nil {
		return ErrorResponse(http.StatusBadRequest, err), err
	}
	return Response(http.StatusOK, response), nil
}

func (m ModelCatalogServiceAPIService) GetCatalogSources(ctx context.Context, name string, pageSize string, orderBy openapi.OrderByField, sortOrder openapi.SortOrder, offset string) (ImplResponse, error) {
	response := openapi.CatalogSourceList{
		Items: make([]openapi.CatalogSource, 0),
	}
	// TODO add support for paging
	for _, catalog := range m.modelCatalogs {
		source, err := catalog.GetCatalogSource()
		if err != nil {
			return ErrorResponse(http.StatusBadRequest, err), err
		}
		response.Items = append(response.Items, source)
	}
	return Response(http.StatusOK, response), nil
}

func missingCatalogError(id string) (ImplResponse, error) {
	err := fmt.Errorf("Missing catalog %s", id)
	return ErrorResponse(http.StatusNotFound, err), err
}

var _ ModelCatalogServiceAPIServicer = &ModelCatalogServiceAPIService{}

// NewModelCatalogServiceAPIService creates a default api service
func NewModelCatalogServiceAPIService(modelCatalogs map[string]catalog.ModelCatalogApi) ModelCatalogServiceAPIServicer {
	return &ModelCatalogServiceAPIService{
		modelCatalogs: modelCatalogs,
	}
}
