// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Model Registry REST API
 *
 * REST API for Model Registry to create and manage ML model metadata
 *
 * API version: v1alpha3
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"

	model "github.com/kubeflow/model-registry/pkg/openapi"
)

// ModelRegistryServiceAPIController binds http requests to an api service and writes the service results to the http response
type ModelRegistryServiceAPIController struct {
	service      ModelRegistryServiceAPIServicer
	errorHandler ErrorHandler
}

// ModelRegistryServiceAPIOption for how the controller is set up.
type ModelRegistryServiceAPIOption func(*ModelRegistryServiceAPIController)

// WithModelRegistryServiceAPIErrorHandler inject ErrorHandler into controller
func WithModelRegistryServiceAPIErrorHandler(h ErrorHandler) ModelRegistryServiceAPIOption {
	return func(c *ModelRegistryServiceAPIController) {
		c.errorHandler = h
	}
}

// NewModelRegistryServiceAPIController creates a default api controller
func NewModelRegistryServiceAPIController(s ModelRegistryServiceAPIServicer, opts ...ModelRegistryServiceAPIOption) *ModelRegistryServiceAPIController {
	controller := &ModelRegistryServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModelRegistryServiceAPIController
func (c *ModelRegistryServiceAPIController) Routes() Routes {
	return Routes{
		"FindArtifact": Route{
			"FindArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/artifact",
			c.FindArtifact,
		},
		"GetArtifacts": Route{
			"GetArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/artifacts",
			c.GetArtifacts,
		},
		"CreateArtifact": Route{
			"CreateArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/artifacts",
			c.CreateArtifact,
		},
		"GetArtifact": Route{
			"GetArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/artifacts/{id}",
			c.GetArtifact,
		},
		"UpdateArtifact": Route{
			"UpdateArtifact",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/artifacts/{id}",
			c.UpdateArtifact,
		},
		"FindExperiment": Route{
			"FindExperiment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment",
			c.FindExperiment,
		},
		"FindExperimentRun": Route{
			"FindExperimentRun",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_run",
			c.FindExperimentRun,
		},
		"GetExperimentRuns": Route{
			"GetExperimentRuns",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs",
			c.GetExperimentRuns,
		},
		"CreateExperimentRun": Route{
			"CreateExperimentRun",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiment_runs",
			c.CreateExperimentRun,
		},
		"GetExperimentRunsMetricHistory": Route{
			"GetExperimentRunsMetricHistory",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/metric_history",
			c.GetExperimentRunsMetricHistory,
		},
		"GetExperimentRun": Route{
			"GetExperimentRun",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}",
			c.GetExperimentRun,
		},
		"UpdateExperimentRun": Route{
			"UpdateExperimentRun",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}",
			c.UpdateExperimentRun,
		},
		"GetExperimentRunArtifacts": Route{
			"GetExperimentRunArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}/artifacts",
			c.GetExperimentRunArtifacts,
		},
		"UpsertExperimentRunArtifact": Route{
			"UpsertExperimentRunArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}/artifacts",
			c.UpsertExperimentRunArtifact,
		},
		"GetExperimentRunMetricHistory": Route{
			"GetExperimentRunMetricHistory",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}/metric_history",
			c.GetExperimentRunMetricHistory,
		},
		"GetExperiments": Route{
			"GetExperiments",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiments",
			c.GetExperiments,
		},
		"CreateExperiment": Route{
			"CreateExperiment",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiments",
			c.CreateExperiment,
		},
		"GetExperiment": Route{
			"GetExperiment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}",
			c.GetExperiment,
		},
		"UpdateExperiment": Route{
			"UpdateExperiment",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}",
			c.UpdateExperiment,
		},
		"GetExperimentExperimentRuns": Route{
			"GetExperimentExperimentRuns",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}/experiment_runs",
			c.GetExperimentExperimentRuns,
		},
		"CreateExperimentExperimentRun": Route{
			"CreateExperimentExperimentRun",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}/experiment_runs",
			c.CreateExperimentExperimentRun,
		},
		"FindInferenceService": Route{
			"FindInferenceService",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_service",
			c.FindInferenceService,
		},
		"GetInferenceServices": Route{
			"GetInferenceServices",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services",
			c.GetInferenceServices,
		},
		"CreateInferenceService": Route{
			"CreateInferenceService",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/inference_services",
			c.CreateInferenceService,
		},
		"GetInferenceService": Route{
			"GetInferenceService",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}",
			c.GetInferenceService,
		},
		"UpdateInferenceService": Route{
			"UpdateInferenceService",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}",
			c.UpdateInferenceService,
		},
		"GetInferenceServiceModel": Route{
			"GetInferenceServiceModel",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/model",
			c.GetInferenceServiceModel,
		},
		"GetInferenceServiceServes": Route{
			"GetInferenceServiceServes",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/serves",
			c.GetInferenceServiceServes,
		},
		"CreateInferenceServiceServe": Route{
			"CreateInferenceServiceServe",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/serves",
			c.CreateInferenceServiceServe,
		},
		"GetInferenceServiceVersion": Route{
			"GetInferenceServiceVersion",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/version",
			c.GetInferenceServiceVersion,
		},
		"FindModelArtifact": Route{
			"FindModelArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_artifact",
			c.FindModelArtifact,
		},
		"GetModelArtifacts": Route{
			"GetModelArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_artifacts",
			c.GetModelArtifacts,
		},
		"CreateModelArtifact": Route{
			"CreateModelArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/model_artifacts",
			c.CreateModelArtifact,
		},
		"GetModelArtifact": Route{
			"GetModelArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_artifacts/{modelartifactId}",
			c.GetModelArtifact,
		},
		"UpdateModelArtifact": Route{
			"UpdateModelArtifact",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/model_artifacts/{modelartifactId}",
			c.UpdateModelArtifact,
		},
		"FindModelVersion": Route{
			"FindModelVersion",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_version",
			c.FindModelVersion,
		},
		"GetModelVersions": Route{
			"GetModelVersions",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_versions",
			c.GetModelVersions,
		},
		"CreateModelVersion": Route{
			"CreateModelVersion",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/model_versions",
			c.CreateModelVersion,
		},
		"GetModelVersion": Route{
			"GetModelVersion",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}",
			c.GetModelVersion,
		},
		"UpdateModelVersion": Route{
			"UpdateModelVersion",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}",
			c.UpdateModelVersion,
		},
		"GetModelVersionArtifacts": Route{
			"GetModelVersionArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}/artifacts",
			c.GetModelVersionArtifacts,
		},
		"UpsertModelVersionArtifact": Route{
			"UpsertModelVersionArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}/artifacts",
			c.UpsertModelVersionArtifact,
		},
		"FindRegisteredModel": Route{
			"FindRegisteredModel",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_model",
			c.FindRegisteredModel,
		},
		"GetRegisteredModels": Route{
			"GetRegisteredModels",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_models",
			c.GetRegisteredModels,
		},
		"CreateRegisteredModel": Route{
			"CreateRegisteredModel",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/registered_models",
			c.CreateRegisteredModel,
		},
		"GetRegisteredModel": Route{
			"GetRegisteredModel",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}",
			c.GetRegisteredModel,
		},
		"UpdateRegisteredModel": Route{
			"UpdateRegisteredModel",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}",
			c.UpdateRegisteredModel,
		},
		"GetRegisteredModelVersions": Route{
			"GetRegisteredModelVersions",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}/versions",
			c.GetRegisteredModelVersions,
		},
		"CreateRegisteredModelVersion": Route{
			"CreateRegisteredModelVersion",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}/versions",
			c.CreateRegisteredModelVersion,
		},
		"FindServingEnvironment": Route{
			"FindServingEnvironment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environment",
			c.FindServingEnvironment,
		},
		"GetServingEnvironments": Route{
			"GetServingEnvironments",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environments",
			c.GetServingEnvironments,
		},
		"CreateServingEnvironment": Route{
			"CreateServingEnvironment",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/serving_environments",
			c.CreateServingEnvironment,
		},
		"GetServingEnvironment": Route{
			"GetServingEnvironment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}",
			c.GetServingEnvironment,
		},
		"UpdateServingEnvironment": Route{
			"UpdateServingEnvironment",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}",
			c.UpdateServingEnvironment,
		},
		"GetEnvironmentInferenceServices": Route{
			"GetEnvironmentInferenceServices",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}/inference_services",
			c.GetEnvironmentInferenceServices,
		},
		"CreateEnvironmentInferenceService": Route{
			"CreateEnvironmentInferenceService",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}/inference_services",
			c.CreateEnvironmentInferenceService,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the ModelRegistryServiceAPIController
func (c *ModelRegistryServiceAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"FindArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/artifact",
			c.FindArtifact,
		},
		Route{
			"GetArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/artifacts",
			c.GetArtifacts,
		},
		Route{
			"CreateArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/artifacts",
			c.CreateArtifact,
		},
		Route{
			"GetArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/artifacts/{id}",
			c.GetArtifact,
		},
		Route{
			"UpdateArtifact",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/artifacts/{id}",
			c.UpdateArtifact,
		},
		Route{
			"FindExperiment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment",
			c.FindExperiment,
		},
		Route{
			"FindExperimentRun",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_run",
			c.FindExperimentRun,
		},
		Route{
			"GetExperimentRuns",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs",
			c.GetExperimentRuns,
		},
		Route{
			"CreateExperimentRun",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiment_runs",
			c.CreateExperimentRun,
		},
		Route{
			"GetExperimentRunsMetricHistory",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/metric_history",
			c.GetExperimentRunsMetricHistory,
		},
		Route{
			"GetExperimentRun",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}",
			c.GetExperimentRun,
		},
		Route{
			"UpdateExperimentRun",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}",
			c.UpdateExperimentRun,
		},
		Route{
			"GetExperimentRunArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}/artifacts",
			c.GetExperimentRunArtifacts,
		},
		Route{
			"UpsertExperimentRunArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}/artifacts",
			c.UpsertExperimentRunArtifact,
		},
		Route{
			"GetExperimentRunMetricHistory",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiment_runs/{experimentrunId}/metric_history",
			c.GetExperimentRunMetricHistory,
		},
		Route{
			"GetExperiments",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiments",
			c.GetExperiments,
		},
		Route{
			"CreateExperiment",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiments",
			c.CreateExperiment,
		},
		Route{
			"GetExperiment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}",
			c.GetExperiment,
		},
		Route{
			"UpdateExperiment",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}",
			c.UpdateExperiment,
		},
		Route{
			"GetExperimentExperimentRuns",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}/experiment_runs",
			c.GetExperimentExperimentRuns,
		},
		Route{
			"CreateExperimentExperimentRun",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/experiments/{experimentId}/experiment_runs",
			c.CreateExperimentExperimentRun,
		},
		Route{
			"FindInferenceService",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_service",
			c.FindInferenceService,
		},
		Route{
			"GetInferenceServices",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services",
			c.GetInferenceServices,
		},
		Route{
			"CreateInferenceService",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/inference_services",
			c.CreateInferenceService,
		},
		Route{
			"GetInferenceService",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}",
			c.GetInferenceService,
		},
		Route{
			"UpdateInferenceService",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}",
			c.UpdateInferenceService,
		},
		Route{
			"GetInferenceServiceModel",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/model",
			c.GetInferenceServiceModel,
		},
		Route{
			"GetInferenceServiceServes",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/serves",
			c.GetInferenceServiceServes,
		},
		Route{
			"CreateInferenceServiceServe",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/serves",
			c.CreateInferenceServiceServe,
		},
		Route{
			"GetInferenceServiceVersion",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/inference_services/{inferenceserviceId}/version",
			c.GetInferenceServiceVersion,
		},
		Route{
			"FindModelArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_artifact",
			c.FindModelArtifact,
		},
		Route{
			"GetModelArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_artifacts",
			c.GetModelArtifacts,
		},
		Route{
			"CreateModelArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/model_artifacts",
			c.CreateModelArtifact,
		},
		Route{
			"GetModelArtifact",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_artifacts/{modelartifactId}",
			c.GetModelArtifact,
		},
		Route{
			"UpdateModelArtifact",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/model_artifacts/{modelartifactId}",
			c.UpdateModelArtifact,
		},
		Route{
			"FindModelVersion",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_version",
			c.FindModelVersion,
		},
		Route{
			"GetModelVersions",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_versions",
			c.GetModelVersions,
		},
		Route{
			"CreateModelVersion",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/model_versions",
			c.CreateModelVersion,
		},
		Route{
			"GetModelVersion",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}",
			c.GetModelVersion,
		},
		Route{
			"UpdateModelVersion",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}",
			c.UpdateModelVersion,
		},
		Route{
			"GetModelVersionArtifacts",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}/artifacts",
			c.GetModelVersionArtifacts,
		},
		Route{
			"UpsertModelVersionArtifact",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/model_versions/{modelversionId}/artifacts",
			c.UpsertModelVersionArtifact,
		},
		Route{
			"FindRegisteredModel",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_model",
			c.FindRegisteredModel,
		},
		Route{
			"GetRegisteredModels",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_models",
			c.GetRegisteredModels,
		},
		Route{
			"CreateRegisteredModel",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/registered_models",
			c.CreateRegisteredModel,
		},
		Route{
			"GetRegisteredModel",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}",
			c.GetRegisteredModel,
		},
		Route{
			"UpdateRegisteredModel",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}",
			c.UpdateRegisteredModel,
		},
		Route{
			"GetRegisteredModelVersions",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}/versions",
			c.GetRegisteredModelVersions,
		},
		Route{
			"CreateRegisteredModelVersion",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/registered_models/{registeredmodelId}/versions",
			c.CreateRegisteredModelVersion,
		},
		Route{
			"FindServingEnvironment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environment",
			c.FindServingEnvironment,
		},
		Route{
			"GetServingEnvironments",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environments",
			c.GetServingEnvironments,
		},
		Route{
			"CreateServingEnvironment",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/serving_environments",
			c.CreateServingEnvironment,
		},
		Route{
			"GetServingEnvironment",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}",
			c.GetServingEnvironment,
		},
		Route{
			"UpdateServingEnvironment",
			strings.ToUpper("Patch"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}",
			c.UpdateServingEnvironment,
		},
		Route{
			"GetEnvironmentInferenceServices",
			strings.ToUpper("Get"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}/inference_services",
			c.GetEnvironmentInferenceServices,
		},
		Route{
			"CreateEnvironmentInferenceService",
			strings.ToUpper("Post"),
			"/api/model_registry/v1alpha3/serving_environments/{servingenvironmentId}/inference_services",
			c.CreateEnvironmentInferenceService,
		},
	}
}

// FindArtifact - Get an Artifact that matches search parameters.
func (c *ModelRegistryServiceAPIController) FindArtifact(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var parentResourceIdParam string
	if query.Has("parentResourceId") {
		param := query.Get("parentResourceId")

		parentResourceIdParam = param
	} else {
	}
	result, err := c.service.FindArtifact(r.Context(), nameParam, externalIdParam, parentResourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetArtifacts - List All Artifacts
func (c *ModelRegistryServiceAPIController) GetArtifacts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var artifactTypeParam model.ArtifactTypeQueryParam
	if query.Has("artifactType") {
		param := model.ArtifactTypeQueryParam(query.Get("artifactType"))

		artifactTypeParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetArtifacts(r.Context(), filterQueryParam, model.ArtifactTypeQueryParam(artifactTypeParam), pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateArtifact - Create an Artifact
func (c *ModelRegistryServiceAPIController) CreateArtifact(w http.ResponseWriter, r *http.Request) {
	artifactCreateParam := *model.NewArtifactCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&artifactCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArtifactCreateRequired(artifactCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArtifactCreateConstraints(artifactCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateArtifact(r.Context(), artifactCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetArtifact - Get an Artifact
func (c *ModelRegistryServiceAPIController) GetArtifact(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetArtifact(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateArtifact - Update an Artifact
func (c *ModelRegistryServiceAPIController) UpdateArtifact(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	artifactUpdateParam := *model.NewArtifactUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&artifactUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArtifactUpdateRequired(artifactUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArtifactUpdateConstraints(artifactUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateArtifact(r.Context(), idParam, artifactUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindExperiment - Get an Experiment that matches search parameters.
func (c *ModelRegistryServiceAPIController) FindExperiment(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	result, err := c.service.FindExperiment(r.Context(), nameParam, externalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindExperimentRun - Get an ExperimentRun that matches search parameters.
func (c *ModelRegistryServiceAPIController) FindExperimentRun(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var parentResourceIdParam string
	if query.Has("parentResourceId") {
		param := query.Get("parentResourceId")

		parentResourceIdParam = param
	} else {
	}
	result, err := c.service.FindExperimentRun(r.Context(), nameParam, externalIdParam, parentResourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperimentRuns - List All ExperimentRuns
func (c *ModelRegistryServiceAPIController) GetExperimentRuns(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetExperimentRuns(r.Context(), filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateExperimentRun - Create an ExperimentRun
func (c *ModelRegistryServiceAPIController) CreateExperimentRun(w http.ResponseWriter, r *http.Request) {
	experimentRunCreateParam := *model.NewExperimentRunCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&experimentRunCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExperimentRunCreateRequired(experimentRunCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExperimentRunCreateConstraints(experimentRunCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateExperimentRun(r.Context(), experimentRunCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperimentRunsMetricHistory - Get metric history for multiple ExperimentRuns
func (c *ModelRegistryServiceAPIController) GetExperimentRunsMetricHistory(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var stepIdsParam string
	if query.Has("stepIds") {
		param := query.Get("stepIds")

		stepIdsParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetExperimentRunsMetricHistory(r.Context(), filterQueryParam, nameParam, stepIdsParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperimentRun - Get an ExperimentRun
func (c *ModelRegistryServiceAPIController) GetExperimentRun(w http.ResponseWriter, r *http.Request) {
	experimentrunIdParam := chi.URLParam(r, "experimentrunId")
	if experimentrunIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentrunId"}, nil)
		return
	}
	result, err := c.service.GetExperimentRun(r.Context(), experimentrunIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateExperimentRun - Update an ExperimentRun
func (c *ModelRegistryServiceAPIController) UpdateExperimentRun(w http.ResponseWriter, r *http.Request) {
	experimentrunIdParam := chi.URLParam(r, "experimentrunId")
	if experimentrunIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentrunId"}, nil)
		return
	}
	experimentRunUpdateParam := *model.NewExperimentRunUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&experimentRunUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExperimentRunUpdateRequired(experimentRunUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExperimentRunUpdateConstraints(experimentRunUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateExperimentRun(r.Context(), experimentrunIdParam, experimentRunUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperimentRunArtifacts - List all artifacts associated with the `ExperimentRun`
func (c *ModelRegistryServiceAPIController) GetExperimentRunArtifacts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	experimentrunIdParam := chi.URLParam(r, "experimentrunId")
	if experimentrunIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentrunId"}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var artifactTypeParam model.ArtifactTypeQueryParam
	if query.Has("artifactType") {
		param := model.ArtifactTypeQueryParam(query.Get("artifactType"))

		artifactTypeParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetExperimentRunArtifacts(r.Context(), experimentrunIdParam, filterQueryParam, nameParam, externalIdParam, model.ArtifactTypeQueryParam(artifactTypeParam), pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpsertExperimentRunArtifact - Upsert an Artifact in an ExperimentRun
func (c *ModelRegistryServiceAPIController) UpsertExperimentRunArtifact(w http.ResponseWriter, r *http.Request) {
	experimentrunIdParam := chi.URLParam(r, "experimentrunId")
	if experimentrunIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentrunId"}, nil)
		return
	}
	artifactParam := *model.NewArtifactWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&artifactParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArtifactRequired(artifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArtifactConstraints(artifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpsertExperimentRunArtifact(r.Context(), experimentrunIdParam, artifactParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperimentRunMetricHistory - Get metric history for an ExperimentRun
func (c *ModelRegistryServiceAPIController) GetExperimentRunMetricHistory(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	experimentrunIdParam := chi.URLParam(r, "experimentrunId")
	if experimentrunIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentrunId"}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var stepIdsParam string
	if query.Has("stepIds") {
		param := query.Get("stepIds")

		stepIdsParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetExperimentRunMetricHistory(r.Context(), experimentrunIdParam, filterQueryParam, nameParam, stepIdsParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperiments - List All Experiments
func (c *ModelRegistryServiceAPIController) GetExperiments(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetExperiments(r.Context(), filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateExperiment - Create an Experiment
func (c *ModelRegistryServiceAPIController) CreateExperiment(w http.ResponseWriter, r *http.Request) {
	experimentCreateParam := *model.NewExperimentCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&experimentCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExperimentCreateRequired(experimentCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExperimentCreateConstraints(experimentCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateExperiment(r.Context(), experimentCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperiment - Get an Experiment
func (c *ModelRegistryServiceAPIController) GetExperiment(w http.ResponseWriter, r *http.Request) {
	experimentIdParam := chi.URLParam(r, "experimentId")
	if experimentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentId"}, nil)
		return
	}
	result, err := c.service.GetExperiment(r.Context(), experimentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateExperiment - Update an Experiment
func (c *ModelRegistryServiceAPIController) UpdateExperiment(w http.ResponseWriter, r *http.Request) {
	experimentIdParam := chi.URLParam(r, "experimentId")
	if experimentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentId"}, nil)
		return
	}
	experimentUpdateParam := *model.NewExperimentUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&experimentUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExperimentUpdateRequired(experimentUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExperimentUpdateConstraints(experimentUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateExperiment(r.Context(), experimentIdParam, experimentUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExperimentExperimentRuns - List All Experiment's ExperimentRuns
func (c *ModelRegistryServiceAPIController) GetExperimentExperimentRuns(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	experimentIdParam := chi.URLParam(r, "experimentId")
	if experimentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentId"}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetExperimentExperimentRuns(r.Context(), experimentIdParam, nameParam, externalIdParam, filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateExperimentExperimentRun - Create an ExperimentRun in Experiment
func (c *ModelRegistryServiceAPIController) CreateExperimentExperimentRun(w http.ResponseWriter, r *http.Request) {
	experimentIdParam := chi.URLParam(r, "experimentId")
	if experimentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"experimentId"}, nil)
		return
	}
	experimentRunParam := *model.NewExperimentRunWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&experimentRunParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExperimentRunRequired(experimentRunParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertExperimentRunConstraints(experimentRunParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateExperimentExperimentRun(r.Context(), experimentIdParam, experimentRunParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindInferenceService - Get an InferenceServices that matches search parameters.
func (c *ModelRegistryServiceAPIController) FindInferenceService(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var parentResourceIdParam string
	if query.Has("parentResourceId") {
		param := query.Get("parentResourceId")

		parentResourceIdParam = param
	} else {
	}
	result, err := c.service.FindInferenceService(r.Context(), nameParam, externalIdParam, parentResourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInferenceServices - List All InferenceServices
func (c *ModelRegistryServiceAPIController) GetInferenceServices(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetInferenceServices(r.Context(), filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateInferenceService - Create a InferenceService
func (c *ModelRegistryServiceAPIController) CreateInferenceService(w http.ResponseWriter, r *http.Request) {
	inferenceServiceCreateParam := *model.NewInferenceServiceCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&inferenceServiceCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInferenceServiceCreateRequired(inferenceServiceCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInferenceServiceCreateConstraints(inferenceServiceCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateInferenceService(r.Context(), inferenceServiceCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInferenceService - Get a InferenceService
func (c *ModelRegistryServiceAPIController) GetInferenceService(w http.ResponseWriter, r *http.Request) {
	inferenceserviceIdParam := chi.URLParam(r, "inferenceserviceId")
	if inferenceserviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"inferenceserviceId"}, nil)
		return
	}
	result, err := c.service.GetInferenceService(r.Context(), inferenceserviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateInferenceService - Update a InferenceService
func (c *ModelRegistryServiceAPIController) UpdateInferenceService(w http.ResponseWriter, r *http.Request) {
	inferenceserviceIdParam := chi.URLParam(r, "inferenceserviceId")
	if inferenceserviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"inferenceserviceId"}, nil)
		return
	}
	inferenceServiceUpdateParam := *model.NewInferenceServiceUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&inferenceServiceUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInferenceServiceUpdateRequired(inferenceServiceUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInferenceServiceUpdateConstraints(inferenceServiceUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateInferenceService(r.Context(), inferenceserviceIdParam, inferenceServiceUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInferenceServiceModel - Get InferenceService's RegisteredModel
func (c *ModelRegistryServiceAPIController) GetInferenceServiceModel(w http.ResponseWriter, r *http.Request) {
	inferenceserviceIdParam := chi.URLParam(r, "inferenceserviceId")
	if inferenceserviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"inferenceserviceId"}, nil)
		return
	}
	result, err := c.service.GetInferenceServiceModel(r.Context(), inferenceserviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInferenceServiceServes - List All InferenceService's ServeModel actions
func (c *ModelRegistryServiceAPIController) GetInferenceServiceServes(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inferenceserviceIdParam := chi.URLParam(r, "inferenceserviceId")
	if inferenceserviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"inferenceserviceId"}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetInferenceServiceServes(r.Context(), inferenceserviceIdParam, filterQueryParam, nameParam, externalIdParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateInferenceServiceServe - Create a ServeModel action in a InferenceService
func (c *ModelRegistryServiceAPIController) CreateInferenceServiceServe(w http.ResponseWriter, r *http.Request) {
	inferenceserviceIdParam := chi.URLParam(r, "inferenceserviceId")
	if inferenceserviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"inferenceserviceId"}, nil)
		return
	}
	serveModelCreateParam := *model.NewServeModelCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serveModelCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServeModelCreateRequired(serveModelCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServeModelCreateConstraints(serveModelCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateInferenceServiceServe(r.Context(), inferenceserviceIdParam, serveModelCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInferenceServiceVersion - Get InferenceService's ModelVersion
func (c *ModelRegistryServiceAPIController) GetInferenceServiceVersion(w http.ResponseWriter, r *http.Request) {
	inferenceserviceIdParam := chi.URLParam(r, "inferenceserviceId")
	if inferenceserviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"inferenceserviceId"}, nil)
		return
	}
	result, err := c.service.GetInferenceServiceVersion(r.Context(), inferenceserviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindModelArtifact - Get a ModelArtifact that matches search parameters.
func (c *ModelRegistryServiceAPIController) FindModelArtifact(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var parentResourceIdParam string
	if query.Has("parentResourceId") {
		param := query.Get("parentResourceId")

		parentResourceIdParam = param
	} else {
	}
	result, err := c.service.FindModelArtifact(r.Context(), nameParam, externalIdParam, parentResourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModelArtifacts - List All ModelArtifacts
func (c *ModelRegistryServiceAPIController) GetModelArtifacts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetModelArtifacts(r.Context(), filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateModelArtifact - Create a ModelArtifact
func (c *ModelRegistryServiceAPIController) CreateModelArtifact(w http.ResponseWriter, r *http.Request) {
	modelArtifactCreateParam := *model.NewModelArtifactCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modelArtifactCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModelArtifactCreateRequired(modelArtifactCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModelArtifactCreateConstraints(modelArtifactCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateModelArtifact(r.Context(), modelArtifactCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModelArtifact - Get a ModelArtifact
func (c *ModelRegistryServiceAPIController) GetModelArtifact(w http.ResponseWriter, r *http.Request) {
	modelartifactIdParam := chi.URLParam(r, "modelartifactId")
	if modelartifactIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"modelartifactId"}, nil)
		return
	}
	result, err := c.service.GetModelArtifact(r.Context(), modelartifactIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateModelArtifact - Update a ModelArtifact
func (c *ModelRegistryServiceAPIController) UpdateModelArtifact(w http.ResponseWriter, r *http.Request) {
	modelartifactIdParam := chi.URLParam(r, "modelartifactId")
	if modelartifactIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"modelartifactId"}, nil)
		return
	}
	modelArtifactUpdateParam := *model.NewModelArtifactUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modelArtifactUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModelArtifactUpdateRequired(modelArtifactUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModelArtifactUpdateConstraints(modelArtifactUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateModelArtifact(r.Context(), modelartifactIdParam, modelArtifactUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindModelVersion - Get a ModelVersion that matches search parameters.
func (c *ModelRegistryServiceAPIController) FindModelVersion(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var parentResourceIdParam string
	if query.Has("parentResourceId") {
		param := query.Get("parentResourceId")

		parentResourceIdParam = param
	} else {
	}
	result, err := c.service.FindModelVersion(r.Context(), nameParam, externalIdParam, parentResourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModelVersions - List All ModelVersions
func (c *ModelRegistryServiceAPIController) GetModelVersions(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetModelVersions(r.Context(), filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateModelVersion - Create a ModelVersion
func (c *ModelRegistryServiceAPIController) CreateModelVersion(w http.ResponseWriter, r *http.Request) {
	modelVersionCreateParam := *model.NewModelVersionCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modelVersionCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModelVersionCreateRequired(modelVersionCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModelVersionCreateConstraints(modelVersionCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateModelVersion(r.Context(), modelVersionCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModelVersion - Get a ModelVersion
func (c *ModelRegistryServiceAPIController) GetModelVersion(w http.ResponseWriter, r *http.Request) {
	modelversionIdParam := chi.URLParam(r, "modelversionId")
	if modelversionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"modelversionId"}, nil)
		return
	}
	result, err := c.service.GetModelVersion(r.Context(), modelversionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateModelVersion - Update a ModelVersion
func (c *ModelRegistryServiceAPIController) UpdateModelVersion(w http.ResponseWriter, r *http.Request) {
	modelversionIdParam := chi.URLParam(r, "modelversionId")
	if modelversionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"modelversionId"}, nil)
		return
	}
	modelVersionUpdateParam := *model.NewModelVersionUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modelVersionUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModelVersionUpdateRequired(modelVersionUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModelVersionUpdateConstraints(modelVersionUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateModelVersion(r.Context(), modelversionIdParam, modelVersionUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModelVersionArtifacts - List all artifacts associated with the `ModelVersion`
func (c *ModelRegistryServiceAPIController) GetModelVersionArtifacts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	modelversionIdParam := chi.URLParam(r, "modelversionId")
	if modelversionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"modelversionId"}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var artifactTypeParam model.ArtifactTypeQueryParam
	if query.Has("artifactType") {
		param := model.ArtifactTypeQueryParam(query.Get("artifactType"))

		artifactTypeParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetModelVersionArtifacts(r.Context(), modelversionIdParam, filterQueryParam, nameParam, externalIdParam, model.ArtifactTypeQueryParam(artifactTypeParam), pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpsertModelVersionArtifact - Upsert an Artifact in a ModelVersion
func (c *ModelRegistryServiceAPIController) UpsertModelVersionArtifact(w http.ResponseWriter, r *http.Request) {
	modelversionIdParam := chi.URLParam(r, "modelversionId")
	if modelversionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"modelversionId"}, nil)
		return
	}
	artifactParam := *model.NewArtifactWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&artifactParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArtifactRequired(artifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArtifactConstraints(artifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpsertModelVersionArtifact(r.Context(), modelversionIdParam, artifactParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindRegisteredModel - Get a RegisteredModel that matches search parameters.
func (c *ModelRegistryServiceAPIController) FindRegisteredModel(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	result, err := c.service.FindRegisteredModel(r.Context(), nameParam, externalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRegisteredModels - List All RegisteredModels
func (c *ModelRegistryServiceAPIController) GetRegisteredModels(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetRegisteredModels(r.Context(), filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateRegisteredModel - Create a RegisteredModel
func (c *ModelRegistryServiceAPIController) CreateRegisteredModel(w http.ResponseWriter, r *http.Request) {
	registeredModelCreateParam := *model.NewRegisteredModelCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&registeredModelCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegisteredModelCreateRequired(registeredModelCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegisteredModelCreateConstraints(registeredModelCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRegisteredModel(r.Context(), registeredModelCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRegisteredModel - Get a RegisteredModel
func (c *ModelRegistryServiceAPIController) GetRegisteredModel(w http.ResponseWriter, r *http.Request) {
	registeredmodelIdParam := chi.URLParam(r, "registeredmodelId")
	if registeredmodelIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registeredmodelId"}, nil)
		return
	}
	result, err := c.service.GetRegisteredModel(r.Context(), registeredmodelIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateRegisteredModel - Update a RegisteredModel
func (c *ModelRegistryServiceAPIController) UpdateRegisteredModel(w http.ResponseWriter, r *http.Request) {
	registeredmodelIdParam := chi.URLParam(r, "registeredmodelId")
	if registeredmodelIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registeredmodelId"}, nil)
		return
	}
	registeredModelUpdateParam := *model.NewRegisteredModelUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&registeredModelUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegisteredModelUpdateRequired(registeredModelUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegisteredModelUpdateConstraints(registeredModelUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateRegisteredModel(r.Context(), registeredmodelIdParam, registeredModelUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRegisteredModelVersions - List All RegisteredModel's ModelVersions
func (c *ModelRegistryServiceAPIController) GetRegisteredModelVersions(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	registeredmodelIdParam := chi.URLParam(r, "registeredmodelId")
	if registeredmodelIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registeredmodelId"}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetRegisteredModelVersions(r.Context(), registeredmodelIdParam, nameParam, externalIdParam, filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateRegisteredModelVersion - Create a ModelVersion in RegisteredModel
func (c *ModelRegistryServiceAPIController) CreateRegisteredModelVersion(w http.ResponseWriter, r *http.Request) {
	registeredmodelIdParam := chi.URLParam(r, "registeredmodelId")
	if registeredmodelIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registeredmodelId"}, nil)
		return
	}
	modelVersionParam := *model.NewModelVersionWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&modelVersionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModelVersionRequired(modelVersionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModelVersionConstraints(modelVersionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRegisteredModelVersion(r.Context(), registeredmodelIdParam, modelVersionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindServingEnvironment - Find ServingEnvironment
func (c *ModelRegistryServiceAPIController) FindServingEnvironment(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	result, err := c.service.FindServingEnvironment(r.Context(), nameParam, externalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetServingEnvironments - List All ServingEnvironments
func (c *ModelRegistryServiceAPIController) GetServingEnvironments(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetServingEnvironments(r.Context(), filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateServingEnvironment - Create a ServingEnvironment
func (c *ModelRegistryServiceAPIController) CreateServingEnvironment(w http.ResponseWriter, r *http.Request) {
	servingEnvironmentCreateParam := *model.NewServingEnvironmentCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&servingEnvironmentCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServingEnvironmentCreateRequired(servingEnvironmentCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServingEnvironmentCreateConstraints(servingEnvironmentCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateServingEnvironment(r.Context(), servingEnvironmentCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetServingEnvironment - Get a ServingEnvironment
func (c *ModelRegistryServiceAPIController) GetServingEnvironment(w http.ResponseWriter, r *http.Request) {
	servingenvironmentIdParam := chi.URLParam(r, "servingenvironmentId")
	if servingenvironmentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"servingenvironmentId"}, nil)
		return
	}
	result, err := c.service.GetServingEnvironment(r.Context(), servingenvironmentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateServingEnvironment - Update a ServingEnvironment
func (c *ModelRegistryServiceAPIController) UpdateServingEnvironment(w http.ResponseWriter, r *http.Request) {
	servingenvironmentIdParam := chi.URLParam(r, "servingenvironmentId")
	if servingenvironmentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"servingenvironmentId"}, nil)
		return
	}
	servingEnvironmentUpdateParam := *model.NewServingEnvironmentUpdateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&servingEnvironmentUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServingEnvironmentUpdateRequired(servingEnvironmentUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServingEnvironmentUpdateConstraints(servingEnvironmentUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateServingEnvironment(r.Context(), servingenvironmentIdParam, servingEnvironmentUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetEnvironmentInferenceServices - List All ServingEnvironment's InferenceServices
func (c *ModelRegistryServiceAPIController) GetEnvironmentInferenceServices(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	servingenvironmentIdParam := chi.URLParam(r, "servingenvironmentId")
	if servingenvironmentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"servingenvironmentId"}, nil)
		return
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var externalIdParam string
	if query.Has("externalId") {
		param := query.Get("externalId")

		externalIdParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetEnvironmentInferenceServices(r.Context(), servingenvironmentIdParam, filterQueryParam, nameParam, externalIdParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateEnvironmentInferenceService - Create a InferenceService in ServingEnvironment
func (c *ModelRegistryServiceAPIController) CreateEnvironmentInferenceService(w http.ResponseWriter, r *http.Request) {
	servingenvironmentIdParam := chi.URLParam(r, "servingenvironmentId")
	if servingenvironmentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"servingenvironmentId"}, nil)
		return
	}
	inferenceServiceCreateParam := *model.NewInferenceServiceCreateWithDefaults()
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&inferenceServiceCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInferenceServiceCreateRequired(inferenceServiceCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInferenceServiceCreateConstraints(inferenceServiceCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateEnvironmentInferenceService(r.Context(), servingenvironmentIdParam, inferenceServiceCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
