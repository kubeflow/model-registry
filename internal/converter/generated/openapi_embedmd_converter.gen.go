// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package generated

import (
	"fmt"
	converter "github.com/kubeflow/model-registry/internal/converter"
	models "github.com/kubeflow/model-registry/internal/db/models"
	openapi "github.com/kubeflow/model-registry/pkg/openapi"
)

type OpenAPIToEmbedMDConverterImpl struct{}

func (c *OpenAPIToEmbedMDConverterImpl) ConvertDocArtifact(source *converter.OpenAPIModelWrapper[openapi.DocArtifact]) (*models.DocArtifactImpl, error) {
	var pModelsDocArtifactImpl *models.DocArtifactImpl
	if source != nil {
		var modelsDocArtifactImpl models.DocArtifactImpl
		var pString *string
		if (*source).Model != nil {
			pString = (*source).Model.Id
		}
		if pString != nil {
			xint32, err := converter.StringToInt32(*pString)
			if err != nil {
				return nil, fmt.Errorf("error setting field ID: %w", err)
			}
			modelsDocArtifactImpl.ID = &xint32
		}
		pInt32, err := converter.MapDocArtifactTypeIDEmbedMD(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field TypeID: %w", err)
		}
		modelsDocArtifactImpl.TypeID = pInt32
		pModelsDocArtifactAttributes, err := converter.MapDocArtifactAttributesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Attributes: %w", err)
		}
		modelsDocArtifactImpl.Attributes = pModelsDocArtifactAttributes
		pModelsPropertiesList, err := converter.MapDocArtifactPropertiesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		modelsDocArtifactImpl.Properties = pModelsPropertiesList
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).Model != nil {
			pMapStringOpenapiMetadataValue = (*source).Model.CustomProperties
		}
		pModelsPropertiesList2, err := converter.MapOpenAPICustomPropertiesEmbedMD(pMapStringOpenapiMetadataValue)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		modelsDocArtifactImpl.CustomProperties = pModelsPropertiesList2
		pModelsDocArtifactImpl = &modelsDocArtifactImpl
	}
	return pModelsDocArtifactImpl, nil
}
func (c *OpenAPIToEmbedMDConverterImpl) ConvertInferenceService(source *converter.OpenAPIModelWrapper[openapi.InferenceService]) (*models.InferenceServiceImpl, error) {
	var pModelsInferenceServiceImpl *models.InferenceServiceImpl
	if source != nil {
		var modelsInferenceServiceImpl models.InferenceServiceImpl
		var pString *string
		if (*source).Model != nil {
			pString = (*source).Model.Id
		}
		if pString != nil {
			xint32, err := converter.StringToInt32(*pString)
			if err != nil {
				return nil, fmt.Errorf("error setting field ID: %w", err)
			}
			modelsInferenceServiceImpl.ID = &xint32
		}
		pInt32, err := converter.MapInferenceServiceTypeIDEmbedMD(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field TypeID: %w", err)
		}
		modelsInferenceServiceImpl.TypeID = pInt32
		pModelsInferenceServiceAttributes, err := converter.MapInferenceServiceAttributesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Attributes: %w", err)
		}
		modelsInferenceServiceImpl.Attributes = pModelsInferenceServiceAttributes
		pModelsPropertiesList, err := converter.MapInferenceServicePropertiesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		modelsInferenceServiceImpl.Properties = pModelsPropertiesList
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).Model != nil {
			pMapStringOpenapiMetadataValue = (*source).Model.CustomProperties
		}
		pModelsPropertiesList2, err := converter.MapOpenAPICustomPropertiesEmbedMD(pMapStringOpenapiMetadataValue)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		modelsInferenceServiceImpl.CustomProperties = pModelsPropertiesList2
		pModelsInferenceServiceImpl = &modelsInferenceServiceImpl
	}
	return pModelsInferenceServiceImpl, nil
}
func (c *OpenAPIToEmbedMDConverterImpl) ConvertModelArtifact(source *converter.OpenAPIModelWrapper[openapi.ModelArtifact]) (*models.ModelArtifactImpl, error) {
	var pModelsModelArtifactImpl *models.ModelArtifactImpl
	if source != nil {
		var modelsModelArtifactImpl models.ModelArtifactImpl
		var pString *string
		if (*source).Model != nil {
			pString = (*source).Model.Id
		}
		if pString != nil {
			xint32, err := converter.StringToInt32(*pString)
			if err != nil {
				return nil, fmt.Errorf("error setting field ID: %w", err)
			}
			modelsModelArtifactImpl.ID = &xint32
		}
		pInt32, err := converter.MapModelArtifactTypeIDEmbedMD(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field TypeID: %w", err)
		}
		modelsModelArtifactImpl.TypeID = pInt32
		pModelsModelArtifactAttributes, err := converter.MapModelArtifactAttributesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Attributes: %w", err)
		}
		modelsModelArtifactImpl.Attributes = pModelsModelArtifactAttributes
		pModelsPropertiesList, err := converter.MapModelArtifactPropertiesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		modelsModelArtifactImpl.Properties = pModelsPropertiesList
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).Model != nil {
			pMapStringOpenapiMetadataValue = (*source).Model.CustomProperties
		}
		pModelsPropertiesList2, err := converter.MapOpenAPICustomPropertiesEmbedMD(pMapStringOpenapiMetadataValue)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		modelsModelArtifactImpl.CustomProperties = pModelsPropertiesList2
		pModelsModelArtifactImpl = &modelsModelArtifactImpl
	}
	return pModelsModelArtifactImpl, nil
}
func (c *OpenAPIToEmbedMDConverterImpl) ConvertModelVersion(source *converter.OpenAPIModelWrapper[openapi.ModelVersion]) (*models.ModelVersionImpl, error) {
	var pModelsModelVersionImpl *models.ModelVersionImpl
	if source != nil {
		var modelsModelVersionImpl models.ModelVersionImpl
		var pString *string
		if (*source).Model != nil {
			pString = (*source).Model.Id
		}
		if pString != nil {
			xint32, err := converter.StringToInt32(*pString)
			if err != nil {
				return nil, fmt.Errorf("error setting field ID: %w", err)
			}
			modelsModelVersionImpl.ID = &xint32
		}
		pInt32, err := converter.MapModelVersionTypeIDEmbedMD(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field TypeID: %w", err)
		}
		modelsModelVersionImpl.TypeID = pInt32
		pModelsModelVersionAttributes, err := converter.MapModelVersionAttributesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Attributes: %w", err)
		}
		modelsModelVersionImpl.Attributes = pModelsModelVersionAttributes
		pModelsPropertiesList, err := converter.MapModelVersionPropertiesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		modelsModelVersionImpl.Properties = pModelsPropertiesList
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).Model != nil {
			pMapStringOpenapiMetadataValue = (*source).Model.CustomProperties
		}
		pModelsPropertiesList2, err := converter.MapOpenAPICustomPropertiesEmbedMD(pMapStringOpenapiMetadataValue)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		modelsModelVersionImpl.CustomProperties = pModelsPropertiesList2
		pModelsModelVersionImpl = &modelsModelVersionImpl
	}
	return pModelsModelVersionImpl, nil
}
func (c *OpenAPIToEmbedMDConverterImpl) ConvertRegisteredModel(source *converter.OpenAPIModelWrapper[openapi.RegisteredModel]) (*models.RegisteredModelImpl, error) {
	var pModelsRegisteredModelImpl *models.RegisteredModelImpl
	if source != nil {
		var modelsRegisteredModelImpl models.RegisteredModelImpl
		var pString *string
		if (*source).Model != nil {
			pString = (*source).Model.Id
		}
		if pString != nil {
			xint32, err := converter.StringToInt32(*pString)
			if err != nil {
				return nil, fmt.Errorf("error setting field ID: %w", err)
			}
			modelsRegisteredModelImpl.ID = &xint32
		}
		pInt32, err := converter.MapRegisteredModelTypeIDEmbedMD(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field TypeID: %w", err)
		}
		modelsRegisteredModelImpl.TypeID = pInt32
		pModelsRegisteredModelAttributes, err := converter.MapRegisteredModelAttributesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Attributes: %w", err)
		}
		modelsRegisteredModelImpl.Attributes = pModelsRegisteredModelAttributes
		pModelsPropertiesList, err := converter.MapRegisteredModelPropertiesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		modelsRegisteredModelImpl.Properties = pModelsPropertiesList
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).Model != nil {
			pMapStringOpenapiMetadataValue = (*source).Model.CustomProperties
		}
		pModelsPropertiesList2, err := converter.MapOpenAPICustomPropertiesEmbedMD(pMapStringOpenapiMetadataValue)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		modelsRegisteredModelImpl.CustomProperties = pModelsPropertiesList2
		pModelsRegisteredModelImpl = &modelsRegisteredModelImpl
	}
	return pModelsRegisteredModelImpl, nil
}
func (c *OpenAPIToEmbedMDConverterImpl) ConvertServeModel(source *converter.OpenAPIModelWrapper[openapi.ServeModel]) (*models.ServeModelImpl, error) {
	var pModelsServeModelImpl *models.ServeModelImpl
	if source != nil {
		var modelsServeModelImpl models.ServeModelImpl
		var pString *string
		if (*source).Model != nil {
			pString = (*source).Model.Id
		}
		if pString != nil {
			xint32, err := converter.StringToInt32(*pString)
			if err != nil {
				return nil, fmt.Errorf("error setting field ID: %w", err)
			}
			modelsServeModelImpl.ID = &xint32
		}
		pInt32, err := converter.MapServeModelTypeIDEmbedMD(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field TypeID: %w", err)
		}
		modelsServeModelImpl.TypeID = pInt32
		pModelsServeModelAttributes, err := converter.MapServeModelAttributesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Attributes: %w", err)
		}
		modelsServeModelImpl.Attributes = pModelsServeModelAttributes
		pModelsPropertiesList, err := converter.MapServeModelPropertiesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		modelsServeModelImpl.Properties = pModelsPropertiesList
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).Model != nil {
			pMapStringOpenapiMetadataValue = (*source).Model.CustomProperties
		}
		pModelsPropertiesList2, err := converter.MapOpenAPICustomPropertiesEmbedMD(pMapStringOpenapiMetadataValue)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		modelsServeModelImpl.CustomProperties = pModelsPropertiesList2
		pModelsServeModelImpl = &modelsServeModelImpl
	}
	return pModelsServeModelImpl, nil
}
func (c *OpenAPIToEmbedMDConverterImpl) ConvertServingEnvironment(source *converter.OpenAPIModelWrapper[openapi.ServingEnvironment]) (*models.ServingEnvironmentImpl, error) {
	var pModelsServingEnvironmentImpl *models.ServingEnvironmentImpl
	if source != nil {
		var modelsServingEnvironmentImpl models.ServingEnvironmentImpl
		var pString *string
		if (*source).Model != nil {
			pString = (*source).Model.Id
		}
		if pString != nil {
			xint32, err := converter.StringToInt32(*pString)
			if err != nil {
				return nil, fmt.Errorf("error setting field ID: %w", err)
			}
			modelsServingEnvironmentImpl.ID = &xint32
		}
		pInt32, err := converter.MapServingEnvironmentTypeIDEmbedMD(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field TypeID: %w", err)
		}
		modelsServingEnvironmentImpl.TypeID = pInt32
		pModelsServingEnvironmentAttributes, err := converter.MapServingEnvironmentAttributesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Attributes: %w", err)
		}
		modelsServingEnvironmentImpl.Attributes = pModelsServingEnvironmentAttributes
		pModelsPropertiesList, err := converter.MapServingEnvironmentPropertiesEmbedMD((*source).Model)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		modelsServingEnvironmentImpl.Properties = pModelsPropertiesList
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).Model != nil {
			pMapStringOpenapiMetadataValue = (*source).Model.CustomProperties
		}
		pModelsPropertiesList2, err := converter.MapOpenAPICustomPropertiesEmbedMD(pMapStringOpenapiMetadataValue)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		modelsServingEnvironmentImpl.CustomProperties = pModelsPropertiesList2
		pModelsServingEnvironmentImpl = &modelsServingEnvironmentImpl
	}
	return pModelsServingEnvironmentImpl, nil
}
