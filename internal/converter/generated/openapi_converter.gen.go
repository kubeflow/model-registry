// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package generated

import (
	"fmt"
	converter "github.com/kubeflow/model-registry/internal/converter"
	openapi "github.com/kubeflow/model-registry/pkg/openapi"
)

type OpenAPIConverterImpl struct{}

func (c *OpenAPIConverterImpl) ConvertInferenceServiceCreate(source *openapi.InferenceServiceCreate) (*openapi.InferenceService, error) {
	var pOpenapiInferenceService *openapi.InferenceService
	if source != nil {
		var openapiInferenceService openapi.InferenceService
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiInferenceService.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiInferenceService.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiInferenceService.ExternalId = &xstring2
		}
		if (*source).Name != nil {
			xstring3 := *(*source).Name
			openapiInferenceService.Name = &xstring3
		}
		if (*source).ModelVersionId != nil {
			xstring4 := *(*source).ModelVersionId
			openapiInferenceService.ModelVersionId = &xstring4
		}
		if (*source).Runtime != nil {
			xstring5 := *(*source).Runtime
			openapiInferenceService.Runtime = &xstring5
		}
		if (*source).DesiredState != nil {
			openapiInferenceServiceState, err := c.openapiInferenceServiceStateToOpenapiInferenceServiceState(*(*source).DesiredState)
			if err != nil {
				return nil, fmt.Errorf("error setting field DesiredState: %w", err)
			}
			openapiInferenceService.DesiredState = &openapiInferenceServiceState
		}
		openapiInferenceService.RegisteredModelId = (*source).RegisteredModelId
		openapiInferenceService.ServingEnvironmentId = (*source).ServingEnvironmentId
		pOpenapiInferenceService = &openapiInferenceService
	}
	return pOpenapiInferenceService, nil
}
func (c *OpenAPIConverterImpl) ConvertInferenceServiceUpdate(source *openapi.InferenceServiceUpdate) (*openapi.InferenceService, error) {
	var pOpenapiInferenceService *openapi.InferenceService
	if source != nil {
		var openapiInferenceService openapi.InferenceService
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiInferenceService.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiInferenceService.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiInferenceService.ExternalId = &xstring2
		}
		if (*source).ModelVersionId != nil {
			xstring3 := *(*source).ModelVersionId
			openapiInferenceService.ModelVersionId = &xstring3
		}
		if (*source).Runtime != nil {
			xstring4 := *(*source).Runtime
			openapiInferenceService.Runtime = &xstring4
		}
		if (*source).DesiredState != nil {
			openapiInferenceServiceState, err := c.openapiInferenceServiceStateToOpenapiInferenceServiceState(*(*source).DesiredState)
			if err != nil {
				return nil, fmt.Errorf("error setting field DesiredState: %w", err)
			}
			openapiInferenceService.DesiredState = &openapiInferenceServiceState
		}
		pOpenapiInferenceService = &openapiInferenceService
	}
	return pOpenapiInferenceService, nil
}
func (c *OpenAPIConverterImpl) ConvertModelArtifactCreate(source *openapi.ModelArtifactCreate) (*openapi.ModelArtifact, error) {
	var pOpenapiModelArtifact *openapi.ModelArtifact
	if source != nil {
		var openapiModelArtifact openapi.ModelArtifact
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiModelArtifact.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiModelArtifact.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiModelArtifact.ExternalId = &xstring2
		}
		if (*source).Uri != nil {
			xstring3 := *(*source).Uri
			openapiModelArtifact.Uri = &xstring3
		}
		if (*source).State != nil {
			openapiArtifactState, err := c.openapiArtifactStateToOpenapiArtifactState(*(*source).State)
			if err != nil {
				return nil, fmt.Errorf("error setting field State: %w", err)
			}
			openapiModelArtifact.State = &openapiArtifactState
		}
		if (*source).Name != nil {
			xstring4 := *(*source).Name
			openapiModelArtifact.Name = &xstring4
		}
		if (*source).ModelFormatName != nil {
			xstring5 := *(*source).ModelFormatName
			openapiModelArtifact.ModelFormatName = &xstring5
		}
		if (*source).StorageKey != nil {
			xstring6 := *(*source).StorageKey
			openapiModelArtifact.StorageKey = &xstring6
		}
		if (*source).StoragePath != nil {
			xstring7 := *(*source).StoragePath
			openapiModelArtifact.StoragePath = &xstring7
		}
		if (*source).ModelFormatVersion != nil {
			xstring8 := *(*source).ModelFormatVersion
			openapiModelArtifact.ModelFormatVersion = &xstring8
		}
		if (*source).ServiceAccountName != nil {
			xstring9 := *(*source).ServiceAccountName
			openapiModelArtifact.ServiceAccountName = &xstring9
		}
		pOpenapiModelArtifact = &openapiModelArtifact
	}
	return pOpenapiModelArtifact, nil
}
func (c *OpenAPIConverterImpl) ConvertModelArtifactUpdate(source *openapi.ModelArtifactUpdate) (*openapi.ModelArtifact, error) {
	var pOpenapiModelArtifact *openapi.ModelArtifact
	if source != nil {
		var openapiModelArtifact openapi.ModelArtifact
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiModelArtifact.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiModelArtifact.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiModelArtifact.ExternalId = &xstring2
		}
		if (*source).Uri != nil {
			xstring3 := *(*source).Uri
			openapiModelArtifact.Uri = &xstring3
		}
		if (*source).State != nil {
			openapiArtifactState, err := c.openapiArtifactStateToOpenapiArtifactState(*(*source).State)
			if err != nil {
				return nil, fmt.Errorf("error setting field State: %w", err)
			}
			openapiModelArtifact.State = &openapiArtifactState
		}
		if (*source).ModelFormatName != nil {
			xstring4 := *(*source).ModelFormatName
			openapiModelArtifact.ModelFormatName = &xstring4
		}
		if (*source).StorageKey != nil {
			xstring5 := *(*source).StorageKey
			openapiModelArtifact.StorageKey = &xstring5
		}
		if (*source).StoragePath != nil {
			xstring6 := *(*source).StoragePath
			openapiModelArtifact.StoragePath = &xstring6
		}
		if (*source).ModelFormatVersion != nil {
			xstring7 := *(*source).ModelFormatVersion
			openapiModelArtifact.ModelFormatVersion = &xstring7
		}
		if (*source).ServiceAccountName != nil {
			xstring8 := *(*source).ServiceAccountName
			openapiModelArtifact.ServiceAccountName = &xstring8
		}
		pOpenapiModelArtifact = &openapiModelArtifact
	}
	return pOpenapiModelArtifact, nil
}
func (c *OpenAPIConverterImpl) ConvertModelVersionCreate(source *openapi.ModelVersionCreate) (*openapi.ModelVersion, error) {
	var pOpenapiModelVersion *openapi.ModelVersion
	if source != nil {
		var openapiModelVersion openapi.ModelVersion
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiModelVersion.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiModelVersion.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiModelVersion.ExternalId = &xstring2
		}
		openapiModelVersion.Name = (*source).Name
		if (*source).State != nil {
			openapiModelVersionState, err := c.openapiModelVersionStateToOpenapiModelVersionState(*(*source).State)
			if err != nil {
				return nil, fmt.Errorf("error setting field State: %w", err)
			}
			openapiModelVersion.State = &openapiModelVersionState
		}
		if (*source).Author != nil {
			xstring3 := *(*source).Author
			openapiModelVersion.Author = &xstring3
		}
		openapiModelVersion.RegisteredModelId = (*source).RegisteredModelId
		pOpenapiModelVersion = &openapiModelVersion
	}
	return pOpenapiModelVersion, nil
}
func (c *OpenAPIConverterImpl) ConvertModelVersionUpdate(source *openapi.ModelVersionUpdate) (*openapi.ModelVersion, error) {
	var pOpenapiModelVersion *openapi.ModelVersion
	if source != nil {
		var openapiModelVersion openapi.ModelVersion
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiModelVersion.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiModelVersion.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiModelVersion.ExternalId = &xstring2
		}
		if (*source).State != nil {
			openapiModelVersionState, err := c.openapiModelVersionStateToOpenapiModelVersionState(*(*source).State)
			if err != nil {
				return nil, fmt.Errorf("error setting field State: %w", err)
			}
			openapiModelVersion.State = &openapiModelVersionState
		}
		if (*source).Author != nil {
			xstring3 := *(*source).Author
			openapiModelVersion.Author = &xstring3
		}
		pOpenapiModelVersion = &openapiModelVersion
	}
	return pOpenapiModelVersion, nil
}
func (c *OpenAPIConverterImpl) ConvertRegisteredModelCreate(source *openapi.RegisteredModelCreate) (*openapi.RegisteredModel, error) {
	var pOpenapiRegisteredModel *openapi.RegisteredModel
	if source != nil {
		var openapiRegisteredModel openapi.RegisteredModel
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiRegisteredModel.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiRegisteredModel.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiRegisteredModel.ExternalId = &xstring2
		}
		openapiRegisteredModel.Name = (*source).Name
		if (*source).Owner != nil {
			xstring3 := *(*source).Owner
			openapiRegisteredModel.Owner = &xstring3
		}
		if (*source).State != nil {
			openapiRegisteredModelState, err := c.openapiRegisteredModelStateToOpenapiRegisteredModelState(*(*source).State)
			if err != nil {
				return nil, fmt.Errorf("error setting field State: %w", err)
			}
			openapiRegisteredModel.State = &openapiRegisteredModelState
		}
		pOpenapiRegisteredModel = &openapiRegisteredModel
	}
	return pOpenapiRegisteredModel, nil
}
func (c *OpenAPIConverterImpl) ConvertRegisteredModelUpdate(source *openapi.RegisteredModelUpdate) (*openapi.RegisteredModel, error) {
	var pOpenapiRegisteredModel *openapi.RegisteredModel
	if source != nil {
		var openapiRegisteredModel openapi.RegisteredModel
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiRegisteredModel.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiRegisteredModel.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiRegisteredModel.ExternalId = &xstring2
		}
		if (*source).Owner != nil {
			xstring3 := *(*source).Owner
			openapiRegisteredModel.Owner = &xstring3
		}
		if (*source).State != nil {
			openapiRegisteredModelState, err := c.openapiRegisteredModelStateToOpenapiRegisteredModelState(*(*source).State)
			if err != nil {
				return nil, fmt.Errorf("error setting field State: %w", err)
			}
			openapiRegisteredModel.State = &openapiRegisteredModelState
		}
		pOpenapiRegisteredModel = &openapiRegisteredModel
	}
	return pOpenapiRegisteredModel, nil
}
func (c *OpenAPIConverterImpl) ConvertServeModelCreate(source *openapi.ServeModelCreate) (*openapi.ServeModel, error) {
	var pOpenapiServeModel *openapi.ServeModel
	if source != nil {
		var openapiServeModel openapi.ServeModel
		if (*source).LastKnownState != nil {
			openapiExecutionState, err := c.openapiExecutionStateToOpenapiExecutionState(*(*source).LastKnownState)
			if err != nil {
				return nil, fmt.Errorf("error setting field LastKnownState: %w", err)
			}
			openapiServeModel.LastKnownState = &openapiExecutionState
		}
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiServeModel.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiServeModel.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiServeModel.ExternalId = &xstring2
		}
		if (*source).Name != nil {
			xstring3 := *(*source).Name
			openapiServeModel.Name = &xstring3
		}
		openapiServeModel.ModelVersionId = (*source).ModelVersionId
		pOpenapiServeModel = &openapiServeModel
	}
	return pOpenapiServeModel, nil
}
func (c *OpenAPIConverterImpl) ConvertServeModelUpdate(source *openapi.ServeModelUpdate) (*openapi.ServeModel, error) {
	var pOpenapiServeModel *openapi.ServeModel
	if source != nil {
		var openapiServeModel openapi.ServeModel
		if (*source).LastKnownState != nil {
			openapiExecutionState, err := c.openapiExecutionStateToOpenapiExecutionState(*(*source).LastKnownState)
			if err != nil {
				return nil, fmt.Errorf("error setting field LastKnownState: %w", err)
			}
			openapiServeModel.LastKnownState = &openapiExecutionState
		}
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiServeModel.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiServeModel.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiServeModel.ExternalId = &xstring2
		}
		pOpenapiServeModel = &openapiServeModel
	}
	return pOpenapiServeModel, nil
}
func (c *OpenAPIConverterImpl) ConvertServingEnvironmentCreate(source *openapi.ServingEnvironmentCreate) (*openapi.ServingEnvironment, error) {
	var pOpenapiServingEnvironment *openapi.ServingEnvironment
	if source != nil {
		var openapiServingEnvironment openapi.ServingEnvironment
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiServingEnvironment.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiServingEnvironment.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiServingEnvironment.ExternalId = &xstring2
		}
		if (*source).Name != nil {
			xstring3 := *(*source).Name
			openapiServingEnvironment.Name = &xstring3
		}
		pOpenapiServingEnvironment = &openapiServingEnvironment
	}
	return pOpenapiServingEnvironment, nil
}
func (c *OpenAPIConverterImpl) ConvertServingEnvironmentUpdate(source *openapi.ServingEnvironmentUpdate) (*openapi.ServingEnvironment, error) {
	var pOpenapiServingEnvironment *openapi.ServingEnvironment
	if source != nil {
		var openapiServingEnvironment openapi.ServingEnvironment
		if (*source).CustomProperties != nil {
			var mapStringOpenapiMetadataValue map[string]openapi.MetadataValue
			if (*(*source).CustomProperties) != nil {
				mapStringOpenapiMetadataValue = make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
				for key, value := range *(*source).CustomProperties {
					mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
				}
			}
			openapiServingEnvironment.CustomProperties = &mapStringOpenapiMetadataValue
		}
		if (*source).Description != nil {
			xstring := *(*source).Description
			openapiServingEnvironment.Description = &xstring
		}
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			openapiServingEnvironment.ExternalId = &xstring2
		}
		pOpenapiServingEnvironment = &openapiServingEnvironment
	}
	return pOpenapiServingEnvironment, nil
}
func (c *OpenAPIConverterImpl) OverrideNotEditableForDocArtifact(source converter.OpenapiUpdateWrapper[openapi.DocArtifact]) (openapi.DocArtifact, error) {
	openapiDocArtifact := converter.InitWithUpdate(source)
	_ = source
	return openapiDocArtifact, nil
}
func (c *OpenAPIConverterImpl) OverrideNotEditableForInferenceService(source converter.OpenapiUpdateWrapper[openapi.InferenceService]) (openapi.InferenceService, error) {
	openapiInferenceService := converter.InitWithUpdate(source)
	var pString *string
	if source.Existing != nil {
		pString = source.Existing.Name
	}
	if pString != nil {
		xstring := *pString
		openapiInferenceService.Name = &xstring
	}
	var pString2 *string
	if source.Existing != nil {
		pString2 = &source.Existing.RegisteredModelId
	}
	if pString2 != nil {
		openapiInferenceService.RegisteredModelId = *pString2
	}
	var pString3 *string
	if source.Existing != nil {
		pString3 = &source.Existing.ServingEnvironmentId
	}
	if pString3 != nil {
		openapiInferenceService.ServingEnvironmentId = *pString3
	}
	return openapiInferenceService, nil
}
func (c *OpenAPIConverterImpl) OverrideNotEditableForModelArtifact(source converter.OpenapiUpdateWrapper[openapi.ModelArtifact]) (openapi.ModelArtifact, error) {
	openapiModelArtifact := converter.InitWithUpdate(source)
	var pString *string
	if source.Existing != nil {
		pString = &source.Existing.ArtifactType
	}
	if pString != nil {
		openapiModelArtifact.ArtifactType = *pString
	}
	var pString2 *string
	if source.Existing != nil {
		pString2 = source.Existing.Name
	}
	if pString2 != nil {
		xstring := *pString2
		openapiModelArtifact.Name = &xstring
	}
	return openapiModelArtifact, nil
}
func (c *OpenAPIConverterImpl) OverrideNotEditableForModelVersion(source converter.OpenapiUpdateWrapper[openapi.ModelVersion]) (openapi.ModelVersion, error) {
	openapiModelVersion := converter.InitWithUpdate(source)
	var pString *string
	if source.Existing != nil {
		pString = &source.Existing.Name
	}
	if pString != nil {
		openapiModelVersion.Name = *pString
	}
	var pString2 *string
	if source.Existing != nil {
		pString2 = &source.Existing.RegisteredModelId
	}
	if pString2 != nil {
		openapiModelVersion.RegisteredModelId = *pString2
	}
	return openapiModelVersion, nil
}
func (c *OpenAPIConverterImpl) OverrideNotEditableForRegisteredModel(source converter.OpenapiUpdateWrapper[openapi.RegisteredModel]) (openapi.RegisteredModel, error) {
	openapiRegisteredModel := converter.InitWithUpdate(source)
	var pString *string
	if source.Existing != nil {
		pString = &source.Existing.Name
	}
	if pString != nil {
		openapiRegisteredModel.Name = *pString
	}
	return openapiRegisteredModel, nil
}
func (c *OpenAPIConverterImpl) OverrideNotEditableForServeModel(source converter.OpenapiUpdateWrapper[openapi.ServeModel]) (openapi.ServeModel, error) {
	openapiServeModel := converter.InitWithUpdate(source)
	var pString *string
	if source.Existing != nil {
		pString = source.Existing.Name
	}
	if pString != nil {
		xstring := *pString
		openapiServeModel.Name = &xstring
	}
	var pString2 *string
	if source.Existing != nil {
		pString2 = &source.Existing.ModelVersionId
	}
	if pString2 != nil {
		openapiServeModel.ModelVersionId = *pString2
	}
	return openapiServeModel, nil
}
func (c *OpenAPIConverterImpl) OverrideNotEditableForServingEnvironment(source converter.OpenapiUpdateWrapper[openapi.ServingEnvironment]) (openapi.ServingEnvironment, error) {
	openapiServingEnvironment := converter.InitWithUpdate(source)
	var pString *string
	if source.Existing != nil {
		pString = source.Existing.Name
	}
	if pString != nil {
		xstring := *pString
		openapiServingEnvironment.Name = &xstring
	}
	return openapiServingEnvironment, nil
}
func (c *OpenAPIConverterImpl) openapiArtifactStateToOpenapiArtifactState(source openapi.ArtifactState) (openapi.ArtifactState, error) {
	var openapiArtifactState openapi.ArtifactState
	switch source {
	case openapi.ARTIFACTSTATE_ABANDONED:
		openapiArtifactState = openapi.ARTIFACTSTATE_ABANDONED
	case openapi.ARTIFACTSTATE_DELETED:
		openapiArtifactState = openapi.ARTIFACTSTATE_DELETED
	case openapi.ARTIFACTSTATE_LIVE:
		openapiArtifactState = openapi.ARTIFACTSTATE_LIVE
	case openapi.ARTIFACTSTATE_MARKED_FOR_DELETION:
		openapiArtifactState = openapi.ARTIFACTSTATE_MARKED_FOR_DELETION
	case openapi.ARTIFACTSTATE_PENDING:
		openapiArtifactState = openapi.ARTIFACTSTATE_PENDING
	case openapi.ARTIFACTSTATE_REFERENCE:
		openapiArtifactState = openapi.ARTIFACTSTATE_REFERENCE
	case openapi.ARTIFACTSTATE_UNKNOWN:
		openapiArtifactState = openapi.ARTIFACTSTATE_UNKNOWN
	default:
		return openapiArtifactState, fmt.Errorf("unexpected enum element: %v", source)
	}
	return openapiArtifactState, nil
}
func (c *OpenAPIConverterImpl) openapiExecutionStateToOpenapiExecutionState(source openapi.ExecutionState) (openapi.ExecutionState, error) {
	var openapiExecutionState openapi.ExecutionState
	switch source {
	case openapi.EXECUTIONSTATE_CACHED:
		openapiExecutionState = openapi.EXECUTIONSTATE_CACHED
	case openapi.EXECUTIONSTATE_CANCELED:
		openapiExecutionState = openapi.EXECUTIONSTATE_CANCELED
	case openapi.EXECUTIONSTATE_COMPLETE:
		openapiExecutionState = openapi.EXECUTIONSTATE_COMPLETE
	case openapi.EXECUTIONSTATE_FAILED:
		openapiExecutionState = openapi.EXECUTIONSTATE_FAILED
	case openapi.EXECUTIONSTATE_NEW:
		openapiExecutionState = openapi.EXECUTIONSTATE_NEW
	case openapi.EXECUTIONSTATE_RUNNING:
		openapiExecutionState = openapi.EXECUTIONSTATE_RUNNING
	case openapi.EXECUTIONSTATE_UNKNOWN:
		openapiExecutionState = openapi.EXECUTIONSTATE_UNKNOWN
	default:
		return openapiExecutionState, fmt.Errorf("unexpected enum element: %v", source)
	}
	return openapiExecutionState, nil
}
func (c *OpenAPIConverterImpl) openapiInferenceServiceStateToOpenapiInferenceServiceState(source openapi.InferenceServiceState) (openapi.InferenceServiceState, error) {
	var openapiInferenceServiceState openapi.InferenceServiceState
	switch source {
	case openapi.INFERENCESERVICESTATE_DEPLOYED:
		openapiInferenceServiceState = openapi.INFERENCESERVICESTATE_DEPLOYED
	case openapi.INFERENCESERVICESTATE_UNDEPLOYED:
		openapiInferenceServiceState = openapi.INFERENCESERVICESTATE_UNDEPLOYED
	default:
		return openapiInferenceServiceState, fmt.Errorf("unexpected enum element: %v", source)
	}
	return openapiInferenceServiceState, nil
}
func (c *OpenAPIConverterImpl) openapiMetadataValueToOpenapiMetadataValue(source openapi.MetadataValue) openapi.MetadataValue {
	var openapiMetadataValue openapi.MetadataValue
	openapiMetadataValue.MetadataBoolValue = c.pOpenapiMetadataBoolValueToPOpenapiMetadataBoolValue(source.MetadataBoolValue)
	openapiMetadataValue.MetadataDoubleValue = c.pOpenapiMetadataDoubleValueToPOpenapiMetadataDoubleValue(source.MetadataDoubleValue)
	openapiMetadataValue.MetadataIntValue = c.pOpenapiMetadataIntValueToPOpenapiMetadataIntValue(source.MetadataIntValue)
	openapiMetadataValue.MetadataProtoValue = c.pOpenapiMetadataProtoValueToPOpenapiMetadataProtoValue(source.MetadataProtoValue)
	openapiMetadataValue.MetadataStringValue = c.pOpenapiMetadataStringValueToPOpenapiMetadataStringValue(source.MetadataStringValue)
	openapiMetadataValue.MetadataStructValue = c.pOpenapiMetadataStructValueToPOpenapiMetadataStructValue(source.MetadataStructValue)
	return openapiMetadataValue
}
func (c *OpenAPIConverterImpl) openapiModelVersionStateToOpenapiModelVersionState(source openapi.ModelVersionState) (openapi.ModelVersionState, error) {
	var openapiModelVersionState openapi.ModelVersionState
	switch source {
	case openapi.MODELVERSIONSTATE_ARCHIVED:
		openapiModelVersionState = openapi.MODELVERSIONSTATE_ARCHIVED
	case openapi.MODELVERSIONSTATE_LIVE:
		openapiModelVersionState = openapi.MODELVERSIONSTATE_LIVE
	default:
		return openapiModelVersionState, fmt.Errorf("unexpected enum element: %v", source)
	}
	return openapiModelVersionState, nil
}
func (c *OpenAPIConverterImpl) openapiRegisteredModelStateToOpenapiRegisteredModelState(source openapi.RegisteredModelState) (openapi.RegisteredModelState, error) {
	var openapiRegisteredModelState openapi.RegisteredModelState
	switch source {
	case openapi.REGISTEREDMODELSTATE_ARCHIVED:
		openapiRegisteredModelState = openapi.REGISTEREDMODELSTATE_ARCHIVED
	case openapi.REGISTEREDMODELSTATE_LIVE:
		openapiRegisteredModelState = openapi.REGISTEREDMODELSTATE_LIVE
	default:
		return openapiRegisteredModelState, fmt.Errorf("unexpected enum element: %v", source)
	}
	return openapiRegisteredModelState, nil
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataBoolValueToPOpenapiMetadataBoolValue(source *openapi.MetadataBoolValue) *openapi.MetadataBoolValue {
	var pOpenapiMetadataBoolValue *openapi.MetadataBoolValue
	if source != nil {
		var openapiMetadataBoolValue openapi.MetadataBoolValue
		openapiMetadataBoolValue.BoolValue = (*source).BoolValue
		openapiMetadataBoolValue.MetadataType = (*source).MetadataType
		pOpenapiMetadataBoolValue = &openapiMetadataBoolValue
	}
	return pOpenapiMetadataBoolValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataDoubleValueToPOpenapiMetadataDoubleValue(source *openapi.MetadataDoubleValue) *openapi.MetadataDoubleValue {
	var pOpenapiMetadataDoubleValue *openapi.MetadataDoubleValue
	if source != nil {
		var openapiMetadataDoubleValue openapi.MetadataDoubleValue
		openapiMetadataDoubleValue.DoubleValue = (*source).DoubleValue
		openapiMetadataDoubleValue.MetadataType = (*source).MetadataType
		pOpenapiMetadataDoubleValue = &openapiMetadataDoubleValue
	}
	return pOpenapiMetadataDoubleValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataIntValueToPOpenapiMetadataIntValue(source *openapi.MetadataIntValue) *openapi.MetadataIntValue {
	var pOpenapiMetadataIntValue *openapi.MetadataIntValue
	if source != nil {
		var openapiMetadataIntValue openapi.MetadataIntValue
		openapiMetadataIntValue.IntValue = (*source).IntValue
		openapiMetadataIntValue.MetadataType = (*source).MetadataType
		pOpenapiMetadataIntValue = &openapiMetadataIntValue
	}
	return pOpenapiMetadataIntValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataProtoValueToPOpenapiMetadataProtoValue(source *openapi.MetadataProtoValue) *openapi.MetadataProtoValue {
	var pOpenapiMetadataProtoValue *openapi.MetadataProtoValue
	if source != nil {
		var openapiMetadataProtoValue openapi.MetadataProtoValue
		openapiMetadataProtoValue.Type = (*source).Type
		openapiMetadataProtoValue.ProtoValue = (*source).ProtoValue
		openapiMetadataProtoValue.MetadataType = (*source).MetadataType
		pOpenapiMetadataProtoValue = &openapiMetadataProtoValue
	}
	return pOpenapiMetadataProtoValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataStringValueToPOpenapiMetadataStringValue(source *openapi.MetadataStringValue) *openapi.MetadataStringValue {
	var pOpenapiMetadataStringValue *openapi.MetadataStringValue
	if source != nil {
		var openapiMetadataStringValue openapi.MetadataStringValue
		openapiMetadataStringValue.StringValue = (*source).StringValue
		openapiMetadataStringValue.MetadataType = (*source).MetadataType
		pOpenapiMetadataStringValue = &openapiMetadataStringValue
	}
	return pOpenapiMetadataStringValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataStructValueToPOpenapiMetadataStructValue(source *openapi.MetadataStructValue) *openapi.MetadataStructValue {
	var pOpenapiMetadataStructValue *openapi.MetadataStructValue
	if source != nil {
		var openapiMetadataStructValue openapi.MetadataStructValue
		openapiMetadataStructValue.StructValue = (*source).StructValue
		openapiMetadataStructValue.MetadataType = (*source).MetadataType
		pOpenapiMetadataStructValue = &openapiMetadataStructValue
	}
	return pOpenapiMetadataStructValue
}
