/*
Model Catalog REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CatalogArtifact - A single artifact in the catalog API.
type CatalogArtifact struct {
	CatalogMetricsArtifact *CatalogMetricsArtifact
	CatalogModelArtifact   *CatalogModelArtifact
}

// CatalogMetricsArtifactAsCatalogArtifact is a convenience function that returns CatalogMetricsArtifact wrapped in CatalogArtifact
func CatalogMetricsArtifactAsCatalogArtifact(v *CatalogMetricsArtifact) CatalogArtifact {
	return CatalogArtifact{
		CatalogMetricsArtifact: v,
	}
}

// CatalogModelArtifactAsCatalogArtifact is a convenience function that returns CatalogModelArtifact wrapped in CatalogArtifact
func CatalogModelArtifactAsCatalogArtifact(v *CatalogModelArtifact) CatalogArtifact {
	return CatalogArtifact{
		CatalogModelArtifact: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogArtifact) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CatalogMetricsArtifact'
	if jsonDict["artifactType"] == "CatalogMetricsArtifact" {
		// try to unmarshal JSON data into CatalogMetricsArtifact
		err = json.Unmarshal(data, &dst.CatalogMetricsArtifact)
		if err == nil {
			return nil // data stored in dst.CatalogMetricsArtifact, return on the first match
		} else {
			dst.CatalogMetricsArtifact = nil
			return fmt.Errorf("failed to unmarshal CatalogArtifact as CatalogMetricsArtifact: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CatalogModelArtifact'
	if jsonDict["artifactType"] == "CatalogModelArtifact" {
		// try to unmarshal JSON data into CatalogModelArtifact
		err = json.Unmarshal(data, &dst.CatalogModelArtifact)
		if err == nil {
			return nil // data stored in dst.CatalogModelArtifact, return on the first match
		} else {
			dst.CatalogModelArtifact = nil
			return fmt.Errorf("failed to unmarshal CatalogArtifact as CatalogModelArtifact: %s", err.Error())
		}
	}

	// check if the discriminator value is 'metrics-artifact'
	if jsonDict["artifactType"] == "metrics-artifact" {
		// try to unmarshal JSON data into CatalogMetricsArtifact
		err = json.Unmarshal(data, &dst.CatalogMetricsArtifact)
		if err == nil {
			return nil // data stored in dst.CatalogMetricsArtifact, return on the first match
		} else {
			dst.CatalogMetricsArtifact = nil
			return fmt.Errorf("failed to unmarshal CatalogArtifact as CatalogMetricsArtifact: %s", err.Error())
		}
	}

	// check if the discriminator value is 'model-artifact'
	if jsonDict["artifactType"] == "model-artifact" {
		// try to unmarshal JSON data into CatalogModelArtifact
		err = json.Unmarshal(data, &dst.CatalogModelArtifact)
		if err == nil {
			return nil // data stored in dst.CatalogModelArtifact, return on the first match
		} else {
			dst.CatalogModelArtifact = nil
			return fmt.Errorf("failed to unmarshal CatalogArtifact as CatalogModelArtifact: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogArtifact) MarshalJSON() ([]byte, error) {
	if src.CatalogMetricsArtifact != nil {
		return json.Marshal(&src.CatalogMetricsArtifact)
	}

	if src.CatalogModelArtifact != nil {
		return json.Marshal(&src.CatalogModelArtifact)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogArtifact) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CatalogMetricsArtifact != nil {
		return obj.CatalogMetricsArtifact
	}

	if obj.CatalogModelArtifact != nil {
		return obj.CatalogModelArtifact
	}

	// all schemas are nil
	return nil
}

type NullableCatalogArtifact struct {
	value *CatalogArtifact
	isSet bool
}

func (v NullableCatalogArtifact) Get() *CatalogArtifact {
	return v.value
}

func (v *NullableCatalogArtifact) Set(val *CatalogArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogArtifact(val *CatalogArtifact) *NullableCatalogArtifact {
	return &NullableCatalogArtifact{value: val, isSet: true}
}

func (v NullableCatalogArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
