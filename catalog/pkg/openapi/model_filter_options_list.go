/*
Model Catalog REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterOptionsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterOptionsList{}

// FilterOptionsList List of FilterOptions
type FilterOptionsList struct {
	// A single filter option.
	Filters *map[string]FilterOption `json:"filters,omitempty"`
}

// NewFilterOptionsList instantiates a new FilterOptionsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterOptionsList() *FilterOptionsList {
	this := FilterOptionsList{}
	return &this
}

// NewFilterOptionsListWithDefaults instantiates a new FilterOptionsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterOptionsListWithDefaults() *FilterOptionsList {
	this := FilterOptionsList{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *FilterOptionsList) GetFilters() map[string]FilterOption {
	if o == nil || IsNil(o.Filters) {
		var ret map[string]FilterOption
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOptionsList) GetFiltersOk() (*map[string]FilterOption, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *FilterOptionsList) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string]FilterOption and assigns it to the Filters field.
func (o *FilterOptionsList) SetFilters(v map[string]FilterOption) {
	o.Filters = &v
}

func (o FilterOptionsList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterOptionsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableFilterOptionsList struct {
	value *FilterOptionsList
	isSet bool
}

func (v NullableFilterOptionsList) Get() *FilterOptionsList {
	return v.value
}

func (v *NullableFilterOptionsList) Set(val *FilterOptionsList) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOptionsList) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOptionsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOptionsList(val *FilterOptionsList) *NullableFilterOptionsList {
	return &NullableFilterOptionsList{value: val, isSet: true}
}

func (v NullableFilterOptionsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOptionsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
