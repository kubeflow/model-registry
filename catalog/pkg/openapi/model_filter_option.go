/*
Model Catalog REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterOption{}

// FilterOption struct for FilterOption
type FilterOption struct {
	// The data type of the filter option
	Type string `json:"type"`
	// Known values of the property for string types with a small number of possible options.
	Values []interface{}      `json:"values,omitempty"`
	Range  *FilterOptionRange `json:"range,omitempty"`
}

// NewFilterOption instantiates a new FilterOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterOption(type_ string) *FilterOption {
	this := FilterOption{}
	this.Type = type_
	return &this
}

// NewFilterOptionWithDefaults instantiates a new FilterOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterOptionWithDefaults() *FilterOption {
	this := FilterOption{}
	return &this
}

// GetType returns the Type field value
func (o *FilterOption) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilterOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilterOption) SetType(v string) {
	o.Type = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *FilterOption) GetValues() []interface{} {
	if o == nil || IsNil(o.Values) {
		var ret []interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOption) GetValuesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *FilterOption) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []interface{} and assigns it to the Values field.
func (o *FilterOption) SetValues(v []interface{}) {
	o.Values = v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *FilterOption) GetRange() FilterOptionRange {
	if o == nil || IsNil(o.Range) {
		var ret FilterOptionRange
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterOption) GetRangeOk() (*FilterOptionRange, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *FilterOption) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given FilterOptionRange and assigns it to the Range field.
func (o *FilterOption) SetRange(v FilterOptionRange) {
	o.Range = &v
}

func (o FilterOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	return toSerialize, nil
}

type NullableFilterOption struct {
	value *FilterOption
	isSet bool
}

func (v NullableFilterOption) Get() *FilterOption {
	return v.value
}

func (v *NullableFilterOption) Set(val *FilterOption) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOption) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOption(val *FilterOption) *NullableFilterOption {
	return &NullableFilterOption{value: val, isSet: true}
}

func (v NullableFilterOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
