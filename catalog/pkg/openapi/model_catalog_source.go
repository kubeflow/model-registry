/*
Model Catalog REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogSource{}

// CatalogSource A catalog source. A catalog source has CatalogModel children.
type CatalogSource struct {
	// A unique identifier for a `CatalogSource`.
	Id string `json:"id"`
	// The name of the catalog source.
	Name string `json:"name"`
	// Whether the catalog source is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Indicates if the source is available.
	Status *string `json:"status,omitempty"`
	// An error message that will be populated if the status is `FAILED`
	Error *string `json:"error,omitempty"`
}

// NewCatalogSource instantiates a new CatalogSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogSource(id string, name string) *CatalogSource {
	this := CatalogSource{}
	this.Id = id
	this.Name = name
	var enabled bool = true
	this.Enabled = &enabled
	var status string = "UNKNOWN"
	this.Status = &status
	return &this
}

// NewCatalogSourceWithDefaults instantiates a new CatalogSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogSourceWithDefaults() *CatalogSource {
	this := CatalogSource{}
	var enabled bool = true
	this.Enabled = &enabled
	var status string = "UNKNOWN"
	this.Status = &status
	return &this
}

// GetId returns the Id field value
func (o *CatalogSource) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CatalogSource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CatalogSource) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CatalogSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CatalogSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CatalogSource) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CatalogSource) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSource) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CatalogSource) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CatalogSource) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CatalogSource) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSource) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CatalogSource) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CatalogSource) SetStatus(v string) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CatalogSource) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSource) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CatalogSource) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *CatalogSource) SetError(v string) {
	o.Error = &v
}

func (o CatalogSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableCatalogSource struct {
	value *CatalogSource
	isSet bool
}

func (v NullableCatalogSource) Get() *CatalogSource {
	return v.value
}

func (v *NullableCatalogSource) Set(val *CatalogSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogSource(val *CatalogSource) *NullableCatalogSource {
	return &NullableCatalogSource{value: val, isSet: true}
}

func (v NullableCatalogSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
