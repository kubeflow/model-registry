/*
 * Model Registry REST API
 *
 * REST API for Model Registry to create and manage ML model metadata
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 *
 */

// File generated by scripts/gen_type_assert.sh - DO NOT EDIT

package openapi

import (
	model "github.com/kubeflow/model-registry/catalog/pkg/openapi"
)

// AssertArtifactTypeQueryParamConstraints checks if the values respects the defined constraints
func AssertArtifactTypeQueryParamConstraints(obj model.ArtifactTypeQueryParam) error {
	return nil
}

// AssertArtifactTypeQueryParamRequired checks if the required fields are not zero-ed
func AssertArtifactTypeQueryParamRequired(obj model.ArtifactTypeQueryParam) error {
	return nil
}

// AssertBaseModelConstraints checks if the values respects the defined constraints
func AssertBaseModelConstraints(obj model.BaseModel) error {
	return nil
}

// AssertBaseModelRequired checks if the required fields are not zero-ed
func AssertBaseModelRequired(obj model.BaseModel) error {
	return nil
}

// AssertBaseResourceDatesConstraints checks if the values respects the defined constraints
func AssertBaseResourceDatesConstraints(obj model.BaseResourceDates) error {
	return nil
}

// AssertBaseResourceDatesRequired checks if the required fields are not zero-ed
func AssertBaseResourceDatesRequired(obj model.BaseResourceDates) error {
	return nil
}

// AssertBaseResourceListConstraints checks if the values respects the defined constraints
func AssertBaseResourceListConstraints(obj model.BaseResourceList) error {
	return nil
}

// AssertBaseResourceListRequired checks if the required fields are not zero-ed
func AssertBaseResourceListRequired(obj model.BaseResourceList) error {
	elements := map[string]interface{}{
		"nextPageToken": obj.NextPageToken,
		"pageSize":      obj.PageSize,
		"size":          obj.Size,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCatalogModelArtifactConstraints checks if the values respects the defined constraints
func AssertCatalogModelArtifactConstraints(obj model.CatalogModelArtifact) error {
	return nil
}

// AssertCatalogModelArtifactListConstraints checks if the values respects the defined constraints
func AssertCatalogModelArtifactListConstraints(obj model.CatalogModelArtifactList) error {
	return nil
}

// AssertCatalogModelArtifactListRequired checks if the required fields are not zero-ed
func AssertCatalogModelArtifactListRequired(obj model.CatalogModelArtifactList) error {
	elements := map[string]interface{}{
		"nextPageToken": obj.NextPageToken,
		"pageSize":      obj.PageSize,
		"size":          obj.Size,
		"items":         obj.Items,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertCatalogModelArtifactRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertCatalogModelArtifactRequired checks if the required fields are not zero-ed
func AssertCatalogModelArtifactRequired(obj model.CatalogModelArtifact) error {
	elements := map[string]interface{}{
		"uri": obj.Uri,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCatalogModelConstraints checks if the values respects the defined constraints
func AssertCatalogModelConstraints(obj model.CatalogModel) error {
	return nil
}

// AssertCatalogModelListConstraints checks if the values respects the defined constraints
func AssertCatalogModelListConstraints(obj model.CatalogModelList) error {
	return nil
}

// AssertCatalogModelListRequired checks if the required fields are not zero-ed
func AssertCatalogModelListRequired(obj model.CatalogModelList) error {
	elements := map[string]interface{}{
		"nextPageToken": obj.NextPageToken,
		"pageSize":      obj.PageSize,
		"size":          obj.Size,
		"items":         obj.Items,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertCatalogModelRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertCatalogModelRequired checks if the required fields are not zero-ed
func AssertCatalogModelRequired(obj model.CatalogModel) error {
	elements := map[string]interface{}{
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCatalogSourceConstraints checks if the values respects the defined constraints
func AssertCatalogSourceConstraints(obj model.CatalogSource) error {
	return nil
}

// AssertCatalogSourceListConstraints checks if the values respects the defined constraints
func AssertCatalogSourceListConstraints(obj model.CatalogSourceList) error {
	return nil
}

// AssertCatalogSourceListRequired checks if the required fields are not zero-ed
func AssertCatalogSourceListRequired(obj model.CatalogSourceList) error {
	elements := map[string]interface{}{
		"nextPageToken": obj.NextPageToken,
		"pageSize":      obj.PageSize,
		"size":          obj.Size,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertCatalogSourceRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertCatalogSourceRequired checks if the required fields are not zero-ed
func AssertCatalogSourceRequired(obj model.CatalogSource) error {
	elements := map[string]interface{}{
		"id":   obj.Id,
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertErrorConstraints checks if the values respects the defined constraints
func AssertErrorConstraints(obj model.Error) error {
	return nil
}

// AssertErrorRequired checks if the required fields are not zero-ed
func AssertErrorRequired(obj model.Error) error {
	elements := map[string]interface{}{
		"code":    obj.Code,
		"message": obj.Message,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertMetadataBoolValueConstraints checks if the values respects the defined constraints
func AssertMetadataBoolValueConstraints(obj model.MetadataBoolValue) error {
	return nil
}

// AssertMetadataBoolValueRequired checks if the required fields are not zero-ed
func AssertMetadataBoolValueRequired(obj model.MetadataBoolValue) error {
	elements := map[string]interface{}{
		"bool_value":   obj.BoolValue,
		"metadataType": obj.MetadataType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertMetadataDoubleValueConstraints checks if the values respects the defined constraints
func AssertMetadataDoubleValueConstraints(obj model.MetadataDoubleValue) error {
	return nil
}

// AssertMetadataDoubleValueRequired checks if the required fields are not zero-ed
func AssertMetadataDoubleValueRequired(obj model.MetadataDoubleValue) error {
	elements := map[string]interface{}{
		"double_value": obj.DoubleValue,
		"metadataType": obj.MetadataType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertMetadataIntValueConstraints checks if the values respects the defined constraints
func AssertMetadataIntValueConstraints(obj model.MetadataIntValue) error {
	return nil
}

// AssertMetadataIntValueRequired checks if the required fields are not zero-ed
func AssertMetadataIntValueRequired(obj model.MetadataIntValue) error {
	elements := map[string]interface{}{
		"int_value":    obj.IntValue,
		"metadataType": obj.MetadataType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertMetadataProtoValueConstraints checks if the values respects the defined constraints
func AssertMetadataProtoValueConstraints(obj model.MetadataProtoValue) error {
	return nil
}

// AssertMetadataProtoValueRequired checks if the required fields are not zero-ed
func AssertMetadataProtoValueRequired(obj model.MetadataProtoValue) error {
	elements := map[string]interface{}{
		"type":         obj.Type,
		"proto_value":  obj.ProtoValue,
		"metadataType": obj.MetadataType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertMetadataStringValueConstraints checks if the values respects the defined constraints
func AssertMetadataStringValueConstraints(obj model.MetadataStringValue) error {
	return nil
}

// AssertMetadataStringValueRequired checks if the required fields are not zero-ed
func AssertMetadataStringValueRequired(obj model.MetadataStringValue) error {
	elements := map[string]interface{}{
		"string_value": obj.StringValue,
		"metadataType": obj.MetadataType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertMetadataStructValueConstraints checks if the values respects the defined constraints
func AssertMetadataStructValueConstraints(obj model.MetadataStructValue) error {
	return nil
}

// AssertMetadataStructValueRequired checks if the required fields are not zero-ed
func AssertMetadataStructValueRequired(obj model.MetadataStructValue) error {
	elements := map[string]interface{}{
		"struct_value": obj.StructValue,
		"metadataType": obj.MetadataType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertOrderByFieldConstraints checks if the values respects the defined constraints
func AssertOrderByFieldConstraints(obj model.OrderByField) error {
	return nil
}

// AssertOrderByFieldRequired checks if the required fields are not zero-ed
func AssertOrderByFieldRequired(obj model.OrderByField) error {
	return nil
}

// AssertSortOrderConstraints checks if the values respects the defined constraints
func AssertSortOrderConstraints(obj model.SortOrder) error {
	return nil
}

// AssertSortOrderRequired checks if the required fields are not zero-ed
func AssertSortOrderRequired(obj model.SortOrder) error {
	return nil
}
