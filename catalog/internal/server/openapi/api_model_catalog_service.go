// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Model Catalog REST API
 *
 * REST API for Model Registry to create and manage ML model metadata
 *
 * API version: v1alpha1
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"

	model "github.com/kubeflow/model-registry/catalog/pkg/openapi"
)

// ModelCatalogServiceAPIController binds http requests to an api service and writes the service results to the http response
type ModelCatalogServiceAPIController struct {
	service      ModelCatalogServiceAPIServicer
	errorHandler ErrorHandler
}

// ModelCatalogServiceAPIOption for how the controller is set up.
type ModelCatalogServiceAPIOption func(*ModelCatalogServiceAPIController)

// WithModelCatalogServiceAPIErrorHandler inject ErrorHandler into controller
func WithModelCatalogServiceAPIErrorHandler(h ErrorHandler) ModelCatalogServiceAPIOption {
	return func(c *ModelCatalogServiceAPIController) {
		c.errorHandler = h
	}
}

// NewModelCatalogServiceAPIController creates a default api controller
func NewModelCatalogServiceAPIController(s ModelCatalogServiceAPIServicer, opts ...ModelCatalogServiceAPIOption) *ModelCatalogServiceAPIController {
	controller := &ModelCatalogServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModelCatalogServiceAPIController
func (c *ModelCatalogServiceAPIController) Routes() Routes {
	return Routes{
		"FindModels": Route{
			"FindModels",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/models",
			c.FindModels,
		},
		"FindModelsFilterOptions": Route{
			"FindModelsFilterOptions",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/models/filter_options",
			c.FindModelsFilterOptions,
		},
		"FindSources": Route{
			"FindSources",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/sources",
			c.FindSources,
		},
		"GetModel": Route{
			"GetModel",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/sources/{source_id}/models/*",
			c.GetModel,
		},
		"GetAllModelArtifacts": Route{
			"GetAllModelArtifacts",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/sources/{source_id}/models/{model_name}/artifacts",
			c.GetAllModelArtifacts,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the ModelCatalogServiceAPIController
func (c *ModelCatalogServiceAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"FindModels",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/models",
			c.FindModels,
		},
		Route{
			"FindModelsFilterOptions",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/models/filter_options",
			c.FindModelsFilterOptions,
		},
		Route{
			"FindSources",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/sources",
			c.FindSources,
		},
		Route{
			"GetModel",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/sources/{source_id}/models/*",
			c.GetModel,
		},
		Route{
			"GetAllModelArtifacts",
			strings.ToUpper("Get"),
			"/api/model_catalog/v1alpha1/sources/{source_id}/models/{model_name}/artifacts",
			c.GetAllModelArtifacts,
		},
	}
}

// FindModels - Search catalog models across sources.
func (c *ModelCatalogServiceAPIController) FindModels(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var sourceParam []string
	if query.Has("source") {
		sourceParam = strings.Split(query.Get("source"), ",")
	}
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
	}
	var sourceLabelParam []string
	if query.Has("sourceLabel") {
		sourceLabelParam = strings.Split(query.Get("sourceLabel"), ",")
	}
	var filterQueryParam string
	if query.Has("filterQuery") {
		param := query.Get("filterQuery")

		filterQueryParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.FindModels(r.Context(), sourceParam, qParam, sourceLabelParam, filterQueryParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindModelsFilterOptions - Lists fields and available options that can be used in `filterQuery` on the list models endpoint.
func (c *ModelCatalogServiceAPIController) FindModelsFilterOptions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.FindModelsFilterOptions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FindSources - List All CatalogSources
func (c *ModelCatalogServiceAPIController) FindSources(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.FindSources(r.Context(), nameParam, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModel - Get a `CatalogModel`.
func (c *ModelCatalogServiceAPIController) GetModel(w http.ResponseWriter, r *http.Request) {
	sourceIdParam := chi.URLParam(r, "source_id")
	if sourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"source_id"}, nil)
		return
	}
	modelNameParam := chi.URLParam(r, "*")
	if modelNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"*"}, nil)
		return
	}

	// Special handling for getModel to delegate /artifacts requests to getAllModelArtifacts
	// The wildcard /* pattern catches /artifacts requests, but we want those to go to GetAllModelArtifacts
	if strings.HasSuffix(r.URL.Path, "/artifacts") {
		// Extract the model name by removing the /artifacts suffix
		modelName := strings.TrimSuffix(modelNameParam, "/artifacts")

		// Add the model_name parameter to the route context so GetAllModelArtifacts can access it
		chi.RouteContext(r.Context()).URLParams.Add("model_name", modelName)

		// Call the GetAllModelArtifacts handler directly
		c.GetAllModelArtifacts(w, r)
		return
	}

	result, err := c.service.GetModel(r.Context(), sourceIdParam, modelNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllModelArtifacts - List CatalogArtifacts.
func (c *ModelCatalogServiceAPIController) GetAllModelArtifacts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sourceIdParam := chi.URLParam(r, "source_id")
	if sourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"source_id"}, nil)
		return
	}
	modelNameParam := chi.URLParam(r, "model_name")
	if modelNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"model_name"}, nil)
		return
	}
	var artifactTypeParam []model.ArtifactTypeQueryParam
	if query.Has("artifactType") {
		paramSplits := strings.Split(query.Get("artifactType"), ",")
		artifactTypeParam = make([]model.ArtifactTypeQueryParam, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := model.NewArtifactTypeQueryParamFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "artifactType", Err: err}, nil)
				return
			}
			artifactTypeParam = append(artifactTypeParam, *paramEnum)
		}
	}
	var artifactType2Param []model.ArtifactTypeQueryParam
	if query.Has("artifact_type") {
		paramSplits := strings.Split(query.Get("artifact_type"), ",")
		artifactType2Param = make([]model.ArtifactTypeQueryParam, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := model.NewArtifactTypeQueryParamFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "artifact_type", Err: err}, nil)
				return
			}
			artifactType2Param = append(artifactType2Param, *paramEnum)
		}
	}
	var pageSizeParam string
	if query.Has("pageSize") {
		param := query.Get("pageSize")

		pageSizeParam = param
	} else {
	}
	var orderByParam model.OrderByField
	if query.Has("orderBy") {
		param := model.OrderByField(query.Get("orderBy"))

		orderByParam = param
	} else {
	}
	var sortOrderParam model.SortOrder
	if query.Has("sortOrder") {
		param := model.SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var nextPageTokenParam string
	if query.Has("nextPageToken") {
		param := query.Get("nextPageToken")

		nextPageTokenParam = param
	} else {
	}
	result, err := c.service.GetAllModelArtifacts(r.Context(), sourceIdParam, modelNameParam, artifactTypeParam, artifactType2Param, pageSizeParam, model.OrderByField(orderByParam), model.SortOrder(sortOrderParam), nextPageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
