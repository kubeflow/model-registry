directive @parse_federated_response_many on FIELD_DEFINITION | OBJECT

directive @parse_federated_response_single on FIELD_DEFINITION | OBJECT

directive @data_load_args_object_federated(local_keys: [String], types: [String], query: String) on FIELD_DEFINITION | OBJECT

directive @resolve_federated_field(query: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_get_original(schema: String, query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_get_one(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_get_one_aggregate(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_get_many_paginated(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_get_many_paginated_aggregate(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION | OBJECT

directive @request_started(schema: String, hide_unencrypted_logs: String, no_obj_log: String, federated_gql_error: String) on FIELD_DEFINITION | OBJECT

directive @request_ended(schema: String, hide_unencrypted_logs: String) on FIELD_DEFINITION | OBJECT

directive @auth_rbac(roles: [String], oidc_roles: [String]) on FIELD_DEFINITION | OBJECT

directive @auth_jwt_or_api_key_required on FIELD_DEFINITION | OBJECT

directive @data_decompression(schema: String, format: String) on FIELD_DEFINITION | OBJECT

directive @data_retype_argument(names: [String], types: [String]) on FIELD_DEFINITION | OBJECT

directive @data_get_argument_from_parent(paths: [[String]], names: [String]) on FIELD_DEFINITION | OBJECT

directive @data_load_args on FIELD_DEFINITION | OBJECT

directive @data_load_input on FIELD_DEFINITION | OBJECT

directive @pre_fetch(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @post_fetch(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @post_serialize(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @reference_entity(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @inaccessible on FIELD_DEFINITION | OBJECT

directive @serialize(schema: String, format: String, decrypt: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_create_one(collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_update_one(query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_replace_one(query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_delete_one(query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_embed_one_to_one(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_embed_one_to_one_check(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_embed_one_to_many(path: String, template: String, query: String, collection: String, database: String, path_to_iterated_keys: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_embed_one_to_many_check(path: String, template: String, query: String, collection: String, database: String, path_to_iterated_keys: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_embed_many_to_one(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_embed_many_to_one_check(path: String, template: String, query: String, collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @validate(schema: String, action: String) on FIELD_DEFINITION | OBJECT

directive @deserialize(schema: String, load_many: String, wrapped_data: String, encrypt: String) on FIELD_DEFINITION | OBJECT

directive @meta_add_obj on FIELD_DEFINITION | OBJECT

directive @data_add_automatic_fields(action: String, schema: String) on FIELD_DEFINITION | OBJECT

directive @data_add_history_fields(action: String, schema: String) on FIELD_DEFINITION | OBJECT

directive @data_compression(schema: String, action: String) on FIELD_DEFINITION | OBJECT

directive @data_decompression_original(schema: String) on FIELD_DEFINITION | OBJECT

directive @data_auto_fields_payload on FIELD_DEFINITION | OBJECT

directive @data_mock_input on FIELD_DEFINITION | OBJECT

directive @data_merge_original_update(schema: String) on FIELD_DEFINITION | OBJECT

directive @data_merge_original_replace(schema: String) on FIELD_DEFINITION | OBJECT

directive @data_exclude_read_only(schema: String) on FIELD_DEFINITION | OBJECT

directive @pre_validate(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @post_validate(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @pre_write(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @post_write(functions: [String]) on FIELD_DEFINITION | OBJECT

directive @check_unique_fields(has_to_be_unique: [[String]], collection: String, database: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_transaction_start on FIELD_DEFINITION | OBJECT

directive @mongodb_transaction_end on FIELD_DEFINITION | OBJECT

directive @get_one(url: String) on FIELD_DEFINITION

directive @get_many(url: String) on FIELD_DEFINITION

directive @one_to_many(url: String) on FIELD_DEFINITION

directive @one_to_one(url: String) on FIELD_DEFINITION

directive @delete(url: String) on FIELD_DEFINITION

directive @put(url: String) on FIELD_DEFINITION

directive @get_single_field(url: String) on FIELD_DEFINITION

directive @patch(url: String) on FIELD_DEFINITION

directive @post(url: String) on FIELD_DEFINITION

directive @edges on FIELD_DEFINITION

directive @mongodb_custom_find_images_by_manifest_external(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION | OBJECT

directive @mongodb_custom_find_images_by_manifest_internal(schema: String, query: String, collection: String, database: String, fsm_enabled: String) on FIELD_DEFINITION | OBJECT

directive @load_field_metadata on FIELD_DEFINITION

directive @proxy_get(host: String, path: String, method: String, query: String) on FIELD_DEFINITION | OBJECT

directive @proxy_delete(host: String, path: String, method: String, query: String) on FIELD_DEFINITION | OBJECT

directive @proxy_post(host: String, path: String, method: String, query: String) on FIELD_DEFINITION | OBJECT

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @external on FIELD_DEFINITION

directive @extends on OBJECT | INTERFACE

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

scalar _Any

union _Entity = ProductListingFederated | PublicProductListingFunctionalInfo

scalar _FieldSet

type _Service {
  sdl: String
}

"""Specific information from the CSV requested by customer."""
type ALMExample {
  api_version: String
  kind: String
  metadata: Dictionary
  spec: Dictionary
}

input ALMExampleElemMatchFilter {
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input ALMExampleFilter {
  api_version: StringFilter
  kind: StringFilter
  metadata: StringFilter
  spec: StringFilter
  eq: NULL
  ne: NULL
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input ALMExampleListFilter {
  list_index_filter: ALMExampleListIndexFilter
  api_version: StringFilter
  kind: StringFilter
  metadata: StringFilter
  spec: StringFilter
  eq: NULL
  ne: NULL
  and: [ALMExampleFilter]
  or: [ALMExampleFilter]
  nor: [ALMExampleFilter]
  not: ALMExampleFilter
}

input ALMExampleListIndexFilter {
  condition: ALMExampleFilter
  index: Int
}

"""API key stored in Loki."""
type ApiKey {
  id: Int
  description: String
  company_id: Int
  created: DateTime
  last_used: DateTime
  created_by: String

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """
  Red Hat username from Red Hat SSO of user who requested the API key creation.
  """
  created_on_behalf_of: String

  """
  Red Hat username from Red Hat SSO of user who last updated the API key.
  """
  updated_on_behalf_of: String
}

type ApiKeyListResponse {
  data: [ApiKey]
  error: ResponseError
}

input ApiKeyOrgIDWithDescriptionRequestInput {
  org_id: Int
  description: String
}

type ApiKeyResp {
  """Generated API key."""
  api_key: String

  """API key data."""
  key_data: ApiKey
}

type ApiKeyResponse {
  data: ApiKey
  error: ResponseError
}

type ApiKeyRespResponse {
  data: ApiKeyResp
  error: ResponseError
}

"""
Scalar checks if user is providing valid
Base64 encoded string on Marshmallow layer.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output)
"""
scalar Base64EncodedString

input BooleanFilter {
  eq: Boolean
  ne: Boolean
}

"""Brew Build System related metadata."""
type Brew {
  """Unique and immutable Brew build ID."""
  build: String

  """Timestamp from Brew when the image has been succesfully built."""
  completion_date: DateTime

  """Multi-Arch primary key."""
  nvra: String

  """A package name in Brew."""
  package: String
}

input BrewFilter {
  build: StringFilter
  completion_date: DateTimeFilter
  nvra: StringFilter
  package: StringFilter
  eq: NULL
  ne: NULL
  and: [BrewFilter]
  or: [BrewFilter]
  nor: [BrewFilter]
  not: BrewFilter
}

"""Brew Build System related metadata."""
input BrewInput {
  """Unique and immutable Brew build ID."""
  build: String

  """Timestamp from Brew when the image has been succesfully built."""
  completion_date: DateTime

  """Multi-Arch primary key."""
  nvra: String

  """A package name in Brew."""
  package: String
}

"""Contain Certification project data."""
type CertificationProject {
  """
  Value is derived from last_update_date field during when the certification
  project is published. Before it or if project is again unpublished, the value is null.
  """
  certification_date: DateTime

  """Tracks history for the `certification_level` field"""
  certification_level_history: FieldHistoryString

  """
  The certification project can be certified on several levels. This field
  determines whether the content was certified by ISV partner who followed
  official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """Tracks history for the `certification_status` field"""
  certification_status_history: FieldHistoryString

  """Certification Status."""
  certification_status: String

  """Certification User."""
  certification_user: Int

  """Contacts for certification project."""
  contacts: [CertProjectContacts]
  container: CertProjectContainer

  """Configuration specific to Helm Chart projects."""
  helm_chart: CertProjectHelmChart
  marketplace: CertProjectMarketplace

  """The owner provided name of the certification project."""
  name: String
  non_container: CertProjectNonContainer

  """Operator Distribution."""
  operator_distribution: String

  """Configuration specific to OpenStack projects."""
  openstack: CertProjectOpenStack

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """Unique identifier for the product listing."""
  product_listings: [ObjectID]

  """Status of the certification project."""
  project_status: String

  """Who published the certification project."""
  published_by: String
  redhat: CertProjectRedhat
  self_certification: CertProjectSelfCertification

  """Special certifications specific to the certification platform"""
  badges: [String]

  """Certification project type."""
  type: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """SSO username from the JWT - who created the entry or null if no JWT."""
  created_on_behalf_of: String

  """SSO username from the JWT - who updated the entry or null if no JWT."""
  updated_on_behalf_of: String
  edges: CertificationProjectEdges
}

type CertificationProjectEdges {
  """Get a vendor by Company Org ID."""
  vendor(org_id: Int): ContainerVendorResponse

  """Get product listings for certification project using its ID."""
  product_listings(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get container image by ID of associated certification project."""
  images(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse
}

input CertificationProjectFilter {
  certification_date: DateTimeFilter
  certification_level_history: FieldHistoryStringFilter
  certification_level: StringFilter
  certification_status_history: FieldHistoryStringFilter
  certification_status: StringFilter
  certification_user: IntFilter
  contacts_size: IntFilter
  contacts_elemMatch: CertProjectContactsElemMatchFilter
  contacts: CertProjectContactsListFilter
  container: CertProjectContainerFilter
  helm_chart: CertProjectHelmChartFilter
  marketplace: CertProjectMarketplaceFilter
  name: StringFilter
  non_container: CertProjectNonContainerFilter
  operator_distribution: StringFilter
  openstack: CertProjectOpenStackFilter
  org_id: IntFilter
  product_listings_size: IntFilter
  product_listings: ObjectIDListFilter
  project_status: StringFilter
  published_by: StringFilter
  redhat: CertProjectRedhatFilter
  self_certification: CertProjectSelfCertificationFilter
  badges_size: IntFilter
  badges: StringListFilter
  type: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  created_on_behalf_of: StringFilter
  updated_on_behalf_of: StringFilter
  eq: NULL
  ne: NULL
  and: [CertificationProjectFilter]
  or: [CertificationProjectFilter]
  nor: [CertificationProjectFilter]
  not: CertificationProjectFilter
}

"""Contain Certification project data."""
input CertificationProjectInput {
  """
  Value is derived from last_update_date field during when the certification
  project is published. Before it or if project is again unpublished, the value is null.
  """
  certification_date: DateTime

  """Tracks history for the `certification_level` field"""
  certification_level_history: FieldHistoryStringInput

  """
  The certification project can be certified on several levels. This field
  determines whether the content was certified by ISV partner who followed
  official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """Tracks history for the `certification_status` field"""
  certification_status_history: FieldHistoryStringInput

  """Certification Status."""
  certification_status: String

  """Certification User."""
  certification_user: Int

  """Contacts for certification project."""
  contacts: [CertProjectContactsInput]
  container: CertProjectContainerInput

  """Configuration specific to Helm Chart projects."""
  helm_chart: CertProjectHelmChartInput
  marketplace: CertProjectMarketplaceInput

  """The owner provided name of the certification project."""
  name: String
  non_container: CertProjectNonContainerInput

  """Operator Distribution."""
  operator_distribution: String

  """Configuration specific to OpenStack projects."""
  openstack: CertProjectOpenStackInput

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """Unique identifier for the product listing."""
  product_listings: [ObjectID]

  """Status of the certification project."""
  project_status: String

  """Who published the certification project."""
  published_by: String
  redhat: CertProjectRedhatInput
  self_certification: CertProjectSelfCertificationInput

  """Special certifications specific to the certification platform"""
  badges: [String]

  """Certification project type."""
  type: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """SSO username from the JWT - who created the entry or null if no JWT."""
  created_on_behalf_of: String

  """SSO username from the JWT - who updated the entry or null if no JWT."""
  updated_on_behalf_of: String
}

type CertificationProjectPaginatedResponse {
  data: [CertificationProject]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type CertificationProjectResponse {
  data: CertificationProject
  error: ResponseError
}

"""
Contains the logs from the preflight test results from operator pipelines project
"""
type CertProjectArtifact {
  """Cert Project Identifier."""
  cert_project: ObjectID

  """Content version."""
  version: String

  """The operator package name of the cert project artifact."""
  operator_package_name: String

  """The cert project hashed content."""
  certification_hash: String

  """Identifier of container image collection."""
  image_id: ObjectID

  """Base64 encoded the cert project artifact content."""
  content: Base64EncodedString

  """The content type associated with the content type."""
  content_type: String

  """The file name associated with the content test results."""
  filename: String

  """File size in bytes."""
  file_size: Int64

  """URL to the Github pull request associated with with cert project."""
  pull_request_url: URI

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
  edges: CertProjectArtifactEdges
}

type CertProjectArtifactEdges {
  """Get certification project using its ID."""
  cert_project(id: ObjectIDFilterScalar): CertificationProjectResponse

  """Get container image by ID."""
  container_image(id: ObjectIDFilterScalar): ContainerImageResponse
}

input CertProjectArtifactFilter {
  cert_project: ObjectIDFilter
  version: StringFilter
  operator_package_name: StringFilter
  certification_hash: StringFilter
  image_id: ObjectIDFilter
  content: StringFilter
  content_type: StringFilter
  filename: StringFilter
  file_size: Int64Filter
  pull_request_url: URIFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  eq: NULL
  ne: NULL
  and: [CertProjectArtifactFilter]
  or: [CertProjectArtifactFilter]
  nor: [CertProjectArtifactFilter]
  not: CertProjectArtifactFilter
}

"""
Contains the logs from the preflight test results from operator pipelines project
"""
input CertProjectArtifactInput {
  """Cert Project Identifier."""
  cert_project: ObjectID

  """Content version."""
  version: String

  """The operator package name of the cert project artifact."""
  operator_package_name: String

  """The cert project hashed content."""
  certification_hash: String

  """Identifier of container image collection."""
  image_id: ObjectID

  """Base64 encoded the cert project artifact content."""
  content: Base64EncodedString

  """The content type associated with the content type."""
  content_type: String

  """The file name associated with the content test results."""
  filename: String

  """File size in bytes."""
  file_size: Int64

  """URL to the Github pull request associated with with cert project."""
  pull_request_url: URI

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
}

type CertProjectArtifactPaginatedResponse {
  data: [CertProjectArtifact]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type CertProjectArtifactResponse {
  data: CertProjectArtifact
  error: ResponseError
}

"""Contact info."""
type CertProjectContacts {
  email_address: Email
  type: String
}

input CertProjectContactsElemMatchFilter {
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

input CertProjectContactsFilter {
  email_address: EmailFilter
  type: StringFilter
  eq: NULL
  ne: NULL
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

"""Contact info."""
input CertProjectContactsInput {
  email_address: Email
  type: String
}

input CertProjectContactsListFilter {
  list_index_filter: CertProjectContactsListIndexFilter
  email_address: EmailFilter
  type: StringFilter
  eq: NULL
  ne: NULL
  and: [CertProjectContactsFilter]
  or: [CertProjectContactsFilter]
  nor: [CertProjectContactsFilter]
  not: CertProjectContactsFilter
}

input CertProjectContactsListIndexFilter {
  condition: CertProjectContactsFilter
  index: Int
}

"""Container related information."""
type CertProjectContainer {
  """
  Indicates if the registry is air-gapped and its tags should not be synced.
  """
  airgap_registry: Boolean

  """The application categories (types)."""
  application_categories: [String]

  """Once a container is certified it is automatically published."""
  auto_publish: Boolean

  """
  This value of this field is related to certProject.type field. See ISV-2012.
  """
  build_categories: String

  """Distribution approval obtained."""
  distribution_approval: Boolean

  """Distribution method."""
  distribution_method: String

  """ID of the project in for ISV repositories."""
  isv_pid: String

  """
  Kubernetes objects for operator registry projects. Value has to be a valid YAML.
  """
  kube_objects: OpenPGPEncrypted

  """
  Docker config for operator registry projects. Value has to be a valid JSON.
  """
  docker_config_json: OpenPGPEncrypted

  """OS Content Type."""
  os_content_type: String

  """Passed RH Cert."""
  passed_rhcert: Boolean

  """A container needs to run in a privileged state."""
  privileged: Boolean

  """Flag that indicates that project is using Red Hat hosted registry."""
  hosted_registry: Boolean

  """
  Hostname of the registry where the repository can be accessed.
  Examples: registry.company.com assumes the default port, 443.
  registry.company.com:5000 repository path with optional port specified.
  It is only applicable for projects with an 'external' distribution method.
  """
  registry: String
  registry_credentials: RegistryCredentials

  """
  Note: These instructions will be displayed in the Red Hat Container Catalog as
  is. Please modify the following template as it suits your needs.
  """
  registry_override_instruct: String

  """Release category."""
  release_category: String

  """
  Path to the container repository as found in the registry.
  
  Examples:
  path/to/repository
  repository
  
  This field can only be edited when there are no published containers.
  It is only applicable for projects with an 'external' distribution method.
  """
  repository: String

  """
  The repository description is displayed on the container
  catalog repository overview page.
  """
  repository_description: String

  """
  This should represent your product (or the component if your product consists of multiple containers)
  and a major version. For example, you could use names like jboss-server7, or agent5.
  
  This value is only editable when there are no published containers in this project.
  It is only applicable for projects that do not have the 'external' distribution method.
  """
  repository_name: String

  """Short description of the container."""
  short_description: String

  """Supported Platforms."""
  support_platforms: [String] @deprecated(reason: "The field was deprecated since the Catalog is no longer displaying this information to users.")

  """
  Container type.
  Field is required, if project type is 'Container', and the field is immutable for Partners after creation.
  """
  type: String

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
  edges: CertProjectContainerEdges
}

type CertProjectContainerEdges {
  """Get a repository by registry and path (product line/image name)."""
  repository(registry: String, repository: String): ContainerRepositoryResponse
}

input CertProjectContainerFilter {
  airgap_registry: BooleanFilter
  application_categories_size: IntFilter
  application_categories: StringListFilter
  auto_publish: BooleanFilter
  build_categories: StringFilter
  distribution_approval: BooleanFilter
  distribution_method: StringFilter
  isv_pid: StringFilter
  kube_objects: StringFilter
  docker_config_json: StringFilter
  os_content_type: StringFilter
  passed_rhcert: BooleanFilter
  privileged: BooleanFilter
  hosted_registry: BooleanFilter
  registry: StringFilter
  registry_credentials: RegistryCredentialsFilter
  registry_override_instruct: StringFilter
  release_category: StringFilter
  repository: StringFilter
  repository_description: StringFilter
  repository_name: StringFilter
  short_description: StringFilter
  support_platforms_size: IntFilter
  support_platforms: StringListFilter
  type: StringFilter
  github_usernames_size: IntFilter
  github_usernames: StringListFilter
  eq: NULL
  ne: NULL
  and: [CertProjectContainerFilter]
  or: [CertProjectContainerFilter]
  nor: [CertProjectContainerFilter]
  not: CertProjectContainerFilter
}

"""Container related information."""
input CertProjectContainerInput {
  """
  Indicates if the registry is air-gapped and its tags should not be synced.
  """
  airgap_registry: Boolean

  """The application categories (types)."""
  application_categories: [String]

  """Once a container is certified it is automatically published."""
  auto_publish: Boolean

  """
  This value of this field is related to certProject.type field. See ISV-2012.
  """
  build_categories: String

  """Distribution approval obtained."""
  distribution_approval: Boolean

  """Distribution method."""
  distribution_method: String

  """ID of the project in for ISV repositories."""
  isv_pid: String

  """
  Kubernetes objects for operator registry projects. Value has to be a valid YAML.
  """
  kube_objects: OpenPGPEncrypted

  """
  Docker config for operator registry projects. Value has to be a valid JSON.
  """
  docker_config_json: OpenPGPEncrypted

  """OS Content Type."""
  os_content_type: String

  """Passed RH Cert."""
  passed_rhcert: Boolean

  """A container needs to run in a privileged state."""
  privileged: Boolean

  """Flag that indicates that project is using Red Hat hosted registry."""
  hosted_registry: Boolean

  """
  Hostname of the registry where the repository can be accessed.
  Examples: registry.company.com assumes the default port, 443.
  registry.company.com:5000 repository path with optional port specified.
  It is only applicable for projects with an 'external' distribution method.
  """
  registry: String
  registry_credentials: RegistryCredentialsInput

  """
  Note: These instructions will be displayed in the Red Hat Container Catalog as
  is. Please modify the following template as it suits your needs.
  """
  registry_override_instruct: String

  """Release category."""
  release_category: String

  """
  Path to the container repository as found in the registry.
  
  Examples:
  path/to/repository
  repository
  
  This field can only be edited when there are no published containers.
  It is only applicable for projects with an 'external' distribution method.
  """
  repository: String

  """
  The repository description is displayed on the container
  catalog repository overview page.
  """
  repository_description: String

  """
  This should represent your product (or the component if your product consists of multiple containers)
  and a major version. For example, you could use names like jboss-server7, or agent5.
  
  This value is only editable when there are no published containers in this project.
  It is only applicable for projects that do not have the 'external' distribution method.
  """
  repository_name: String

  """Short description of the container."""
  short_description: String

  """
  Container type.
  Field is required, if project type is 'Container', and the field is immutable for Partners after creation.
  """
  type: String

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
}

"""Helm chart related information."""
type CertProjectHelmChart {
  """How your Helm Chart is distributed."""
  distribution_method: String

  """The Helm Chart name as it will appear in GitHub."""
  chart_name: String

  """
  URL to the externally distributed Helm Chart repository. This is not used if the chart is distributed via Red Hat.
  """
  repository: URI

  """Instructions for users to access an externally distributed Helm Chart."""
  distribution_instructions: String

  """Base64 encoded PGP public key. Used to sign result submissions."""
  public_pgp_key: Base64EncodedString

  """URL to the user submitted github pull request for this project."""
  github_pull_request: URI

  """Short description of the Helm Chart."""
  short_description: String

  """Long description of the Helm Chart."""
  long_description: String

  """The application categories (types)."""
  application_categories: [String]

  """OCP versions for this Helm Chart."""
  ocp_versions: [String]

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
}

input CertProjectHelmChartFilter {
  distribution_method: StringFilter
  chart_name: StringFilter
  repository: URIFilter
  distribution_instructions: StringFilter
  public_pgp_key: StringFilter
  github_pull_request: URIFilter
  short_description: StringFilter
  long_description: StringFilter
  application_categories_size: IntFilter
  application_categories: StringListFilter
  ocp_versions_size: IntFilter
  ocp_versions: StringListFilter
  github_usernames_size: IntFilter
  github_usernames: StringListFilter
  eq: NULL
  ne: NULL
  and: [CertProjectHelmChartFilter]
  or: [CertProjectHelmChartFilter]
  nor: [CertProjectHelmChartFilter]
  not: CertProjectHelmChartFilter
}

"""Helm chart related information."""
input CertProjectHelmChartInput {
  """How your Helm Chart is distributed."""
  distribution_method: String

  """The Helm Chart name as it will appear in GitHub."""
  chart_name: String

  """
  URL to the externally distributed Helm Chart repository. This is not used if the chart is distributed via Red Hat.
  """
  repository: URI

  """Instructions for users to access an externally distributed Helm Chart."""
  distribution_instructions: String

  """Base64 encoded PGP public key. Used to sign result submissions."""
  public_pgp_key: Base64EncodedString

  """URL to the user submitted github pull request for this project."""
  github_pull_request: URI

  """Short description of the Helm Chart."""
  short_description: String

  """Long description of the Helm Chart."""
  long_description: String

  """The application categories (types)."""
  application_categories: [String]

  """OCP versions for this Helm Chart."""
  ocp_versions: [String]

  """GitHub users authorized to submit a certification pull request."""
  github_usernames: [String]
}

"""Contain status and related metadata of a certProject image request."""
type CertProjectImageRequest {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """
  Container image id associated with the image request. When defined, manifest_list_digest is forbidden.
  """
  image_id: ObjectID

  """Images referenced by the manifest_list_digest."""
  images: [SingleArchImage]

  """
  Manifest list digest for multi-arch images. When defined, image_id is forbidden.
  """
  manifest_list_digest: String

  """
  Operation performed during the image request. Operations containing
  'manifest-list' can be performed only when manifest_list_digest is defined.
  Other operations can be combined only with image_id.
  """
  operation: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """The request status"""
  status: String

  """An explanatory message to a request status."""
  status_message: String
  edges: CertProjectImageRequestEdges
}

type CertProjectImageRequestEdges {
  """Get certification project using its ID."""
  cert_project(id: ObjectIDFilterScalar): CertificationProjectResponse

  """Get container image by ID."""
  image(id: ObjectIDFilterScalar): ContainerImageResponse
}

input CertProjectImageRequestFilter {
  cert_project: ObjectIDFilter
  image_id: ObjectIDFilter
  images_size: IntFilter
  images_elemMatch: SingleArchImageElemMatchFilter
  images: SingleArchImageListFilter
  manifest_list_digest: StringFilter
  operation: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  status: StringFilter
  status_message: StringFilter
  eq: NULL
  ne: NULL
  and: [CertProjectImageRequestFilter]
  or: [CertProjectImageRequestFilter]
  nor: [CertProjectImageRequestFilter]
  not: CertProjectImageRequestFilter
}

"""Contain status and related metadata of a certProject image request."""
input CertProjectImageRequestInput {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """
  Container image id associated with the image request. When defined, manifest_list_digest is forbidden.
  """
  image_id: ObjectID

  """Images referenced by the manifest_list_digest."""
  images: [SingleArchImageInput]

  """
  Manifest list digest for multi-arch images. When defined, image_id is forbidden.
  """
  manifest_list_digest: String

  """
  Operation performed during the image request. Operations containing
  'manifest-list' can be performed only when manifest_list_digest is defined.
  Other operations can be combined only with image_id.
  """
  operation: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """The request status"""
  status: String

  """An explanatory message to a request status."""
  status_message: String
}

type CertProjectImageRequestPaginatedResponse {
  data: [CertProjectImageRequest]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type CertProjectImageRequestResponse {
  data: CertProjectImageRequest
  error: ResponseError
}

"""Marketplace related information."""
type CertProjectMarketplace {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

input CertProjectMarketplaceFilter {
  enablement_status: StringFilter
  enablement_url: URIFilter
  listing_url: URIFilter
  published: BooleanFilter
  eq: NULL
  ne: NULL
  and: [CertProjectMarketplaceFilter]
  or: [CertProjectMarketplaceFilter]
  nor: [CertProjectMarketplaceFilter]
  not: CertProjectMarketplaceFilter
}

"""Marketplace related information."""
input CertProjectMarketplaceInput {
  enablement_status: String
  enablement_url: URI
  listing_url: URI
  published: Boolean
}

"""Non-container project info."""
type CertProjectNonContainer {
  source_system_id: String
}

input CertProjectNonContainerFilter {
  source_system_id: StringFilter
  eq: NULL
  ne: NULL
  and: [CertProjectNonContainerFilter]
  or: [CertProjectNonContainerFilter]
  nor: [CertProjectNonContainerFilter]
  not: CertProjectNonContainerFilter
}

"""Non-container project info."""
input CertProjectNonContainerInput {
  source_system_id: String
}

"""OpenStack related information."""
type CertProjectOpenStack {
  """OpenStack service type for test suite selection"""
  service: String
}

input CertProjectOpenStackFilter {
  service: StringFilter
  eq: NULL
  ne: NULL
  and: [CertProjectOpenStackFilter]
  or: [CertProjectOpenStackFilter]
  nor: [CertProjectOpenStackFilter]
  not: CertProjectOpenStackFilter
}

"""OpenStack related information."""
input CertProjectOpenStackInput {
  """OpenStack service type for test suite selection"""
  service: String
}

"""Red Hat projects related information."""
type CertProjectRedhat {
  """Red Hat Product ID."""
  product_id: Int

  """Red Hat product name."""
  product_name: String

  """Red Hat Product Version."""
  product_version: String

  """Red Hat Product Version."""
  product_version_id: Int
}

input CertProjectRedhatFilter {
  product_id: IntFilter
  product_name: StringFilter
  product_version: StringFilter
  product_version_id: IntFilter
  eq: NULL
  ne: NULL
  and: [CertProjectRedhatFilter]
  or: [CertProjectRedhatFilter]
  nor: [CertProjectRedhatFilter]
  not: CertProjectRedhatFilter
}

"""Red Hat projects related information."""
input CertProjectRedhatInput {
  """Red Hat Product ID."""
  product_id: Int

  """Red Hat product name."""
  product_name: String

  """Red Hat Product Version."""
  product_version: String

  """Red Hat Product Version."""
  product_version_id: Int
}

"""Red Hat projects related information."""
type CertProjectSelfCertification {
  """Application Profiler."""
  app_profiler: Boolean

  """Application Runs on App Type."""
  app_runs_on_app_type: Boolean

  """Whether the Self Certification Evidence URL requires a customer login."""
  auth_login: Boolean

  """Self Certification Evidence URL."""
  certification_url: URI

  """Can Commercially Support on App Type."""
  comm_support_on_app_type: Boolean

  """Self Certification Requested."""
  requested: Boolean

  """TsaNET Member."""
  tsanet_member: Boolean
}

input CertProjectSelfCertificationFilter {
  app_profiler: BooleanFilter
  app_runs_on_app_type: BooleanFilter
  auth_login: BooleanFilter
  certification_url: URIFilter
  comm_support_on_app_type: BooleanFilter
  requested: BooleanFilter
  tsanet_member: BooleanFilter
  eq: NULL
  ne: NULL
  and: [CertProjectSelfCertificationFilter]
  or: [CertProjectSelfCertificationFilter]
  nor: [CertProjectSelfCertificationFilter]
  not: CertProjectSelfCertificationFilter
}

"""Red Hat projects related information."""
input CertProjectSelfCertificationInput {
  """Application Profiler."""
  app_profiler: Boolean

  """Application Runs on App Type."""
  app_runs_on_app_type: Boolean

  """Whether the Self Certification Evidence URL requires a customer login."""
  auth_login: Boolean

  """Self Certification Evidence URL."""
  certification_url: URI

  """Can Commercially Support on App Type."""
  comm_support_on_app_type: Boolean

  """Self Certification Requested."""
  requested: Boolean

  """TsaNET Member."""
  tsanet_member: Boolean
}

"""Contain certification test results of related certProject"""
type CertProjectTestResult {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """Hashed content for the certification project."""
  certification_hash: String

  """Image associated with the test result."""
  image: String

  """Operator package name associated with the test result."""
  operator_package_name: String

  """Whether or not the test has passed overall."""
  passed: Boolean

  """Identifier of container image collection."""
  image_id: ObjectID

  """The test results stored in lists based on result status."""
  results: Results

  """The test library of the test result."""
  test_library: TestLibrary

  """Version associated with the content tested."""
  version: String

  """Pull request of certification test results"""
  pull_request: PullRequest

  """A platform where tests were executed."""
  tested_on: TestedOn

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
  edges: CertProjectTestResultEdges
}

type CertProjectTestResultEdges {
  """Get certification project using its ID."""
  cert_project(id: ObjectIDFilterScalar): CertificationProjectResponse

  """Get container image by ID."""
  container_image(id: ObjectIDFilterScalar): ContainerImageResponse
}

input CertProjectTestResultFilter {
  cert_project: ObjectIDFilter
  certification_hash: StringFilter
  image: StringFilter
  operator_package_name: StringFilter
  passed: BooleanFilter
  image_id: ObjectIDFilter
  results: ResultsFilter
  test_library: TestLibraryFilter
  version: StringFilter
  pull_request: PullRequestFilter
  tested_on: TestedOnFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  eq: NULL
  ne: NULL
  and: [CertProjectTestResultFilter]
  or: [CertProjectTestResultFilter]
  nor: [CertProjectTestResultFilter]
  not: CertProjectTestResultFilter
}

"""Contain certification test results of related certProject"""
input CertProjectTestResultInput {
  """Unique identifier for the certification project."""
  cert_project: ObjectID

  """Hashed content for the certification project."""
  certification_hash: String

  """Image associated with the test result."""
  image: String

  """Operator package name associated with the test result."""
  operator_package_name: String

  """Whether or not the test has passed overall."""
  passed: Boolean

  """Identifier of container image collection."""
  image_id: ObjectID

  """The test results stored in lists based on result status."""
  results: ResultsInput

  """The test library of the test result."""
  test_library: TestLibraryInput

  """Version associated with the content tested."""
  version: String

  """Pull request of certification test results"""
  pull_request: PullRequestInput

  """A platform where tests were executed."""
  tested_on: TestedOnInput

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
}

type CertProjectTestResultPaginatedResponse {
  data: [CertProjectTestResult]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type CertProjectTestResultResponse {
  data: CertProjectTestResult
  error: ResponseError
}

type ContactsItems {
  email_address: Email
  type: String
}

input ContactsItemsElemMatchFilter {
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input ContactsItemsFilter {
  email_address: EmailFilter
  type: StringFilter
  eq: NULL
  ne: NULL
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input ContactsItemsInput {
  email_address: Email
  type: String
}

input ContactsItemsListFilter {
  list_index_filter: ContactsItemsListIndexFilter
  email_address: EmailFilter
  type: StringFilter
  eq: NULL
  ne: NULL
  and: [ContactsItemsFilter]
  or: [ContactsItemsFilter]
  nor: [ContactsItemsFilter]
  not: ContactsItemsFilter
}

input ContactsItemsListIndexFilter {
  condition: ContactsItemsFilter
  index: Int
}

type ContainerFile {
  filename: String
  content: String
  key: String
}

input ContainerFileFilter {
  filename: StringFilter
  content: StringFilter
  key: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerFileFilter]
  or: [ContainerFileFilter]
  nor: [ContainerFileFilter]
  not: ContainerFileFilter
}

type ContainerFilePaginatedResponse {
  data: [ContainerFile]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""
Grades are describing security risk with containers that Red Hat provides through the Red Hat Ecosystem Catalog.
"""
type ContainerGrades {
  """Image architecture."""
  architecture: String

  """
  Current image security grade based on current date and grading schedule.
  """
  current_grade: String

  """
  the grade based on applicable updates and time provided by PST CVE engine.
  """
  freshness_grades: [FreshnessGrade]

  """Unique identifier for image."""
  image_id: String

  """A date when current grade drops."""
  next_drop_date: DateTime

  """Name of floating tag associated with the image."""
  tag: String
  edges: ContainerGradesEdges
}

type ContainerGradesEdges {
  """Get container image by ID."""
  image(id: ObjectIDFilterScalar): ContainerImageResponse
}

type ContainerGradesListResponse {
  data: [ContainerGrades]
  error: ResponseError
}

"""Information about the state of grading of particular image."""
type ContainerGrading {
  """The request status"""
  status: String

  """An explanatory message to a request status."""
  status_message: String

  """Indication that check is ignored or not during a publication process"""
  exception_approved: Boolean

  """Description and reference to a Jira ticket with an approved exception"""
  exception_approved_description: String
}

input ContainerGradingFilter {
  status: StringFilter
  status_message: StringFilter
  exception_approved: BooleanFilter
  exception_approved_description: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerGradingFilter]
  or: [ContainerGradingFilter]
  nor: [ContainerGradingFilter]
  not: ContainerGradingFilter
}

"""Information about the state of grading of particular image."""
input ContainerGradingInput {
  """The request status"""
  status: String

  """An explanatory message to a request status."""
  status_message: String

  """Indication that check is ignored or not during a publication process"""
  exception_approved: Boolean

  """Description and reference to a Jira ticket with an approved exception"""
  exception_approved_description: String
}

"""Metadata about images contained in RedHat and ISV repositories"""
type ContainerImage {
  """
  The field contains an architecture for which the container image was built
  for. Value is used to distinguish between the default x86-64 architecture and
  other architectures. If the value is not set, the image was built for the
  x86-64 architecture.
  """
  architecture: String

  """Brew related metadata."""
  brew: Brew

  """
  Indication that image was created by the CPaaS managed service pipeline.
  """
  cloud_service: Boolean

  """Information about the state of grading of particular image."""
  container_grades: ContainerGrading

  """
  A list of all content sets (YUM repositories) from where an image RPM content is.
  """
  content_sets: [String]

  """
  A mapping of applicable advisories to RPM NEVRA. This data is required for scoring.
  """
  cpe_ids: [String]

  """
  A mapping of applicable advisories for the base_images from the Red Hat repositories.
  """
  cpe_ids_rh_base_images: [String]

  """
  Docker Image Digest. For Docker 1.10+ this is also known as the 'manifest digest'.
  """
  docker_image_digest: String

  """
  Docker Image ID. For Docker 1.10+ this is also known as the 'config digest'.
  """
  docker_image_id: String

  """
  The grade based on applicable updates and time provided by PST CVE engine.
  """
  freshness_grades: [FreshnessGrade]
  object_type: String

  """
  Data parsed from image metadata.
  These fields are not computed from any other source.
  """
  parsed_data: ParsedData

  """Published repositories associated with the container image."""
  repositories: [ContainerImageRepo]

  """Indication if the image was certified."""
  certified: Boolean

  """
  Information if there is an existing exception for the test_results, given by
  certOps resulting in successful certification.
  """
  test_results_exception: ContainerImageTestException

  """
  Indicates that an image was removed. Only unpublished images can be removed.
  """
  deleted: Boolean

  """
  Image manifest digest.
  Be careful, as this value is not unique among container image entries, as one image can be references several times.
  """
  image_id: String

  """
  ID of the project in for ISV repositories. The ID can be also used to connect vendor to the image.
  """
  isv_pid: String

  """
  The total size of the sum of all layers for each image in bytes. This is
  computed externally and may not match what is reported by the image metadata
  (see parsed_data.size).
  """
  sum_layer_size_bytes: Int64

  """Field for multiarch primary key"""
  top_layer_id: String

  """
  Hash (sha256) of the uncompressed top layer for this image (should be same
  value as - parsed_data.uncompressed_layer_sizes.0.layer_id)
  """
  uncompressed_top_layer_id: String

  """Raw image configuration, such as output from docker inspect."""
  raw_config: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
  edges: ContainerImageEdges
}

type ContainerImageEdges {
  """Get the RPM manifest for an image"""
  rpm_manifest(id: String): ContainerImageRPMManifestResponse

  """
  Get a list of image vulnerabilities associated with an image. Exclude total for improved performance.
  """
  vulnerabilities(id: String, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerImageVulnerabilityFilter): ContainerImageVulnerabilityPaginatedResponse

  """Get test results by container image id"""
  test_results(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectTestResultFilter): CertProjectTestResultPaginatedResponse

  """Get artifacts by container image id"""
  artifacts(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectArtifactFilter): CertProjectArtifactPaginatedResponse

  """Get image requests using its image id."""
  requests(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: CertProjectImageRequestFilter): CertProjectImageRequestPaginatedResponse

  """Get certification project using Red Hat Connect project ID."""
  cert_project(pid: String): CertificationProjectResponse
}

input ContainerImageFilter {
  architecture: StringFilter
  brew: BrewFilter
  cloud_service: BooleanFilter
  container_grades: ContainerGradingFilter
  content_sets_size: IntFilter
  content_sets: StringListFilter
  cpe_ids_size: IntFilter
  cpe_ids: StringListFilter
  cpe_ids_rh_base_images_size: IntFilter
  cpe_ids_rh_base_images: StringListFilter
  docker_image_digest: StringFilter
  docker_image_id: StringFilter
  freshness_grades_size: IntFilter
  freshness_grades_elemMatch: FreshnessGradeElemMatchFilter
  freshness_grades: FreshnessGradeListFilter
  object_type: StringFilter
  parsed_data: ParsedDataFilter
  repositories_size: IntFilter
  repositories_elemMatch: ContainerImageRepoElemMatchFilter
  repositories: ContainerImageRepoListFilter
  certified: BooleanFilter
  test_results_exception: ContainerImageTestExceptionFilter
  deleted: BooleanFilter
  image_id: StringFilter
  isv_pid: StringFilter
  sum_layer_size_bytes: Int64Filter
  top_layer_id: StringFilter
  uncompressed_top_layer_id: StringFilter
  raw_config: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  org_id: IntFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageFilter]
  or: [ContainerImageFilter]
  nor: [ContainerImageFilter]
  not: ContainerImageFilter
}

"""Metadata about images contained in RedHat and ISV repositories"""
input ContainerImageInput {
  """
  The field contains an architecture for which the container image was built
  for. Value is used to distinguish between the default x86-64 architecture and
  other architectures. If the value is not set, the image was built for the
  x86-64 architecture.
  """
  architecture: String

  """Brew related metadata."""
  brew: BrewInput

  """
  Indication that image was created by the CPaaS managed service pipeline.
  """
  cloud_service: Boolean

  """Information about the state of grading of particular image."""
  container_grades: ContainerGradingInput

  """
  A list of all content sets (YUM repositories) from where an image RPM content is.
  """
  content_sets: [String]

  """
  A mapping of applicable advisories to RPM NEVRA. This data is required for scoring.
  """
  cpe_ids: [String]

  """
  A mapping of applicable advisories for the base_images from the Red Hat repositories.
  """
  cpe_ids_rh_base_images: [String]

  """
  Docker Image Digest. For Docker 1.10+ this is also known as the 'manifest digest'.
  """
  docker_image_digest: String

  """
  Docker Image ID. For Docker 1.10+ this is also known as the 'config digest'.
  """
  docker_image_id: String

  """
  The grade based on applicable updates and time provided by PST CVE engine.
  """
  freshness_grades: [FreshnessGradeInput]
  object_type: String

  """
  Data parsed from image metadata.
  These fields are not computed from any other source.
  """
  parsed_data: ParsedDataInput

  """Published repositories associated with the container image."""
  repositories: [ContainerImageRepoInput]

  """Indication if the image was certified."""
  certified: Boolean

  """
  Information if there is an existing exception for the test_results, given by
  certOps resulting in successful certification.
  """
  test_results_exception: ContainerImageTestExceptionInput

  """
  Indicates that an image was removed. Only unpublished images can be removed.
  """
  deleted: Boolean

  """
  Image manifest digest.
  Be careful, as this value is not unique among container image entries, as one image can be references several times.
  """
  image_id: String

  """
  ID of the project in for ISV repositories. The ID can be also used to connect vendor to the image.
  """
  isv_pid: String

  """
  The total size of the sum of all layers for each image in bytes. This is
  computed externally and may not match what is reported by the image metadata
  (see parsed_data.size).
  """
  sum_layer_size_bytes: Int64

  """Field for multiarch primary key"""
  top_layer_id: String

  """
  Hash (sha256) of the uncompressed top layer for this image (should be same
  value as - parsed_data.uncompressed_layer_sizes.0.layer_id)
  """
  uncompressed_top_layer_id: String

  """Raw image configuration, such as output from docker inspect."""
  raw_config: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int
}

"""List of container images per manifest list digest"""
type ContainerImageManifestDigest {
  """Manifest list digest for multiarch images."""
  manifest_list_digest: String

  """List of images for given manifest list digest."""
  images: [ContainerImage]
}

type ContainerImageManifestDigestPaginatedResponse {
  data: [ContainerImageManifestDigest]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ContainerImagePaginatedResponse {
  data: [ContainerImage]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ContainerImageRepo {
  """Store information about image comparison."""
  comparison: ContainerImageRepoComparison

  """
  The _id's of the redHatContainerAdvisory that contains the content advisories.
  """
  content_advisory_ids: [String]

  """
  The _id of the redHatContainerAdvisory that contains the image advisory.
  """
  image_advisory_id: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String

  """Indicate if the image has been published to the container catalog."""
  published: Boolean

  """Date the image was published to the container catalog."""
  published_date: DateTime

  """
  When the image was pushed to this repository. For RH images this is picked
  from first found of advisory ship_date, brew completion_date, and finally
  repositories publish_date. For ISV images this replicates value of
  published_date.
  """
  push_date: DateTime

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """Image signing info."""
  signatures: [SignatureInfo]

  """List of container tags assigned to this layer."""
  tags: [ContainerImageRepoTag]
  edges: ContainerImageRepoEdges
}

type ContainerImageRepoComparison {
  """Mapping of a NVRA to multiple advisories IDs."""
  advisory_rpm_mapping: [ContainerImageRepoComparisonMapping]

  """Reason why 'with_nvr' is or is not null."""
  reason: String

  """Human readable reason."""
  reason_text: String

  """List of rpms grouped by category (new, remove, upgrade, downgrade)."""
  rpms: ContainerImageRepoComparisonRPMs

  """NVR of image which this image was compared with."""
  with_nvr: String
}

input ContainerImageRepoComparisonFilter {
  advisory_rpm_mapping_size: IntFilter
  advisory_rpm_mapping_elemMatch: ContainerImageRepoComparisonMappingElemMatchFilter
  advisory_rpm_mapping: ContainerImageRepoComparisonMappingListFilter
  reason: StringFilter
  reason_text: StringFilter
  rpms: ContainerImageRepoComparisonRPMsFilter
  with_nvr: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoComparisonFilter]
  or: [ContainerImageRepoComparisonFilter]
  nor: [ContainerImageRepoComparisonFilter]
  not: ContainerImageRepoComparisonFilter
}

input ContainerImageRepoComparisonInput {
  """Mapping of a NVRA to multiple advisories IDs."""
  advisory_rpm_mapping: [ContainerImageRepoComparisonMappingInput]

  """Reason why 'with_nvr' is or is not null."""
  reason: String

  """Human readable reason."""
  reason_text: String

  """List of rpms grouped by category (new, remove, upgrade, downgrade)."""
  rpms: ContainerImageRepoComparisonRPMsInput

  """NVR of image which this image was compared with."""
  with_nvr: String
}

type ContainerImageRepoComparisonMapping {
  """Content advisory ID."""
  advisory_ids: [String]

  """NVRA of the RPM related to advisories."""
  nvra: String
}

input ContainerImageRepoComparisonMappingElemMatchFilter {
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonMappingFilter {
  advisory_ids_size: IntFilter
  advisory_ids: StringListFilter
  nvra: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonMappingInput {
  """Content advisory ID."""
  advisory_ids: [String]

  """NVRA of the RPM related to advisories."""
  nvra: String
}

input ContainerImageRepoComparisonMappingListFilter {
  list_index_filter: ContainerImageRepoComparisonMappingListIndexFilter
  advisory_ids_size: IntFilter
  advisory_ids: StringListFilter
  nvra: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoComparisonMappingFilter]
  or: [ContainerImageRepoComparisonMappingFilter]
  nor: [ContainerImageRepoComparisonMappingFilter]
  not: ContainerImageRepoComparisonMappingFilter
}

input ContainerImageRepoComparisonMappingListIndexFilter {
  condition: ContainerImageRepoComparisonMappingFilter
  index: Int
}

type ContainerImageRepoComparisonRPMs {
  """List of NVRA which were downgraded in this image."""
  downgrade: [String]

  """List of NVRA which were added to this image."""
  new: [String]

  """List of NVRA which were removed in this image."""
  remove: [String]

  """List of NVRA which were upgraded in this image."""
  upgrade: [String]
}

input ContainerImageRepoComparisonRPMsFilter {
  downgrade_size: IntFilter
  downgrade: StringListFilter
  new_size: IntFilter
  new: StringListFilter
  remove_size: IntFilter
  remove: StringListFilter
  upgrade_size: IntFilter
  upgrade: StringListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoComparisonRPMsFilter]
  or: [ContainerImageRepoComparisonRPMsFilter]
  nor: [ContainerImageRepoComparisonRPMsFilter]
  not: ContainerImageRepoComparisonRPMsFilter
}

input ContainerImageRepoComparisonRPMsInput {
  """List of NVRA which were downgraded in this image."""
  downgrade: [String]

  """List of NVRA which were added to this image."""
  new: [String]

  """List of NVRA which were removed in this image."""
  remove: [String]

  """List of NVRA which were upgraded in this image."""
  upgrade: [String]
}

type ContainerImageRepoEdges {
  """
  Get Red Hat advisory by ID.
  You only have access to advisories that are already shipped.
  """
  image_advisory(id: String): RedHatContainerAdvisoryResponse

  """Get a repository by registry and path (product line/image name)."""
  repository(registry: String, repository: String): ContainerRepositoryResponse
}

input ContainerImageRepoElemMatchFilter {
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoFilter {
  comparison: ContainerImageRepoComparisonFilter
  content_advisory_ids_size: IntFilter
  content_advisory_ids: StringListFilter
  image_advisory_id: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  published: BooleanFilter
  published_date: DateTimeFilter
  push_date: DateTimeFilter
  registry: StringFilter
  repository: StringFilter
  signatures_size: IntFilter
  signatures_elemMatch: SignatureInfoElemMatchFilter
  signatures: SignatureInfoListFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageRepoTagElemMatchFilter
  tags: ContainerImageRepoTagListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoInput {
  """Store information about image comparison."""
  comparison: ContainerImageRepoComparisonInput

  """
  The _id's of the redHatContainerAdvisory that contains the content advisories.
  """
  content_advisory_ids: [String]

  """
  The _id of the redHatContainerAdvisory that contains the image advisory.
  """
  image_advisory_id: String

  """Available for multiarch images."""
  manifest_list_digest: String

  """Available for single arch images."""
  manifest_schema2_digest: String

  """Indicate if the image has been published to the container catalog."""
  published: Boolean

  """Date the image was published to the container catalog."""
  published_date: DateTime

  """
  When the image was pushed to this repository. For RH images this is picked
  from first found of advisory ship_date, brew completion_date, and finally
  repositories publish_date. For ISV images this replicates value of
  published_date.
  """
  push_date: DateTime

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """Image signing info."""
  signatures: [SignatureInfoInput]

  """List of container tags assigned to this layer."""
  tags: [ContainerImageRepoTagInput]
}

input ContainerImageRepoListFilter {
  list_index_filter: ContainerImageRepoListIndexFilter
  comparison: ContainerImageRepoComparisonFilter
  content_advisory_ids_size: IntFilter
  content_advisory_ids: StringListFilter
  image_advisory_id: StringFilter
  manifest_list_digest: StringFilter
  manifest_schema2_digest: StringFilter
  published: BooleanFilter
  published_date: DateTimeFilter
  push_date: DateTimeFilter
  registry: StringFilter
  repository: StringFilter
  signatures_size: IntFilter
  signatures_elemMatch: SignatureInfoElemMatchFilter
  signatures: SignatureInfoListFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageRepoTagElemMatchFilter
  tags: ContainerImageRepoTagListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoFilter]
  or: [ContainerImageRepoFilter]
  nor: [ContainerImageRepoFilter]
  not: ContainerImageRepoFilter
}

input ContainerImageRepoListIndexFilter {
  condition: ContainerImageRepoFilter
  index: Int
}

type ContainerImageRepoTag {
  added_date: DateTime

  """Available when manifest_schema2_digest is not. All legacy images."""
  manifest_schema1_digest: String

  """The name of the tag."""
  name: String

  """
  Date this tag was removed from the image in this repo. If the tag is added back, add a new entry in 'tags' array.
  """
  removed_date: DateTime
}

input ContainerImageRepoTagElemMatchFilter {
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input ContainerImageRepoTagFilter {
  added_date: DateTimeFilter
  manifest_schema1_digest: StringFilter
  name: StringFilter
  removed_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input ContainerImageRepoTagInput {
  added_date: DateTime

  """Available when manifest_schema2_digest is not. All legacy images."""
  manifest_schema1_digest: String

  """The name of the tag."""
  name: String

  """
  Date this tag was removed from the image in this repo. If the tag is added back, add a new entry in 'tags' array.
  """
  removed_date: DateTime
}

input ContainerImageRepoTagListFilter {
  list_index_filter: ContainerImageRepoTagListIndexFilter
  added_date: DateTimeFilter
  manifest_schema1_digest: StringFilter
  name: StringFilter
  removed_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageRepoTagFilter]
  or: [ContainerImageRepoTagFilter]
  nor: [ContainerImageRepoTagFilter]
  not: ContainerImageRepoTagFilter
}

input ContainerImageRepoTagListIndexFilter {
  condition: ContainerImageRepoTagFilter
  index: Int
}

type ContainerImageResponse {
  data: ContainerImage
  error: ResponseError
}

"""
A containerImageRPMManifest contains all the RPM packages for a given containerImage
"""
type ContainerImageRPMManifest {
  """The foreign key to containerImage._id."""
  image_id: String
  object_type: String

  """Content manifest of this image. RPM content included in the image."""
  rpms: [RpmsItems]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerImageRPMManifestEdges
}

type ContainerImageRPMManifestEdges {
  """Get container image by ID."""
  image(id: ObjectIDFilterScalar): ContainerImageResponse
}

"""
A containerImageRPMManifest contains all the RPM packages for a given containerImage
"""
input ContainerImageRPMManifestInput {
  """The foreign key to containerImage._id."""
  image_id: String
  object_type: String

  """Content manifest of this image. RPM content included in the image."""
  rpms: [RpmsItemsInput]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

type ContainerImageRPMManifestResponse {
  data: ContainerImageRPMManifest
  error: ResponseError
}

"""
Information if there is an existing exception for the test_results, given by certOps resulting in successful certification.
"""
type ContainerImageTestException {
  """Indication that check is ignored or not during a publication process"""
  exception_approved: Boolean

  """Description and reference to a Jira ticket with an approved exception"""
  exception_approved_description: String
}

input ContainerImageTestExceptionFilter {
  exception_approved: BooleanFilter
  exception_approved_description: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageTestExceptionFilter]
  or: [ContainerImageTestExceptionFilter]
  nor: [ContainerImageTestExceptionFilter]
  not: ContainerImageTestExceptionFilter
}

"""
Information if there is an existing exception for the test_results, given by certOps resulting in successful certification.
"""
input ContainerImageTestExceptionInput {
  """Indication that check is ignored or not during a publication process"""
  exception_approved: Boolean

  """Description and reference to a Jira ticket with an approved exception"""
  exception_approved_description: String
}

"""Vulnerability present in the content that is installed in the image."""
type ContainerImageVulnerability {
  """Advisory identifier."""
  advisory_id: String

  """Advisory type (RHSA, RHBA, ...)."""
  advisory_type: String

  """ID of the CVE."""
  cve_id: String
  object_type: String

  """
  Array of package information applicable to this CVE. This array was superseded by affected_packages array.
  """
  packages: [ContainerImageVulnerabilityPackage]

  """List of packages affected by this CVE."""
  affected_packages: [ContainerImageVulnerabilityAffectedPackage]

  """Date the CVE was made public."""
  public_date: String

  """CVE severity."""
  severity: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""Information about package affected by the CVE."""
type ContainerImageVulnerabilityAffectedPackage {
  """The name of the package."""
  name: String

  """Package version."""
  version: String

  """Package architecture."""
  arch: String

  """Package type."""
  package_type: String
}

input ContainerImageVulnerabilityAffectedPackageElemMatchFilter {
  and: [ContainerImageVulnerabilityAffectedPackageFilter]
  or: [ContainerImageVulnerabilityAffectedPackageFilter]
  nor: [ContainerImageVulnerabilityAffectedPackageFilter]
  not: ContainerImageVulnerabilityAffectedPackageFilter
}

input ContainerImageVulnerabilityAffectedPackageFilter {
  name: StringFilter
  version: StringFilter
  arch: StringFilter
  package_type: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityAffectedPackageFilter]
  or: [ContainerImageVulnerabilityAffectedPackageFilter]
  nor: [ContainerImageVulnerabilityAffectedPackageFilter]
  not: ContainerImageVulnerabilityAffectedPackageFilter
}

input ContainerImageVulnerabilityAffectedPackageListFilter {
  list_index_filter: ContainerImageVulnerabilityAffectedPackageListIndexFilter
  name: StringFilter
  version: StringFilter
  arch: StringFilter
  package_type: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityAffectedPackageFilter]
  or: [ContainerImageVulnerabilityAffectedPackageFilter]
  nor: [ContainerImageVulnerabilityAffectedPackageFilter]
  not: ContainerImageVulnerabilityAffectedPackageFilter
}

input ContainerImageVulnerabilityAffectedPackageListIndexFilter {
  condition: ContainerImageVulnerabilityAffectedPackageFilter
  index: Int
}

input ContainerImageVulnerabilityFilter {
  advisory_id: StringFilter
  advisory_type: StringFilter
  cve_id: StringFilter
  object_type: StringFilter
  packages_size: IntFilter
  packages_elemMatch: ContainerImageVulnerabilityPackageElemMatchFilter
  packages: ContainerImageVulnerabilityPackageListFilter
  affected_packages_size: IntFilter
  affected_packages_elemMatch: ContainerImageVulnerabilityAffectedPackageElemMatchFilter
  affected_packages: ContainerImageVulnerabilityAffectedPackageListFilter
  public_date: StringFilter
  severity: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityFilter]
  or: [ContainerImageVulnerabilityFilter]
  nor: [ContainerImageVulnerabilityFilter]
  not: ContainerImageVulnerabilityFilter
}

"""The image that fixes the vulnerability."""
type ContainerImageVulnerabilityFixedByImage {
  """The _id of the image that fixes the vulnerability."""
  id: String

  """
  The data is denormalized to not require lookup in UI.
  
  RISK: could get out of sync with real refrenced data.
  """
  repositories: [ContainerImageVulnerabilityFixedByRepository]
  edges: ContainerImageVulnerabilityFixedByImageEdges
}

type ContainerImageVulnerabilityFixedByImageEdges {
  """Get container image by ID."""
  image(id: ObjectIDFilterScalar): ContainerImageResponse
}

input ContainerImageVulnerabilityFixedByImageFilter {
  id: StringFilter
  repositories_size: IntFilter
  repositories_elemMatch: ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter
  repositories: ContainerImageVulnerabilityFixedByRepositoryListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityFixedByImageFilter]
  or: [ContainerImageVulnerabilityFixedByImageFilter]
  nor: [ContainerImageVulnerabilityFixedByImageFilter]
  not: ContainerImageVulnerabilityFixedByImageFilter
}

type ContainerImageVulnerabilityFixedByRepository {
  registry: String
  repository: String
  tags: [ContainerImageVulnerabilityTag]
}

input ContainerImageVulnerabilityFixedByRepositoryElemMatchFilter {
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityFixedByRepositoryFilter {
  registry: StringFilter
  repository: StringFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageVulnerabilityTagElemMatchFilter
  tags: ContainerImageVulnerabilityTagListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityFixedByRepositoryListFilter {
  list_index_filter: ContainerImageVulnerabilityFixedByRepositoryListIndexFilter
  registry: StringFilter
  repository: StringFilter
  tags_size: IntFilter
  tags_elemMatch: ContainerImageVulnerabilityTagElemMatchFilter
  tags: ContainerImageVulnerabilityTagListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  or: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  nor: [ContainerImageVulnerabilityFixedByRepositoryFilter]
  not: ContainerImageVulnerabilityFixedByRepositoryFilter
}

input ContainerImageVulnerabilityFixedByRepositoryListIndexFilter {
  condition: ContainerImageVulnerabilityFixedByRepositoryFilter
  index: Int
}

"""Package information applicable to this CVE."""
type ContainerImageVulnerabilityPackage {
  """The next image that fixes this vulnerability."""
  fixed_by_image: ContainerImageVulnerabilityFixedByImage

  """The source RPM that contains the fix."""
  srpm_nevra: String

  """
  RPMs, identified by their RPM NVRA, that are present in the image and vulnerable.
  """
  rpm_nvra: [String]
}

input ContainerImageVulnerabilityPackageElemMatchFilter {
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityPackageFilter {
  fixed_by_image: ContainerImageVulnerabilityFixedByImageFilter
  srpm_nevra: StringFilter
  rpm_nvra_size: IntFilter
  rpm_nvra: StringListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityPackageListFilter {
  list_index_filter: ContainerImageVulnerabilityPackageListIndexFilter
  fixed_by_image: ContainerImageVulnerabilityFixedByImageFilter
  srpm_nevra: StringFilter
  rpm_nvra_size: IntFilter
  rpm_nvra: StringListFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityPackageFilter]
  or: [ContainerImageVulnerabilityPackageFilter]
  nor: [ContainerImageVulnerabilityPackageFilter]
  not: ContainerImageVulnerabilityPackageFilter
}

input ContainerImageVulnerabilityPackageListIndexFilter {
  condition: ContainerImageVulnerabilityPackageFilter
  index: Int
}

type ContainerImageVulnerabilityPaginatedResponse {
  data: [ContainerImageVulnerability]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ContainerImageVulnerabilityResponse {
  data: ContainerImageVulnerability
  error: ResponseError
}

type ContainerImageVulnerabilityTag {
  name: String
}

input ContainerImageVulnerabilityTagElemMatchFilter {
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

input ContainerImageVulnerabilityTagFilter {
  name: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

input ContainerImageVulnerabilityTagListFilter {
  list_index_filter: ContainerImageVulnerabilityTagListIndexFilter
  name: StringFilter
  eq: NULL
  ne: NULL
  and: [ContainerImageVulnerabilityTagFilter]
  or: [ContainerImageVulnerabilityTagFilter]
  nor: [ContainerImageVulnerabilityTagFilter]
  not: ContainerImageVulnerabilityTagFilter
}

input ContainerImageVulnerabilityTagListIndexFilter {
  condition: ContainerImageVulnerabilityTagFilter
  index: Int
}

"""Contains metadata associated with Red Hat and ISV repositories"""
type ContainerRepository {
  """The application categories (types)."""
  application_categories: [String]

  """
  Contains unique list of all container architectures for the given repository.
  """
  architectures: [String]

  """Denote which tags to be used for auto-rebuilding processes."""
  auto_rebuild_tags: [String]

  """
  What build categories does this fall into, such as standalone, s2i builder, etc.
  """
  build_categories: [String]

  """
  Flag indicating whether the repository has opted-in to auto-release auto-built images.
  """
  can_auto_release_cve_rebuild: Boolean
  cdn_base_url: URI

  """
  Capture and provide an inventory of grades corresponding to the tags in the relevant contents stream.
  """
  content_stream_grades: [RepositoryContentStreamGrades]

  """
  Capture and provide an inventory of tags corresponding to the content streams.
  """
  content_stream_tags: [String]

  """Description of the repository."""
  description: String
  display_data: RepositoryDisplayData

  """
  Links to marketing and doc collateral including categorization (solution
  brief, white paper, demo video, etc.) supposed to be displayed on the product
  page (NOT documentation tab on image overview tab).
  """
  documentation_links: [RepositoryDocumentationLink]

  """
  Flag indicating whether the repository has opted-in to entitlements to
  determine needed subscriptions in order to be able to pull repository images.
  """
  entitlement_enabled: Boolean

  """
  List of engineering IDs associated with the repository. The list represents a
  needed subscription to pull the repository images.
  """
  engineering_ids: [String]

  """Flag indicating which team has opted-in to use the File Based Catalog."""
  fbc_opt_in: Boolean
  eol_date: DateTime

  """Date until the freshness grades for this repository are unknown."""
  freshness_grades_unknown_until_date: DateTime

  """Defines  whether a repository contains multiple image streams."""
  includes_multiple_content_streams: Boolean

  """Designates whether a repository is community-supported."""
  is_community_supported: Boolean

  """ID of the project in for ISV repositories."""
  isv_pid: String

  """
  Determine what registry should be used as source of repository metadata (e.g. Pulp or Quay).
  """
  metadata_source: String

  """Set of metrics about the repository."""
  metrics: RepositoryMetrics

  """Namespace of the repository."""
  namespace: String

  """Repository is intended for non-production use only."""
  non_production_only: Boolean
  object_type: String

  """
  Indicates if images in this repository are allowed to run super-privileged.
  """
  privileged_images_allowed: Boolean

  """ID of the project in PRM. Only for ISV repositories."""
  prm_project_id: String

  """List of unique identifiers for the product listings."""
  product_listings: [ObjectID]

  """Map repositories to specific product versions."""
  product_versions: [String]
  protected_for_pull: Boolean

  """
  Indicates whether the repository requires subscription or other access restrictions for search.
  """
  protected_for_search: Boolean

  """
  Indicates that the repository does not have any images in it or has been deleted.
  """
  published: Boolean

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """
  Consumed by the Registry Proxy so that it can route users to the proper backend registry (e.g. Pulp or Quay).
  """
  registry_target: String

  """The release categories of a repository."""
  release_categories: [String]

  """Defines repository to point to in case this one is deprecated."""
  replaced_by_repository_name: String

  """Combination of image repository and namespace."""
  repository: String

  """
  Flag indicating whether (false) the repository is published on the legacy
  registry (registry.access.redhat.com), or (true) can only be published to
  registry.redhat.io.
  """
  requires_terms: Boolean

  """Describes what the image can be run on."""
  runs_on: RepositoryRunsOn

  """
  Flag indicating whether images associated with this repo are included in
  workflows where non-binary container images are published alongside their
  binary counterparts.
  """
  source_container_image_enabled: Boolean

  """The support levels of a repository."""
  support_levels: [String]

  """Total size of all images in bytes."""
  total_size_bytes: Int64

  """Total size of all uncompressed images in bytes."""
  total_uncompressed_size_bytes: Int64

  """
  When populated this field will override the content on the 'get this image' tab in red hat container catalog.
  """
  ui_get_this_image_override: String

  """
  Flag indicating whether the 'latest' tag for an image should be pulled.
  """
  use_latest: Boolean

  """Label of the vendor that owns this repository."""
  vendor_label: String

  """Marketplace related information."""
  marketplace: ContainerRepositoryMarketplace

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerRepositoryEdges
}

type ContainerRepositoryEdges {
  """Get certification project using Red Hat Connect project ID."""
  certification_project(pid: String): CertificationProjectResponse

  """List images for a repository. Exclude total for improved performance."""
  images(registry: String, repository: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Find product listings associated with repository."""
  product_listings(registry: String, repository: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """List operator bundles for a repository."""
  operator_bundles(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], registry: String, repository: String, filter: OperatorBundleFilter): OperatorBundlePaginatedResponse

  """Get a repository by registry and path (product line/image name)."""
  replaced_by_repository(registry: String, repository: String): ContainerRepositoryResponse

  """Get a vendor by label."""
  vendor(label: String): ContainerVendorResponse
}

"""Contains metadata associated with Red Hat and ISV repositories"""
type ContainerRepositoryFederated {
  """The application categories (types)."""
  application_categories: [String]

  """
  Contains unique list of all container architectures for the given repository.
  """
  architectures: [String]

  """Denote which tags to be used for auto-rebuilding processes."""
  auto_rebuild_tags: [String]

  """
  What build categories does this fall into, such as standalone, s2i builder, etc.
  """
  build_categories: [String]

  """
  Flag indicating whether the repository has opted-in to auto-release auto-built images.
  """
  can_auto_release_cve_rebuild: Boolean
  cdn_base_url: URI

  """
  Capture and provide an inventory of grades corresponding to the tags in the relevant contents stream.
  """
  content_stream_grades: [RepositoryContentStreamGrades]

  """
  Capture and provide an inventory of tags corresponding to the content streams.
  """
  content_stream_tags: [String]

  """Description of the repository."""
  description: String
  display_data: RepositoryDisplayData

  """
  Links to marketing and doc collateral including categorization (solution
  brief, white paper, demo video, etc.) supposed to be displayed on the product
  page (NOT documentation tab on image overview tab).
  """
  documentation_links: [RepositoryDocumentationLink]

  """
  Flag indicating whether the repository has opted-in to entitlements to
  determine needed subscriptions in order to be able to pull repository images.
  """
  entitlement_enabled: Boolean

  """
  List of engineering IDs associated with the repository. The list represents a
  needed subscription to pull the repository images.
  """
  engineering_ids: [String]

  """Flag indicating which team has opted-in to use the File Based Catalog."""
  fbc_opt_in: Boolean
  eol_date: DateTime

  """Date until the freshness grades for this repository are unknown."""
  freshness_grades_unknown_until_date: DateTime

  """Defines  whether a repository contains multiple image streams."""
  includes_multiple_content_streams: Boolean

  """Designates whether a repository is community-supported."""
  is_community_supported: Boolean

  """ID of the project in for ISV repositories."""
  isv_pid: String

  """
  Determine what registry should be used as source of repository metadata (e.g. Pulp or Quay).
  """
  metadata_source: String

  """Set of metrics about the repository."""
  metrics: RepositoryMetrics

  """Namespace of the repository."""
  namespace: String

  """Repository is intended for non-production use only."""
  non_production_only: Boolean
  object_type: String

  """
  Indicates if images in this repository are allowed to run super-privileged.
  """
  privileged_images_allowed: Boolean

  """ID of the project in PRM. Only for ISV repositories."""
  prm_project_id: String

  """List of unique identifiers for the product listings."""
  product_listings: [ObjectID]

  """Map repositories to specific product versions."""
  product_versions: [String]
  protected_for_pull: Boolean

  """
  Indicates whether the repository requires subscription or other access restrictions for search.
  """
  protected_for_search: Boolean

  """
  Indicates that the repository does not have any images in it or has been deleted.
  """
  published: Boolean

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """
  Consumed by the Registry Proxy so that it can route users to the proper backend registry (e.g. Pulp or Quay).
  """
  registry_target: String

  """The release categories of a repository."""
  release_categories: [String]

  """Defines repository to point to in case this one is deprecated."""
  replaced_by_repository_name: String

  """Combination of image repository and namespace."""
  repository: String

  """
  Flag indicating whether (false) the repository is published on the legacy
  registry (registry.access.redhat.com), or (true) can only be published to
  registry.redhat.io.
  """
  requires_terms: Boolean

  """Describes what the image can be run on."""
  runs_on: RepositoryRunsOn

  """
  Flag indicating whether images associated with this repo are included in
  workflows where non-binary container images are published alongside their
  binary counterparts.
  """
  source_container_image_enabled: Boolean

  """The support levels of a repository."""
  support_levels: [String]

  """Total size of all images in bytes."""
  total_size_bytes: Int64

  """Total size of all uncompressed images in bytes."""
  total_uncompressed_size_bytes: Int64

  """
  When populated this field will override the content on the 'get this image' tab in red hat container catalog.
  """
  ui_get_this_image_override: String

  """
  Flag indicating whether the 'latest' tag for an image should be pulled.
  """
  use_latest: Boolean

  """Label of the vendor that owns this repository."""
  vendor_label: String

  """Marketplace related information."""
  marketplace: ContainerRepositoryMarketplace

  """List of products that are part of the product listing."""
  products: [Product]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

type ContainerRepositoryFederatedConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [ContainerRepositoryFederatedEdge]
}

type ContainerRepositoryFederatedEdge {
  node: ContainerRepositoryFederated
}

input ContainerRepositoryFilter {
  application_categories_size: IntFilter
  application_categories: StringListFilter
  architectures_size: IntFilter
  architectures: StringListFilter
  auto_rebuild_tags_size: IntFilter
  auto_rebuild_tags: StringListFilter
  build_categories_size: IntFilter
  build_categories: StringListFilter
  can_auto_release_cve_rebuild: BooleanFilter
  cdn_base_url: URIFilter
  content_stream_grades_size: IntFilter
  content_stream_grades_elemMatch: RepositoryContentStreamGradesElemMatchFilter
  content_stream_grades: RepositoryContentStreamGradesListFilter
  content_stream_tags_size: IntFilter
  content_stream_tags: StringListFilter
  description: StringFilter
  display_data: RepositoryDisplayDataFilter
  documentation_links_size: IntFilter
  documentation_links_elemMatch: RepositoryDocumentationLinkElemMatchFilter
  documentation_links: RepositoryDocumentationLinkListFilter
  entitlement_enabled: BooleanFilter
  engineering_ids_size: IntFilter
  engineering_ids: StringListFilter
  fbc_opt_in: BooleanFilter
  eol_date: DateTimeFilter
  freshness_grades_unknown_until_date: DateTimeFilter
  includes_multiple_content_streams: BooleanFilter
  is_community_supported: BooleanFilter
  isv_pid: StringFilter
  metadata_source: StringFilter
  metrics: RepositoryMetricsFilter
  namespace: StringFilter
  non_production_only: BooleanFilter
  object_type: StringFilter
  privileged_images_allowed: BooleanFilter
  prm_project_id: StringFilter
  product_listings_size: IntFilter
  product_listings: ObjectIDListFilter
  product_versions_size: IntFilter
  product_versions: StringListFilter
  protected_for_pull: BooleanFilter
  protected_for_search: BooleanFilter
  published: BooleanFilter
  registry: StringFilter
  registry_target: StringFilter
  release_categories_size: IntFilter
  release_categories: StringListFilter
  replaced_by_repository_name: StringFilter
  repository: StringFilter
  requires_terms: BooleanFilter
  runs_on: RepositoryRunsOnFilter
  source_container_image_enabled: BooleanFilter
  support_levels_size: IntFilter
  support_levels: StringListFilter
  total_size_bytes: Int64Filter
  total_uncompressed_size_bytes: Int64Filter
  ui_get_this_image_override: StringFilter
  use_latest: BooleanFilter
  vendor_label: StringFilter
  marketplace: ContainerRepositoryMarketplaceFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ContainerRepositoryFilter]
  or: [ContainerRepositoryFilter]
  nor: [ContainerRepositoryFilter]
  not: ContainerRepositoryFilter
}

"""Marketplace related information."""
type ContainerRepositoryMarketplace {
  listing_url: URI
}

input ContainerRepositoryMarketplaceFilter {
  listing_url: URIFilter
  eq: NULL
  ne: NULL
  and: [ContainerRepositoryMarketplaceFilter]
  or: [ContainerRepositoryMarketplaceFilter]
  nor: [ContainerRepositoryMarketplaceFilter]
  not: ContainerRepositoryMarketplaceFilter
}

type ContainerRepositoryPaginatedResponse {
  data: [ContainerRepository]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ContainerRepositoryResponse {
  data: ContainerRepository
  error: ResponseError
}

"""Object for GraphQL response"""
type ContainerSignatureExternal {
  signature_data: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

input ContainerSignatureExternalFilter {
  signature_data: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ContainerSignatureExternalFilter]
  or: [ContainerSignatureExternalFilter]
  nor: [ContainerSignatureExternalFilter]
  not: ContainerSignatureExternalFilter
}

type ContainerSignatureExternalPaginatedResponse {
  data: [ContainerSignatureExternal]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

"""
The tag history stores a list of image that still have or used to have the given tag
"""
type ContainerTagHistory {
  object_type: String

  """Hostname of the registry where the repository can be accessed."""
  registry: String

  """Repository name."""
  repository: String

  """The image tag name."""
  tag: String

  """The tag type i.e. for floating or persistent."""
  tag_type: String

  """Array with the tag history information."""
  history: [History]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerTagHistoryEdges
}

type ContainerTagHistoryEdges {
  """
  Get images for tag history that have or used to have the tag. Exclude total for improved performance.
  """
  images(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerImageFilter): ContainerImagePaginatedResponse
}

input ContainerTagHistoryFilter {
  object_type: StringFilter
  registry: StringFilter
  repository: StringFilter
  tag: StringFilter
  tag_type: StringFilter
  history_size: IntFilter
  history_elemMatch: HistoryElemMatchFilter
  history: HistoryListFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ContainerTagHistoryFilter]
  or: [ContainerTagHistoryFilter]
  nor: [ContainerTagHistoryFilter]
  not: ContainerTagHistoryFilter
}

type ContainerTagHistoryPaginatedResponse {
  data: [ContainerTagHistory]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ContainerTagHistoryResponse {
  data: ContainerTagHistory
  error: ResponseError
}

"""Stores information about a Vendor"""
type ContainerVendor {
  allow_hosted_container_registry: Boolean

  """URL to the vendor's main website."""
  company_url: URI

  """
  General contact information for the vendor, to be displayed on the vendor page on RHCC.
  """
  contact: ContainerVendorContact
  description: String

  """MDM (Master Data Management) identifier."""
  mdm_id: String

  """Company node ID from Red Hat Connect."""
  drupal_company_id: Int

  """The industry / vertical the vendor belongs to."""
  industries: [String]
  label: String

  """A flag that determines if vendor label can be changed."""
  label_locked: Boolean
  logo_url: URI
  name: String
  object_type: String

  """Indicate that the vendor has been published."""
  published: Boolean
  registry_urls: [String]

  """RSS feed for vendor."""
  rss_feed_url: URI

  """Token for outbound namespace for pulling published marketplace images."""
  service_account_token: String
  social_media_links: [ContainerVendorSocialMediaLinks]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ContainerVendorEdges
}

"""Contact information"""
type ContainerVendorContact {
  """General contact email address."""
  email: String

  """General contact phone number."""
  phone: String
}

"""Contact information"""
input ContainerVendorContactInput {
  """General contact email address."""
  email: String

  """General contact phone number."""
  phone: String
}

type ContainerVendorEdges {
  """Get the product listings for a vendor by Company Org ID."""
  product_listings_org_id(org_id: Int, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get the product listings for a vendor by label."""
  product_listings_label(label: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get certification projects for a vendor by Company Org ID."""
  certification_projects(org_id: Int, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertificationProjectFilter): CertificationProjectPaginatedResponse

  """Get the repositories for a vendor label."""
  repositories(label: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryPaginatedResponse
}

"""Stores information about a Vendor"""
input ContainerVendorInput {
  allow_hosted_container_registry: Boolean

  """URL to the vendor's main website."""
  company_url: URI

  """
  General contact information for the vendor, to be displayed on the vendor page on RHCC.
  """
  contact: ContainerVendorContactInput
  description: String

  """MDM (Master Data Management) identifier."""
  mdm_id: String

  """Company node ID from Red Hat Connect."""
  drupal_company_id: Int

  """The industry / vertical the vendor belongs to."""
  industries: [String]
  label: String

  """A flag that determines if vendor label can be changed."""
  label_locked: Boolean
  logo_url: URI
  name: String
  object_type: String

  """Indicate that the vendor has been published."""
  published: Boolean
  registry_urls: [String]

  """RSS feed for vendor."""
  rss_feed_url: URI

  """Token for outbound namespace for pulling published marketplace images."""
  service_account_token: String
  social_media_links: [ContainerVendorSocialMediaLinksInput]

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

type ContainerVendorResponse {
  data: ContainerVendor
  error: ResponseError
}

"""Social media links."""
type ContainerVendorSocialMediaLinks {
  """The name of the social media provider."""
  name: String

  """The URL to the social media site for the vendor."""
  url: URI
}

"""Social media links."""
input ContainerVendorSocialMediaLinksInput {
  """The name of the social media provider."""
  name: String

  """The URL to the social media site for the vendor."""
  url: URI
}

"""CVE fixed by an advisory."""
type CVE {
  """Unique identifier of the issue in the issue tracking system."""
  id: String

  """Publicly accessible URL of the issue information."""
  url: URI
}

input CVEElemMatchFilter {
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input CVEFilter {
  id: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input CVEListFilter {
  list_index_filter: CVEListIndexFilter
  id: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [CVEFilter]
  or: [CVEFilter]
  nor: [CVEFilter]
  not: CVEFilter
}

input CVEListIndexFilter {
  condition: CVEFilter
  index: Int
}

"""
Scalar used for validating, serializing and deserializing
DateTime values in Marshmallow layer utilizing ms_fields.DateTime.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output)
"""
scalar DateTime

input DateTimeFilter {
  eq: DateTimeFilterScalar
  ne: DateTimeFilterScalar
  le: DateTimeFilterScalar
  lt: DateTimeFilterScalar
  ge: DateTimeFilterScalar
  gt: DateTimeFilterScalar
  in: [DateTimeFilterScalar]
  out: [DateTimeFilterScalar]
}

"""
Scalar used in the filters for DateTime. Filter value
is validated against ISO 8601 and retyped to DateTime,
enabling MongoDB search to recognize the difference
between DateTime and String. Validation and retyping is
happening on GraphQL layer.

Scope: Pyxis subgraph
Usage: In (Filtering)
"""
scalar DateTimeFilterScalar

"""This field is required when the product listing is published."""
type Descriptions {
  long: String

  """
  This field should not contain any links and link-like data. Following (and
  similar) patterns are forbidden: ``http://, https://, fttp://, fttps://,
  file://, ssh://, git://, www., mailto:``
  """
  short: String
}

input DescriptionsFilter {
  long: StringFilter
  short: StringFilter
  eq: NULL
  ne: NULL
  and: [DescriptionsFilter]
  or: [DescriptionsFilter]
  nor: [DescriptionsFilter]
  not: DescriptionsFilter
}

"""This field is required when the product listing is published."""
input DescriptionsInput {
  long: String

  """
  This field should not contain any links and link-like data. Following (and
  similar) patterns are forbidden: ``http://, https://, fttp://, fttps://,
  file://, ssh://, git://, www., mailto:``
  """
  short: String
}

"""
Scalar is ensuring that user input is a valid JSON.
Utilizing Marshmallow Dict validator.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output)
"""
scalar Dictionary

"""
Email scalar type validating values in filters and
input and output types. Utilizing Marshmallow Email
validator.

Scope: Pyxis subgraph
Usage: In and Out (Filtering, Input, Output)
"""
scalar Email

input EmailFilter {
  eq: Email
  ne: Email
  le: Email
  lt: Email
  ge: Email
  gt: Email
  in: [Email]
  out: [Email]
  iregex: String
  regex: String
}

"""This field is required when the product listing is published."""
type FAQSItems {
  answer: String
  question: String
}

input FAQSItemsElemMatchFilter {
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

input FAQSItemsFilter {
  answer: StringFilter
  question: StringFilter
  eq: NULL
  ne: NULL
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

"""This field is required when the product listing is published."""
input FAQSItemsInput {
  answer: String
  question: String
}

input FAQSItemsListFilter {
  list_index_filter: FAQSItemsListIndexFilter
  answer: StringFilter
  question: StringFilter
  eq: NULL
  ne: NULL
  and: [FAQSItemsFilter]
  or: [FAQSItemsFilter]
  nor: [FAQSItemsFilter]
  not: FAQSItemsFilter
}

input FAQSItemsListIndexFilter {
  condition: FAQSItemsFilter
  index: Int
}

"""This field is required when the product listing is published."""
type FeaturesItems {
  description: String
  title: String
}

input FeaturesItemsElemMatchFilter {
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

input FeaturesItemsFilter {
  description: StringFilter
  title: StringFilter
  eq: NULL
  ne: NULL
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

"""This field is required when the product listing is published."""
input FeaturesItemsInput {
  description: String
  title: String
}

input FeaturesItemsListFilter {
  list_index_filter: FeaturesItemsListIndexFilter
  description: StringFilter
  title: StringFilter
  eq: NULL
  ne: NULL
  and: [FeaturesItemsFilter]
  or: [FeaturesItemsFilter]
  nor: [FeaturesItemsFilter]
  not: FeaturesItemsFilter
}

input FeaturesItemsListIndexFilter {
  condition: FeaturesItemsFilter
  index: Int
}

"""Tracks changes to a field."""
type FieldHistoryBoolean {
  history: [FieldHistoryDetailBoolean]
}

input FieldHistoryBooleanFilter {
  history_size: IntFilter
  history_elemMatch: FieldHistoryDetailBooleanElemMatchFilter
  history: FieldHistoryDetailBooleanListFilter
  eq: NULL
  ne: NULL
  and: [FieldHistoryBooleanFilter]
  or: [FieldHistoryBooleanFilter]
  nor: [FieldHistoryBooleanFilter]
  not: FieldHistoryBooleanFilter
}

"""Tracks changes to a field."""
input FieldHistoryBooleanInput {
  history: [FieldHistoryDetailBooleanInput]
}

"""Represents a single change to a field."""
type FieldHistoryDetailBoolean {
  """Date of change."""
  date: DateTime

  """User who made the change."""
  updated_by: String

  """Value that the field was changed to."""
  value: Boolean
}

input FieldHistoryDetailBooleanElemMatchFilter {
  and: [FieldHistoryDetailBooleanFilter]
  or: [FieldHistoryDetailBooleanFilter]
  nor: [FieldHistoryDetailBooleanFilter]
  not: FieldHistoryDetailBooleanFilter
}

input FieldHistoryDetailBooleanFilter {
  date: DateTimeFilter
  updated_by: StringFilter
  value: BooleanFilter
  eq: NULL
  ne: NULL
  and: [FieldHistoryDetailBooleanFilter]
  or: [FieldHistoryDetailBooleanFilter]
  nor: [FieldHistoryDetailBooleanFilter]
  not: FieldHistoryDetailBooleanFilter
}

"""Represents a single change to a field."""
input FieldHistoryDetailBooleanInput {
  """Date of change."""
  date: DateTime

  """User who made the change."""
  updated_by: String

  """Value that the field was changed to."""
  value: Boolean
}

input FieldHistoryDetailBooleanListFilter {
  list_index_filter: FieldHistoryDetailBooleanListIndexFilter
  date: DateTimeFilter
  updated_by: StringFilter
  value: BooleanFilter
  eq: NULL
  ne: NULL
  and: [FieldHistoryDetailBooleanFilter]
  or: [FieldHistoryDetailBooleanFilter]
  nor: [FieldHistoryDetailBooleanFilter]
  not: FieldHistoryDetailBooleanFilter
}

input FieldHistoryDetailBooleanListIndexFilter {
  condition: FieldHistoryDetailBooleanFilter
  index: Int
}

"""Represents a single change to a field."""
type FieldHistoryDetailString {
  """Date of change."""
  date: DateTime

  """User who made the change."""
  updated_by: String

  """Value that the field was changed to."""
  value: String
}

input FieldHistoryDetailStringElemMatchFilter {
  and: [FieldHistoryDetailStringFilter]
  or: [FieldHistoryDetailStringFilter]
  nor: [FieldHistoryDetailStringFilter]
  not: FieldHistoryDetailStringFilter
}

input FieldHistoryDetailStringFilter {
  date: DateTimeFilter
  updated_by: StringFilter
  value: StringFilter
  eq: NULL
  ne: NULL
  and: [FieldHistoryDetailStringFilter]
  or: [FieldHistoryDetailStringFilter]
  nor: [FieldHistoryDetailStringFilter]
  not: FieldHistoryDetailStringFilter
}

"""Represents a single change to a field."""
input FieldHistoryDetailStringInput {
  """Date of change."""
  date: DateTime

  """User who made the change."""
  updated_by: String

  """Value that the field was changed to."""
  value: String
}

input FieldHistoryDetailStringListFilter {
  list_index_filter: FieldHistoryDetailStringListIndexFilter
  date: DateTimeFilter
  updated_by: StringFilter
  value: StringFilter
  eq: NULL
  ne: NULL
  and: [FieldHistoryDetailStringFilter]
  or: [FieldHistoryDetailStringFilter]
  nor: [FieldHistoryDetailStringFilter]
  not: FieldHistoryDetailStringFilter
}

input FieldHistoryDetailStringListIndexFilter {
  condition: FieldHistoryDetailStringFilter
  index: Int
}

"""Tracks changes to a field."""
type FieldHistoryString {
  history: [FieldHistoryDetailString]
}

input FieldHistoryStringFilter {
  history_size: IntFilter
  history_elemMatch: FieldHistoryDetailStringElemMatchFilter
  history: FieldHistoryDetailStringListFilter
  eq: NULL
  ne: NULL
  and: [FieldHistoryStringFilter]
  or: [FieldHistoryStringFilter]
  nor: [FieldHistoryStringFilter]
  not: FieldHistoryStringFilter
}

"""Tracks changes to a field."""
input FieldHistoryStringInput {
  history: [FieldHistoryDetailStringInput]
}

"""Descriptor of the field in the GraphQL schema."""
type FieldMetadata {
  """
  A list of possible values for a field. Empty list indicates that field accepts arbitrary value.
  """
  enum_values: [String]

  """Indicates minimum length of the string field value."""
  min_length_value: Int

  """Indicates maximum length of the string field value."""
  max_length_value: Int

  """
  Returns default value for the field. If there is no default value, returns None.
  """
  default_value: String

  """
  Indicates if field's value is validated by regex and returns the regex pattern. None indicates no regex validation.
  """
  regex_value: String

  """
  Name of the GraphQL schema field name (self-reference to provided argument).
  """
  field_name: String

  """
  Indicates if field is required and has to be provided by user during creation.
  """
  is_required: Boolean

  """Indicates if field is read-only and cannot be changed."""
  is_read_only: Boolean

  """Indicates if field value can be set as null."""
  is_nullable: Boolean

  """
  Returns the type of the field. Example: String, Integer, List, ContainerImage, FreshnessGrades, etc.
  """
  is_type_of: String

  """Returns the description of the field."""
  description_value: String

  """Indicates if field value is compressed at rest."""
  is_compressed: Boolean

  """
  A list of subfields for the current field referencing nested Type or list of
  top level fields of the top level Type (if field_name arg for query is not
  provided or is empty string). None indicates no subfields - root field.
  """
  subfields: [String]

  """List specific field. Indicates minimum number of items in the list."""
  min_items_value: Int

  """List specific field. Indicates maximum number of items in the list."""
  max_items_value: Int

  """The items field represent the value of field's items status."""
  has_list_items_of_type: String
}

type FieldMetadataResponse {
  data: FieldMetadata
  error: ResponseError
}

input FloatFilter {
  eq: Float
  ne: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float]
  out: [Float]
}

"""Object with all log forwarder statuses"""
type Forwarders {
  fluentd: ForwarderStatusInfo
}

type ForwarderStatus {
  forwarders: Forwarders
}

"""Splunk forwarder status information"""
type ForwarderStatusInfo {
  """Forwarder status"""
  status: Boolean
}

type ForwarderStatusResponse {
  data: ForwarderStatus
  error: ResponseError
}

"""Grade based on applicable updates and time provided by PST CVE engine."""
type FreshnessGrade {
  """
  Date after which the grade is no longer valid. See start_date for when the
  grade was effective. If no value is set, the grade applies forever. This
  should happen only for a grade of A (no vulnerabilities) or grade F.
  """
  end_date: DateTime

  """The grade."""
  grade: String

  """Date when the grade was added by the vulnerability engine."""
  creation_date: DateTime

  """
  Date from which the grade is in effect. The grade is effective until the end_date, if end_date is set.
  """
  start_date: DateTime
}

input FreshnessGradeElemMatchFilter {
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

input FreshnessGradeFilter {
  end_date: DateTimeFilter
  grade: StringFilter
  creation_date: DateTimeFilter
  start_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

"""Grade based on applicable updates and time provided by PST CVE engine."""
input FreshnessGradeInput {
  """
  Date after which the grade is no longer valid. See start_date for when the
  grade was effective. If no value is set, the grade applies forever. This
  should happen only for a grade of A (no vulnerabilities) or grade F.
  """
  end_date: DateTime

  """The grade."""
  grade: String

  """Date when the grade was added by the vulnerability engine."""
  creation_date: DateTime

  """
  Date from which the grade is in effect. The grade is effective until the end_date, if end_date is set.
  """
  start_date: DateTime
}

input FreshnessGradeListFilter {
  list_index_filter: FreshnessGradeListIndexFilter
  end_date: DateTimeFilter
  grade: StringFilter
  creation_date: DateTimeFilter
  start_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [FreshnessGradeFilter]
  or: [FreshnessGradeFilter]
  nor: [FreshnessGradeFilter]
  not: FreshnessGradeFilter
}

input FreshnessGradeListIndexFilter {
  condition: FreshnessGradeFilter
  index: Int
}

"""
Images that participated in the evaluation of the current image's security grade.
"""
type GradesImageIds {
  """Id of the image."""
  id: String

  """Architecture of the image."""
  arch: String
  edges: GradesImageIdsEdges
}

type GradesImageIdsEdges {
  """
  Get a list of image vulnerabilities associated with an image. Exclude total for improved performance.
  """
  vulnerabilities(id: String, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerImageVulnerabilityFilter): ContainerImageVulnerabilityPaginatedResponse
}

input GradesImageIdsElemMatchFilter {
  and: [GradesImageIdsFilter]
  or: [GradesImageIdsFilter]
  nor: [GradesImageIdsFilter]
  not: GradesImageIdsFilter
}

input GradesImageIdsFilter {
  id: StringFilter
  arch: StringFilter
  eq: NULL
  ne: NULL
  and: [GradesImageIdsFilter]
  or: [GradesImageIdsFilter]
  nor: [GradesImageIdsFilter]
  not: GradesImageIdsFilter
}

input GradesImageIdsListFilter {
  list_index_filter: GradesImageIdsListIndexFilter
  id: StringFilter
  arch: StringFilter
  eq: NULL
  ne: NULL
  and: [GradesImageIdsFilter]
  or: [GradesImageIdsFilter]
  nor: [GradesImageIdsFilter]
  not: GradesImageIdsFilter
}

input GradesImageIdsListIndexFilter {
  condition: GradesImageIdsFilter
  index: Int
}

"""Array with the tag history information."""
type History {
  """Unique immutable build identifier in the brew build system."""
  brew_build: String
  end_date: DateTime

  """The date for when the tag for the given docker_image_digest starts."""
  start_date: DateTime
}

input HistoryElemMatchFilter {
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

input HistoryFilter {
  brew_build: StringFilter
  end_date: DateTimeFilter
  start_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

input HistoryListFilter {
  list_index_filter: HistoryListIndexFilter
  brew_build: StringFilter
  end_date: DateTimeFilter
  start_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [HistoryFilter]
  or: [HistoryFilter]
  nor: [HistoryFilter]
  not: HistoryFilter
}

input HistoryListIndexFilter {
  condition: HistoryFilter
  index: Int
}

"""
Contains edited definition of the int scalar that does not limit the
number range (taken from reference JS implementation)

Scope: Pyxis subgraph
Usage: In and Out (Input, Output, Filtering)
"""
scalar Int64

input Int64Filter {
  eq: Int64
  ne: Int64
  le: Int64
  lt: Int64
  ge: Int64
  gt: Int64
  in: [Int64]
  out: [Int64]
}

input IntFilter {
  eq: Int
  ne: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int]
  out: [Int]
}

"""Issue fixed by an advisory."""
type Issue {
  """Unique identifier of the issue in the issue tracking system."""
  id: String

  """Hostname of the issue tracking system used."""
  issue_tracker: String

  """Publicly accessible URL of the issue information."""
  url: URI
}

input IssueElemMatchFilter {
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

input IssueFilter {
  id: StringFilter
  issue_tracker: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

input IssueListFilter {
  list_index_filter: IssueListIndexFilter
  id: StringFilter
  issue_tracker: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [IssueFilter]
  or: [IssueFilter]
  nor: [IssueFilter]
  not: IssueFilter
}

input IssueListIndexFilter {
  condition: IssueFilter
  index: Int
}

"""Image label."""
type Label {
  """The name of the label"""
  name: String

  """Value of the label."""
  value: String
}

input LabelElemMatchFilter {
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

input LabelFilter {
  name: StringFilter
  value: StringFilter
  eq: NULL
  ne: NULL
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

"""Image label."""
input LabelInput {
  """The name of the label"""
  name: String

  """Value of the label."""
  value: String
}

input LabelListFilter {
  list_index_filter: LabelListIndexFilter
  name: StringFilter
  value: StringFilter
  eq: NULL
  ne: NULL
  and: [LabelFilter]
  or: [LabelFilter]
  nor: [LabelFilter]
  not: LabelFilter
}

input LabelListIndexFilter {
  condition: LabelFilter
  index: Int
}

type Legal {
  description: String
  license_agreement_url: URI
  privacy_policy_url: URI
}

input LegalFilter {
  description: StringFilter
  license_agreement_url: URIFilter
  privacy_policy_url: URIFilter
  eq: NULL
  ne: NULL
  and: [LegalFilter]
  or: [LegalFilter]
  nor: [LegalFilter]
  not: LegalFilter
}

input LegalInput {
  description: String
  license_agreement_url: URI
  privacy_policy_url: URI
}

type LinkedResourcesItems {
  category: String
  description: String
  thumbnail_url: URI
  title: String
  type: String
  url: URI
}

input LinkedResourcesItemsElemMatchFilter {
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LinkedResourcesItemsFilter {
  category: StringFilter
  description: StringFilter
  thumbnail_url: URIFilter
  title: StringFilter
  type: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LinkedResourcesItemsInput {
  category: String
  description: String
  thumbnail_url: URI
  title: String
  type: String
  url: URI
}

input LinkedResourcesItemsListFilter {
  list_index_filter: LinkedResourcesItemsListIndexFilter
  category: StringFilter
  description: StringFilter
  thumbnail_url: URIFilter
  title: StringFilter
  type: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [LinkedResourcesItemsFilter]
  or: [LinkedResourcesItemsFilter]
  nor: [LinkedResourcesItemsFilter]
  not: LinkedResourcesItemsFilter
}

input LinkedResourcesItemsListIndexFilter {
  condition: LinkedResourcesItemsFilter
  index: Int
}

type Logo {
  url: URI
}

input LogoFilter {
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [LogoFilter]
  or: [LogoFilter]
  nor: [LogoFilter]
  not: LogoFilter
}

input LogoInput {
  url: URI
}

"""
Scalar is ensuring that user input is lowercase string.
Utilizing custom Marshmallow validator.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output)
"""
scalar LowercaseString

"""Status object for a mongoDB database"""
type MongoDBStatus {
  """Name of the database"""
  name: String

  """Indicates if database can be reached."""
  reachable: Boolean
}

"""Status of mongoDB databases Pyxis depends on."""
type MongoStatusGQL {
  mongodb_databases: [MongoDBStatus]
}

type Mutation {
  """Create image."""
  create_image(input: ContainerImageInput): ContainerImageResponse

  """Update/Patch image."""
  update_image(id: ObjectIDFilterScalar, input: ContainerImageInput): ContainerImageResponse

  """Replace image."""
  replace_image(id: ObjectIDFilterScalar, input: ContainerImageInput): ContainerImageResponse

  """Replace container image by manifest digest."""
  replace_image_by_manifest_digest_registry_and_repository(registry: String, repository: String, manifest_digest: String, input: ContainerImageInput): ContainerImageResponse

  """Update container image by manifest digest."""
  update_image_by_manifest_digest_registry_and_repository(registry: String, repository: String, manifest_digest: String, input: ContainerImageInput): ContainerImageResponse

  """Update/Patch a RPM manifest by ID."""
  update_image_rpm_manifest(id: ObjectIDFilterScalar, input: ContainerImageRPMManifestInput): ContainerImageRPMManifestResponse

  """Replace/Put a RPM Manifest by ID."""
  replace_image_rpm_manifest(id: ObjectIDFilterScalar, input: ContainerImageRPMManifestInput): ContainerImageRPMManifestResponse

  """Create a new RPM manifest for an image."""
  create_image_rpm_manifest(id: String, input: ContainerImageRPMManifestInput): ContainerImageRPMManifestResponse

  """Create a certification project image request"""
  create_certification_project_image_request(id: ObjectIDFilterScalar, input: CertProjectImageRequestInput): CertProjectImageRequestResponse

  """Partially update a vendor."""
  update_vendor(id: ObjectIDFilterScalar, input: ContainerVendorInput): ContainerVendorResponse

  """Create a certification project."""
  create_certification_project(input: CertificationProjectInput): CertificationProjectResponse

  """Partially update a certification project."""
  update_certification_project(id: ObjectIDFilterScalar, input: CertificationProjectInput): CertificationProjectResponse

  """Update a certification project."""
  replace_certification_project(id: ObjectIDFilterScalar, input: CertificationProjectInput): CertificationProjectResponse

  """Replace product listing."""
  replace_product_listing(id: ObjectIDFilterScalar, input: ProductListingInput): ProductListingResponse

  """Update product listing."""
  update_product_listing(id: ObjectIDFilterScalar, input: ProductListingInput): ProductListingResponse

  """Create product listing."""
  create_product_listing(input: ProductListingInput): ProductListingResponse

  """Create product validation."""
  create_product_validation(input: ProductValidationInput): ProductValidationResponse

  """Update product validation."""
  update_product_validation(id: ObjectIDFilterScalar, input: ProductValidationInput): ProductValidationResponse

  """Replace product validation."""
  replace_product_validation(id: ObjectIDFilterScalar, input: ProductValidationInput): ProductValidationResponse

  """Create an API key."""
  create_api_key(input: ApiKeyOrgIDWithDescriptionRequestInput): ApiKeyRespResponse

  """Delete API key."""
  delete_api_key(key_id: Int, org_id: Int): ApiKeyResponse

  """Create a certification project test result"""
  create_certification_project_test_result(id: ObjectIDFilterScalar, input: CertProjectTestResultInput): CertProjectTestResultResponse

  """Update/Patch certification project test result"""
  update_certification_project_test_result(id: ObjectIDFilterScalar, input: CertProjectTestResultInput): CertProjectTestResultResponse

  """Create a certification project artifact"""
  create_certification_project_artifact(id: ObjectIDFilterScalar, input: CertProjectArtifactInput): CertProjectArtifactResponse
}

"""
Scalar is ensuring that user sets correct value for NULL 
in filters, differing between absent field and field
with NULL value (eq or ne NULL). Validation is happening
on GraphQL layer.

Scope: Pyxis subgraph
Usage: In (Filtering)
"""
scalar NULL

"""
ObjectID scalar type validating, serializing and
deserializing ObjectID values in input and output.
Utilizing custom Marshmallow validator.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output)
"""
scalar ObjectID

input ObjectIDFilter {
  eq: ObjectIDFilterScalar
  ne: ObjectIDFilterScalar
  le: ObjectIDFilterScalar
  lt: ObjectIDFilterScalar
  ge: ObjectIDFilterScalar
  gt: ObjectIDFilterScalar
  in: [ObjectIDFilterScalar]
  out: [ObjectIDFilterScalar]
}

"""
Scalar used in filters and arguments for ObjectID. 
Validates and retypes from string to ObjectID.
Using pymongo ObjectId in GraphQL layer.

Scope: Pyxis subgraph
Usage: In (Filtering, Arguments)
"""
scalar ObjectIDFilterScalar

input ObjectIDListFilter {
  list_index_filter: ObjectIDListIndexFilter
  eq: ObjectIDFilterScalar
  ne: ObjectIDFilterScalar
  le: ObjectIDFilterScalar
  lt: ObjectIDFilterScalar
  ge: ObjectIDFilterScalar
  gt: ObjectIDFilterScalar
  in: [ObjectIDFilterScalar]
  out: [ObjectIDFilterScalar]
}

input ObjectIDListIndexFilter {
  condition: ObjectIDFilter
  index: Int
}

"""
Scalar is responsible for encrypting and decrypting user input. 
This is happening on the Marshmallow layer during serialization
and deserialization for specific mutations (encoding) and queries
(decoding), for users with appropriate permissions.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output) 
"""
scalar OpenPGPEncrypted

"""
An Operator Bundle is a container image that stores the Kubernetes manifests and
metadata associated with an operator. A bundle is meant to represent a specific
version of an operator.
"""
type OperatorBundle {
  """Specific information from the CSV requested by customer."""
  alm_examples: [ALMExample]

  """
  A subset of the \"metadata.annotations\" object from the CSV. Any annotations
  that are in the \"operators.openshift.io\" namespace that are strings of JSON
  will be expanded if it is valid JSON. Namespaces are not preserved due to
  their usage of special characters and all dashes are converted to underscores
  for consistency with other fields.
  """
  annotations: OperatorBundleAnnotation

  """
  List of all supported architectures. An empty list means that architectures
  are unknown as CSV doesn't include architecture labels.
  """
  architectures: [String]

  """
  The 'bundle' is the operator representation of a version of operator metadata.
  There is one bundle per operator/package channel for a particular OpenShift version.
  """
  bundle: String

  """Pullspec of the operator bundle e.g. quay.io/foo/bar@sha256:digest."""
  bundle_path: String

  """Digest from the bundle_path."""
  bundle_path_digest: String

  """Specific information from the CSV requested by customer."""
  capabilities: [String]

  """
  The channel for which this bundle is being released, e.g. \"amq-streams-1.5.x.
  """
  channel_name: String

  """Full name of the package. Usually consists of package_name.version."""
  csv_name: String

  """A public name to identify the Operator."""
  csv_display_name: String

  """
  A thorough description of the Operator’s functionality in form of a markdown blob.
  """
  csv_description: String

  """Short description of the CRD and operator functionality."""
  csv_metadata_description: String

  """Indicate if the bundle is in an index image."""
  in_index_img: Boolean

  """Specific information from the CSV requested by customer."""
  install_modes: [OperatorBundleInstallMode]

  """
  If true then the channel is the default for this package, false otherwise.
  """
  is_default_channel: Boolean

  """
  Indicate that the bundle is the latest version of a package in a channel for its associated OCP version (index image).
  """
  latest_in_channel: Boolean

  """Specific OCP version for this bundle, e.g. \"4.5\"."""
  ocp_version: SemVer

  """Organization as understood by iib, e.g. \"redhat-marketplace\"."""
  organization: String

  """The name of the operator, e.g. \"amq-streams\"."""
  package: String

  """
  Specific information from the CSV requested by customer. Should correspond with values from alm_examples.
  """
  provided_apis: [ProvidedAPIsItems]

  """Specific information from the CSV requested by customer."""
  related_images: [RelatedImagesItems]

  """Where this bundle was collected from, e.g. \"quay.io/foo/bar:v4.5\"."""
  source_index_container_path: String

  """The operator version for this bundle"""
  version: SemVer

  """Original version of the bundle, used to recognize semver validity."""
  version_original: String

  """Name of operator which the bundle replaces."""
  replaces: String

  """
  List of skipped updates. See OLM upgrades documentation for more details.
  """
  skips: [String]

  """String describing skipped versions."""
  skip_range: String

  """String describing bundle provider"""
  provider: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

"""
A subset of the \"metadata.annotations\" object from the CSV. Any annotations
that are in the \"operators.openshift.io\" namespace that are strings of JSON
will be expanded if it is valid JSON. Namespaces are not preserved due to their
usage of special characters and all dashes are converted to underscores for
consistency with other fields.
"""
type OperatorBundleAnnotation {
  """
  The deserialized value of operators.openshift.io/infrastructure-features. This defaults to an empty array.
  """
  infrastructure_features: [String]

  """
  List of annotations for operator metadata to define various infrastructure
  features of an operator. Only lowercase. Nullable to indicate field not used.
  """
  features: [LowercaseString]

  """
  The deserialized value of operators.openshift.io/valid-subscription. This defaults to an empty array.
  """
  valid_subscription: [String]
}

input OperatorBundleAnnotationFilter {
  infrastructure_features_size: IntFilter
  infrastructure_features: StringListFilter
  features_size: IntFilter
  features: StringListFilter
  valid_subscription_size: IntFilter
  valid_subscription: StringListFilter
  eq: NULL
  ne: NULL
  and: [OperatorBundleAnnotationFilter]
  or: [OperatorBundleAnnotationFilter]
  nor: [OperatorBundleAnnotationFilter]
  not: OperatorBundleAnnotationFilter
}

"""
A subset of the \"metadata.annotations\" object from the CSV. Any annotations
that are in the \"operators.openshift.io\" namespace that are strings of JSON
will be expanded if it is valid JSON. Namespaces are not preserved due to their
usage of special characters and all dashes are converted to underscores for
consistency with other fields.
"""
input OperatorBundleAnnotationInput {
  """
  The deserialized value of operators.openshift.io/infrastructure-features. This defaults to an empty array.
  """
  infrastructure_features: [String]

  """
  List of annotations for operator metadata to define various infrastructure
  features of an operator. Only lowercase. Nullable to indicate field not used.
  """
  features: [LowercaseString]

  """
  The deserialized value of operators.openshift.io/valid-subscription. This defaults to an empty array.
  """
  valid_subscription: [String]
}

input OperatorBundleFilter {
  alm_examples_size: IntFilter
  alm_examples_elemMatch: ALMExampleElemMatchFilter
  alm_examples: ALMExampleListFilter
  annotations: OperatorBundleAnnotationFilter
  architectures_size: IntFilter
  architectures: StringListFilter
  bundle: StringFilter
  bundle_path: StringFilter
  bundle_path_digest: StringFilter
  capabilities_size: IntFilter
  capabilities: StringListFilter
  channel_name: StringFilter
  csv_name: StringFilter
  csv_display_name: StringFilter
  csv_description: StringFilter
  csv_metadata_description: StringFilter
  in_index_img: BooleanFilter
  install_modes_size: IntFilter
  install_modes_elemMatch: OperatorBundleInstallModeElemMatchFilter
  install_modes: OperatorBundleInstallModeListFilter
  is_default_channel: BooleanFilter
  latest_in_channel: BooleanFilter
  ocp_version: SemVerFilter
  organization: StringFilter
  package: StringFilter
  provided_apis_size: IntFilter
  provided_apis_elemMatch: ProvidedAPIsItemsElemMatchFilter
  provided_apis: ProvidedAPIsItemsListFilter
  related_images_size: IntFilter
  related_images_elemMatch: RelatedImagesItemsElemMatchFilter
  related_images: RelatedImagesItemsListFilter
  source_index_container_path: StringFilter
  version: SemVerFilter
  version_original: StringFilter
  replaces: StringFilter
  skips_size: IntFilter
  skips: StringListFilter
  skip_range: StringFilter
  provider: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [OperatorBundleFilter]
  or: [OperatorBundleFilter]
  nor: [OperatorBundleFilter]
  not: OperatorBundleFilter
}

"""Specific information from the CSV requested by customer."""
type OperatorBundleInstallMode {
  supported: Boolean
  type: String
}

input OperatorBundleInstallModeElemMatchFilter {
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input OperatorBundleInstallModeFilter {
  supported: BooleanFilter
  type: StringFilter
  eq: NULL
  ne: NULL
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input OperatorBundleInstallModeListFilter {
  list_index_filter: OperatorBundleInstallModeListIndexFilter
  supported: BooleanFilter
  type: StringFilter
  eq: NULL
  ne: NULL
  and: [OperatorBundleInstallModeFilter]
  or: [OperatorBundleInstallModeFilter]
  nor: [OperatorBundleInstallModeFilter]
  not: OperatorBundleInstallModeFilter
}

input OperatorBundleInstallModeListIndexFilter {
  condition: OperatorBundleInstallModeFilter
  index: Int
}

type OperatorBundlePaginatedResponse {
  data: [OperatorBundle]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type OperatorBundlesItems {
  """Bundle unique identifier"""
  _id: ObjectID

  """Bundle package name"""
  package: String
  capabilities: [String]

  """Specific OCP version for this bundle, e.g. \"4.5\"."""
  ocp_version: SemVer

  """
  A subset of the \"metadata.annotations\" object from the CSV. Any annotations
  that are in the \"operators.openshift.io\" namespace that are strings of JSON
  will be expanded if it is valid JSON. Namespaces are not preserved due to
  their usage of special characters and all dashes are converted to underscores
  for consistency with other fields.
  """
  annotations: OperatorBundleAnnotation
}

input OperatorBundlesItemsElemMatchFilter {
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

input OperatorBundlesItemsFilter {
  _id: ObjectIDFilter
  package: StringFilter
  capabilities_size: IntFilter
  capabilities: StringListFilter
  ocp_version: SemVerFilter
  annotations: OperatorBundleAnnotationFilter
  eq: NULL
  ne: NULL
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

input OperatorBundlesItemsInput {
  """Bundle unique identifier"""
  _id: ObjectID

  """Bundle package name"""
  package: String
  capabilities: [String]

  """Specific OCP version for this bundle, e.g. \"4.5\"."""
  ocp_version: SemVer

  """
  A subset of the \"metadata.annotations\" object from the CSV. Any annotations
  that are in the \"operators.openshift.io\" namespace that are strings of JSON
  will be expanded if it is valid JSON. Namespaces are not preserved due to
  their usage of special characters and all dashes are converted to underscores
  for consistency with other fields.
  """
  annotations: OperatorBundleAnnotationInput
}

input OperatorBundlesItemsListFilter {
  list_index_filter: OperatorBundlesItemsListIndexFilter
  _id: ObjectIDFilter
  package: StringFilter
  capabilities_size: IntFilter
  capabilities: StringListFilter
  ocp_version: SemVerFilter
  annotations: OperatorBundleAnnotationFilter
  eq: NULL
  ne: NULL
  and: [OperatorBundlesItemsFilter]
  or: [OperatorBundlesItemsFilter]
  nor: [OperatorBundlesItemsFilter]
  not: OperatorBundlesItemsFilter
}

input OperatorBundlesItemsListIndexFilter {
  condition: OperatorBundlesItemsFilter
  index: Int
}

"""
List of operator indices from which operator bundle metadata are extracted to operatorBundles collection.
"""
type OperatorIndex {
  """OCP version, e.g. 4.5."""
  ocp_version: SemVer

  """Organization, as understood by iib, e.g. redhat-marketplace."""
  organization: String

  """
  The docker path used to pull this index container, e.g. quay.io/foo/bar:v4.5.
  """
  path: String

  """The date till the index image is valid"""
  end_of_life: DateTime

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

input OperatorIndexFilter {
  ocp_version: SemVerFilter
  organization: StringFilter
  path: StringFilter
  end_of_life: DateTimeFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [OperatorIndexFilter]
  or: [OperatorIndexFilter]
  nor: [OperatorIndexFilter]
  not: OperatorIndexFilter
}

type OperatorIndexPaginatedResponse {
  data: [OperatorIndex]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type OperatorIndexResponse {
  data: OperatorIndex
  error: ResponseError
}

type OperatorPackage {
  association: String
  package_name: String
  source: String

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: OperatorPackageEdges
}

type OperatorPackageEdges {
  """Get operator bundles."""
  operator_bundle(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], organization: String, ocp_version: String, channel_name: String, package: String, latest_ocp_version: Boolean, filter: OperatorBundleFilter): OperatorBundlePaginatedResponse
}

input OperatorPackageFilter {
  association: StringFilter
  package_name: StringFilter
  source: StringFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [OperatorPackageFilter]
  or: [OperatorPackageFilter]
  nor: [OperatorPackageFilter]
  not: OperatorPackageFilter
}

type OperatorPackagePaginatedResponse {
  data: [OperatorPackage]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type OperatorPackageResponse {
  data: OperatorPackage
  error: ResponseError
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type ParsedData {
  architecture: String
  author: String
  command: String
  comment: String
  container: String

  """
  The 'created' date reported by image metadata. Stored as String because we do not have control on that format.
  """
  created: String
  docker_image_digest: String
  docker_image_id: String

  """Version of docker reported by 'docker inspect' for this image."""
  docker_version: String
  env_variables: [String]
  image_id: String
  labels: [Label]

  """Layer digests from the image."""
  layers: [String]
  os: String
  ports: String

  """Repositories defined within an image as reported by yum command."""
  repos: [ParsedDataRepo]

  """Size of this image as reported by image metadata."""
  size: Int64

  """Information about uncompressed layer sizes."""
  uncompressed_layer_sizes: [UncompressedLayerSize]

  """Uncompressed images size in bytes (sum of uncompressed layers size)."""
  uncompressed_size_bytes: Int64

  """The user on the images."""
  user: String

  """Virtual size of this image as reported by image metadata."""
  virtual_size: Int64
}

input ParsedDataFilter {
  architecture: StringFilter
  author: StringFilter
  command: StringFilter
  comment: StringFilter
  container: StringFilter
  created: StringFilter
  docker_image_digest: StringFilter
  docker_image_id: StringFilter
  docker_version: StringFilter
  env_variables_size: IntFilter
  env_variables: StringListFilter
  image_id: StringFilter
  labels_size: IntFilter
  labels_elemMatch: LabelElemMatchFilter
  labels: LabelListFilter
  layers_size: IntFilter
  layers: StringListFilter
  os: StringFilter
  ports: StringFilter
  repos_size: IntFilter
  repos_elemMatch: ParsedDataRepoElemMatchFilter
  repos: ParsedDataRepoListFilter
  size: Int64Filter
  uncompressed_layer_sizes_size: IntFilter
  uncompressed_layer_sizes_elemMatch: UncompressedLayerSizeElemMatchFilter
  uncompressed_layer_sizes: UncompressedLayerSizeListFilter
  uncompressed_size_bytes: Int64Filter
  user: StringFilter
  virtual_size: Int64Filter
  eq: NULL
  ne: NULL
  and: [ParsedDataFilter]
  or: [ParsedDataFilter]
  nor: [ParsedDataFilter]
  not: ParsedDataFilter
}

input ParsedDataInput {
  architecture: String
  author: String
  command: String
  comment: String
  container: String

  """
  The 'created' date reported by image metadata. Stored as String because we do not have control on that format.
  """
  created: String
  docker_image_digest: String
  docker_image_id: String

  """Version of docker reported by 'docker inspect' for this image."""
  docker_version: String
  env_variables: [String]
  image_id: String
  labels: [LabelInput]

  """Layer digests from the image."""
  layers: [String]
  os: String
  ports: String

  """Repositories defined within an image as reported by yum command."""
  repos: [ParsedDataRepoInput]

  """Size of this image as reported by image metadata."""
  size: Int64

  """Information about uncompressed layer sizes."""
  uncompressed_layer_sizes: [UncompressedLayerSizeInput]

  """Uncompressed images size in bytes (sum of uncompressed layers size)."""
  uncompressed_size_bytes: Int64

  """The user on the images."""
  user: String

  """Virtual size of this image as reported by image metadata."""
  virtual_size: Int64
}

type ParsedDataRepo {
  baseurl: String
  expire: String
  filename: String
  id: String
  name: String
  pkgs: String
  size: String
  updated: String
}

input ParsedDataRepoElemMatchFilter {
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input ParsedDataRepoFilter {
  baseurl: StringFilter
  expire: StringFilter
  filename: StringFilter
  id: StringFilter
  name: StringFilter
  pkgs: StringFilter
  size: StringFilter
  updated: StringFilter
  eq: NULL
  ne: NULL
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input ParsedDataRepoInput {
  baseurl: String
  expire: String
  filename: String
  id: String
  name: String
  pkgs: String
  size: String
  updated: String
}

input ParsedDataRepoListFilter {
  list_index_filter: ParsedDataRepoListIndexFilter
  baseurl: StringFilter
  expire: StringFilter
  filename: StringFilter
  id: StringFilter
  name: StringFilter
  pkgs: StringFilter
  size: StringFilter
  updated: StringFilter
  eq: NULL
  ne: NULL
  and: [ParsedDataRepoFilter]
  or: [ParsedDataRepoFilter]
  nor: [ParsedDataRepoFilter]
  not: ParsedDataRepoFilter
}

input ParsedDataRepoListIndexFilter {
  condition: ParsedDataRepoFilter
  index: Int
}

type Product {
  """Engineering id of the product."""
  itProductServiceId: ID
}

"""
Product listings define a marketing page in the Ecosystem Catalog. It allows you
to group repos and showcase what they accomplish together as an application. In
the case of operators, your CSV file populates OperatorHub, which can only be
viewed in cluster through OpenShift. Your product listing is publicly visible in
the Ecosystem Catalog so anyone can know that it is offered.
"""
type ProductListing {
  category: String

  """List of unique identifiers for the certification project."""
  cert_projects: [ObjectID]

  """
  List of contacts for the product listing. This field is required when the product listing is published.
  """
  contacts: [ContactsItems]

  """This field is required when the product listing is published."""
  descriptions: Descriptions

  """Company node ID from Red Hat Connect. Read only."""
  drupal_company_id: Int

  """FAQ section for the catalog page."""
  faqs: [FAQSItems]

  """Features section for the catalog page."""
  features: [FeaturesItems]

  """Indicates if the listing is eligible to be featured in Catalog."""
  focus_product: Boolean

  """This field is required when the product listing is published."""
  functional_categories: [String]

  """Information related to helm chart product listing."""
  helm_chart: ProductListingHelmChart
  legal: Legal

  """This field is required when the product listing is published."""
  linked_resources: [LinkedResourcesItems]
  logo: Logo

  """This field is required when the product listing is published."""
  name: String

  """Tracks history for the `published` field"""
  published_history: FieldHistoryBoolean

  """This field is required when the product listing is published."""
  published: Boolean

  """
  This field is related to store initial publish date for product listing.
  """
  initial_publish_date: DateTime

  """
  Flag determining if product listing is considered to be deleted. Product
  listing can be deleted only if it is not published. Value is set to False by default.
  """
  deleted: Boolean
  quick_start_configuration: QuickStartConfiguration

  """List of unique identifiers for the repository."""
  repositories: [ObjectID]

  """List of search aliases for Solr."""
  search_aliases: [SearchAliasesItems]

  """This field is required when the product listing is published."""
  support: Support

  """List of target platforms for the product listing."""
  target_platforms: [String]

  """This field is required when the product listing is published."""
  type: String
  vendor_label: String
  operator_bundles: [OperatorBundlesItems]

  """
  Special certifications specific to the certification platform. The value is
  given by attached certification projects which are published.
  """
  certification_badges: [String]

  """
  Special certifications specific to the certification platform. The value is
  given by all attached certification projects with any certification_level.
  """
  certification_badges_all: [String]

  """
  List of badges disabled for given product. This field is taken into account
  when synchronizing badges from certification projects.
  """
  certification_badges_exclude: [String]

  """Tracks history for the `certification_level` field"""
  certification_level_history: FieldHistoryString

  """
  The product listing content can be certified on several levels. This field
  determines whether the content was certified by Red Hat itself, by an ISV
  partner who followed official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """List of industries to which the product listing belongs."""
  industries: [String]

  """
  Determine a way how a product is deployed, based only on published projects.
  """
  deployed_as: [String]

  """
  Determine a way how a product is deployed, based on all projects with any certification_status.
  """
  deployed_as_all: [String]

  """
  Reflects the date when the last certification event happened for published
  product (eg. attached certification project is published, new image is
  published, helm chart released)
  """
  last_published_certification_date: DateTime

  """Data about all related approved Red Hat validations."""
  product_validations_data: ProductValidationsData

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
  edges: ProductListingEdges
}

type ProductListingEdges {
  """Vendor associated with the product listing."""
  vendor: ContainerVendorResponse

  """Get certification projects associated with product listing."""
  cert_projects(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertificationProjectFilter): CertificationProjectPaginatedResponse

  """Get product validations by product listing _id."""
  product_validations(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductValidationFilter): ProductValidationPaginatedResponse
}

"""
Product listings define a marketing page in the Ecosystem Catalog. It allows you
to group repos and showcase what they accomplish together as an application. In
the case of operators, your CSV file populates OperatorHub, which can only be
viewed in cluster through OpenShift. Your product listing is publicly visible in
the Ecosystem Catalog so anyone can know that it is offered.
"""
type ProductListingFederated {
  category: String

  """List of unique identifiers for the certification project."""
  cert_projects: [ObjectID]

  """
  List of contacts for the product listing. This field is required when the product listing is published.
  """
  contacts: [ContactsItems]

  """This field is required when the product listing is published."""
  descriptions: Descriptions

  """Company node ID from Red Hat Connect. Read only."""
  drupal_company_id: Int

  """FAQ section for the catalog page."""
  faqs: [FAQSItems]

  """Features section for the catalog page."""
  features: [FeaturesItems]

  """Indicates if the listing is eligible to be featured in Catalog."""
  focus_product: Boolean

  """This field is required when the product listing is published."""
  functional_categories: [String]

  """Information related to helm chart product listing."""
  helm_chart: ProductListingHelmChart
  legal: Legal

  """This field is required when the product listing is published."""
  linked_resources: [LinkedResourcesItems]
  logo: Logo

  """This field is required when the product listing is published."""
  name: String

  """Tracks history for the `published` field"""
  published_history: FieldHistoryBoolean

  """This field is required when the product listing is published."""
  published: Boolean

  """
  This field is related to store initial publish date for product listing.
  """
  initial_publish_date: DateTime

  """
  Flag determining if product listing is considered to be deleted. Product
  listing can be deleted only if it is not published. Value is set to False by default.
  """
  deleted: Boolean
  quick_start_configuration: QuickStartConfiguration

  """List of unique identifiers for the repository."""
  repositories: [ObjectID]

  """List of search aliases for Solr."""
  search_aliases: [SearchAliasesItems]

  """This field is required when the product listing is published."""
  support: Support

  """List of target platforms for the product listing."""
  target_platforms: [String]

  """This field is required when the product listing is published."""
  type: String
  vendor_label: String
  operator_bundles: [OperatorBundlesItems]

  """
  Special certifications specific to the certification platform. The value is
  given by attached certification projects which are published.
  """
  certification_badges: [String]

  """
  Special certifications specific to the certification platform. The value is
  given by all attached certification projects with any certification_level.
  """
  certification_badges_all: [String]

  """
  List of badges disabled for given product. This field is taken into account
  when synchronizing badges from certification projects.
  """
  certification_badges_exclude: [String]

  """Tracks history for the `certification_level` field"""
  certification_level_history: FieldHistoryString

  """
  The product listing content can be certified on several levels. This field
  determines whether the content was certified by Red Hat itself, by an ISV
  partner who followed official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """List of industries to which the product listing belongs."""
  industries: [String]

  """
  Determine a way how a product is deployed, based only on published projects.
  """
  deployed_as: [String]

  """
  Determine a way how a product is deployed, based on all projects with any certification_status.
  """
  deployed_as_all: [String]

  """
  Reflects the date when the last certification event happened for published
  product (eg. attached certification project is published, new image is
  published, helm chart released)
  """
  last_published_certification_date: DateTime

  """
  Field resolves PublicProductListingFunctionalInfo in federated schema. It is
  used to provide information about the product listing functional certification.
  """
  functional_info: PublicProductListingFunctionalInfo

  """Data about all related approved Red Hat validations."""
  product_validations_data: ProductValidationsData

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

type ProductListingFederatedConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [ProductListingFederatedEdge]
}

type ProductListingFederatedEdge {
  node: ProductListingFederated
}

input ProductListingFilter {
  category: StringFilter
  cert_projects_size: IntFilter
  cert_projects: ObjectIDListFilter
  contacts_size: IntFilter
  contacts_elemMatch: ContactsItemsElemMatchFilter
  contacts: ContactsItemsListFilter
  descriptions: DescriptionsFilter
  drupal_company_id: IntFilter
  faqs_size: IntFilter
  faqs_elemMatch: FAQSItemsElemMatchFilter
  faqs: FAQSItemsListFilter
  features_size: IntFilter
  features_elemMatch: FeaturesItemsElemMatchFilter
  features: FeaturesItemsListFilter
  focus_product: BooleanFilter
  functional_categories_size: IntFilter
  functional_categories: StringListFilter
  helm_chart: ProductListingHelmChartFilter
  legal: LegalFilter
  linked_resources_size: IntFilter
  linked_resources_elemMatch: LinkedResourcesItemsElemMatchFilter
  linked_resources: LinkedResourcesItemsListFilter
  logo: LogoFilter
  name: StringFilter
  published_history: FieldHistoryBooleanFilter
  published: BooleanFilter
  initial_publish_date: DateTimeFilter
  deleted: BooleanFilter
  quick_start_configuration: QuickStartConfigurationFilter
  repositories_size: IntFilter
  repositories: ObjectIDListFilter
  search_aliases_size: IntFilter
  search_aliases_elemMatch: SearchAliasesItemsElemMatchFilter
  search_aliases: SearchAliasesItemsListFilter
  support: SupportFilter
  target_platforms_size: IntFilter
  target_platforms: StringListFilter
  type: StringFilter
  vendor_label: StringFilter
  operator_bundles_size: IntFilter
  operator_bundles_elemMatch: OperatorBundlesItemsElemMatchFilter
  operator_bundles: OperatorBundlesItemsListFilter
  certification_badges_size: IntFilter
  certification_badges: StringListFilter
  certification_badges_all_size: IntFilter
  certification_badges_all: StringListFilter
  certification_badges_exclude_size: IntFilter
  certification_badges_exclude: StringListFilter
  certification_level_history: FieldHistoryStringFilter
  certification_level: StringFilter
  industries_size: IntFilter
  industries: StringListFilter
  deployed_as_size: IntFilter
  deployed_as: StringListFilter
  deployed_as_all_size: IntFilter
  deployed_as_all: StringListFilter
  last_published_certification_date: DateTimeFilter
  product_validations_data: ProductValidationsDataFilter
  org_id: IntFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ProductListingFilter]
  or: [ProductListingFilter]
  nor: [ProductListingFilter]
  not: ProductListingFilter
}

type ProductListingHelmChart {
  """OCP versions for this helm chart."""
  ocp_versions: [String]

  """Helm chart specific information."""
  charts: [ProductListingHelmChartDetail]
}

type ProductListingHelmChartDetail {
  """Helm chart name."""
  chart_name: String
}

input ProductListingHelmChartDetailElemMatchFilter {
  and: [ProductListingHelmChartDetailFilter]
  or: [ProductListingHelmChartDetailFilter]
  nor: [ProductListingHelmChartDetailFilter]
  not: ProductListingHelmChartDetailFilter
}

input ProductListingHelmChartDetailFilter {
  chart_name: StringFilter
  eq: NULL
  ne: NULL
  and: [ProductListingHelmChartDetailFilter]
  or: [ProductListingHelmChartDetailFilter]
  nor: [ProductListingHelmChartDetailFilter]
  not: ProductListingHelmChartDetailFilter
}

input ProductListingHelmChartDetailInput {
  """Helm chart name."""
  chart_name: String
}

input ProductListingHelmChartDetailListFilter {
  list_index_filter: ProductListingHelmChartDetailListIndexFilter
  chart_name: StringFilter
  eq: NULL
  ne: NULL
  and: [ProductListingHelmChartDetailFilter]
  or: [ProductListingHelmChartDetailFilter]
  nor: [ProductListingHelmChartDetailFilter]
  not: ProductListingHelmChartDetailFilter
}

input ProductListingHelmChartDetailListIndexFilter {
  condition: ProductListingHelmChartDetailFilter
  index: Int
}

input ProductListingHelmChartFilter {
  ocp_versions_size: IntFilter
  ocp_versions: StringListFilter
  charts_size: IntFilter
  charts_elemMatch: ProductListingHelmChartDetailElemMatchFilter
  charts: ProductListingHelmChartDetailListFilter
  eq: NULL
  ne: NULL
  and: [ProductListingHelmChartFilter]
  or: [ProductListingHelmChartFilter]
  nor: [ProductListingHelmChartFilter]
  not: ProductListingHelmChartFilter
}

input ProductListingHelmChartInput {
  """OCP versions for this helm chart."""
  ocp_versions: [String]

  """Helm chart specific information."""
  charts: [ProductListingHelmChartDetailInput]
}

"""
Product listings define a marketing page in the Ecosystem Catalog. It allows you
to group repos and showcase what they accomplish together as an application. In
the case of operators, your CSV file populates OperatorHub, which can only be
viewed in cluster through OpenShift. Your product listing is publicly visible in
the Ecosystem Catalog so anyone can know that it is offered.
"""
input ProductListingInput {
  category: String

  """List of unique identifiers for the certification project."""
  cert_projects: [ObjectID]

  """
  List of contacts for the product listing. This field is required when the product listing is published.
  """
  contacts: [ContactsItemsInput]

  """This field is required when the product listing is published."""
  descriptions: DescriptionsInput

  """Company node ID from Red Hat Connect. Read only."""
  drupal_company_id: Int

  """FAQ section for the catalog page."""
  faqs: [FAQSItemsInput]

  """Features section for the catalog page."""
  features: [FeaturesItemsInput]

  """Indicates if the listing is eligible to be featured in Catalog."""
  focus_product: Boolean

  """This field is required when the product listing is published."""
  functional_categories: [String]

  """Information related to helm chart product listing."""
  helm_chart: ProductListingHelmChartInput
  legal: LegalInput

  """This field is required when the product listing is published."""
  linked_resources: [LinkedResourcesItemsInput]
  logo: LogoInput

  """This field is required when the product listing is published."""
  name: String

  """Tracks history for the `published` field"""
  published_history: FieldHistoryBooleanInput

  """This field is required when the product listing is published."""
  published: Boolean

  """
  This field is related to store initial publish date for product listing.
  """
  initial_publish_date: DateTime

  """
  Flag determining if product listing is considered to be deleted. Product
  listing can be deleted only if it is not published. Value is set to False by default.
  """
  deleted: Boolean
  quick_start_configuration: QuickStartConfigurationInput

  """List of unique identifiers for the repository."""
  repositories: [ObjectID]

  """List of search aliases for Solr."""
  search_aliases: [SearchAliasesItemsInput]

  """This field is required when the product listing is published."""
  support: SupportInput

  """List of target platforms for the product listing."""
  target_platforms: [String]

  """This field is required when the product listing is published."""
  type: String
  vendor_label: String
  operator_bundles: [OperatorBundlesItemsInput]

  """
  Special certifications specific to the certification platform. The value is
  given by attached certification projects which are published.
  """
  certification_badges: [String]

  """
  Special certifications specific to the certification platform. The value is
  given by all attached certification projects with any certification_level.
  """
  certification_badges_all: [String]

  """
  List of badges disabled for given product. This field is taken into account
  when synchronizing badges from certification projects.
  """
  certification_badges_exclude: [String]

  """Tracks history for the `certification_level` field"""
  certification_level_history: FieldHistoryStringInput

  """
  The product listing content can be certified on several levels. This field
  determines whether the content was certified by Red Hat itself, by an ISV
  partner who followed official Red Hat certification, or by vendor validation.
  """
  certification_level: String

  """List of industries to which the product listing belongs."""
  industries: [String]

  """
  Determine a way how a product is deployed, based only on published projects.
  """
  deployed_as: [String]

  """
  Determine a way how a product is deployed, based on all projects with any certification_status.
  """
  deployed_as_all: [String]

  """
  Reflects the date when the last certification event happened for published
  product (eg. attached certification project is published, new image is
  published, helm chart released)
  """
  last_published_certification_date: DateTime

  """Data about all related approved Red Hat validations."""
  product_validations_data: ProductValidationsDataInput

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

type ProductListingPaginatedResponse {
  data: [ProductListing]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ProductListingResponse {
  data: ProductListing
  error: ResponseError
}

"""
Product Validation stores data related to partner validation of their product.
Lists affinity to Red Hat products and its versions the product claims to support.
"""
type ProductValidation {
  """Product Listing Identifier."""
  product_listing: ObjectID

  """
  Indicates if the linked Product Listing is published and is used to control
  external access to Product Validations. Field is populated from Product
  Listing `published` field on create/update and updated on Product Listing change.
  """
  product_listing_published: Boolean

  """
  Indicates if the linked Product Listing is eligible to be featured in the
  Catalog as partner validated. Is set by Red Hat SME.
  """
  partner_validated: Boolean

  """
  List of Red Hat products and its versions partner product claims to support.
  """
  redhat_affinity: [RedHatProductAffinity]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

input ProductValidationFilter {
  product_listing: ObjectIDFilter
  product_listing_published: BooleanFilter
  partner_validated: BooleanFilter
  redhat_affinity_size: IntFilter
  redhat_affinity_elemMatch: RedHatProductAffinityElemMatchFilter
  redhat_affinity: RedHatProductAffinityListFilter
  _id: ObjectIDFilter
  org_id: IntFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ProductValidationFilter]
  or: [ProductValidationFilter]
  nor: [ProductValidationFilter]
  not: ProductValidationFilter
}

"""
Product Validation stores data related to partner validation of their product.
Lists affinity to Red Hat products and its versions the product claims to support.
"""
input ProductValidationInput {
  """Product Listing Identifier."""
  product_listing: ObjectID

  """
  Indicates if the linked Product Listing is published and is used to control
  external access to Product Validations. Field is populated from Product
  Listing `published` field on create/update and updated on Product Listing change.
  """
  product_listing_published: Boolean

  """
  Indicates if the linked Product Listing is eligible to be featured in the
  Catalog as partner validated. Is set by Red Hat SME.
  """
  partner_validated: Boolean

  """
  List of Red Hat products and its versions partner product claims to support.
  """
  redhat_affinity: [RedHatProductAffinityInput]

  """MongoDB unique _id"""
  _id: ObjectID

  """
  Red Hat Org ID / account_id from Red Hat SSO. Also corresponds to company_org_id in Red Hat Connect.
  """
  org_id: Int

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

type ProductValidationPaginatedResponse {
  data: [ProductValidation]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ProductValidationResponse {
  data: ProductValidation
  error: ResponseError
}

"""Data about all related approved Red Hat validations."""
type ProductValidationsData {
  """List of all related approved Red Hat validations."""
  validations: [ValidationItems]
}

input ProductValidationsDataFilter {
  validations_size: IntFilter
  validations_elemMatch: ValidationItemsElemMatchFilter
  validations: ValidationItemsListFilter
  eq: NULL
  ne: NULL
  and: [ProductValidationsDataFilter]
  or: [ProductValidationsDataFilter]
  nor: [ProductValidationsDataFilter]
  not: ProductValidationsDataFilter
}

"""Data about all related approved Red Hat validations."""
input ProductValidationsDataInput {
  """List of all related approved Red Hat validations."""
  validations: [ValidationItemsInput]
}

"""
Specific information from the CSV requested by customer.Should correspond with values from alm_examples.
"""
type ProvidedAPIsItems {
  group: String
  kind: String
  plural: String
  version: String
}

input ProvidedAPIsItemsElemMatchFilter {
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input ProvidedAPIsItemsFilter {
  group: StringFilter
  kind: StringFilter
  plural: StringFilter
  version: StringFilter
  eq: NULL
  ne: NULL
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input ProvidedAPIsItemsListFilter {
  list_index_filter: ProvidedAPIsItemsListIndexFilter
  group: StringFilter
  kind: StringFilter
  plural: StringFilter
  version: StringFilter
  eq: NULL
  ne: NULL
  and: [ProvidedAPIsItemsFilter]
  or: [ProvidedAPIsItemsFilter]
  nor: [ProvidedAPIsItemsFilter]
  not: ProvidedAPIsItemsFilter
}

input ProvidedAPIsItemsListIndexFilter {
  condition: ProvidedAPIsItemsFilter
  index: Int
}

type PublicProductListingFunctionalInfo {
  """Product listing ID"""
  productListingId: String
}

"""Pull request of certification test results."""
type PullRequest {
  """Pull request URL"""
  url: URI

  """Pull request identifier"""
  id: Int

  """Pull request status"""
  status: String
}

input PullRequestFilter {
  url: URIFilter
  id: IntFilter
  status: StringFilter
  eq: NULL
  ne: NULL
  and: [PullRequestFilter]
  or: [PullRequestFilter]
  nor: [PullRequestFilter]
  not: PullRequestFilter
}

"""Pull request of certification test results."""
input PullRequestInput {
  """Pull request URL"""
  url: URI

  """Pull request identifier"""
  id: Int

  """Pull request status"""
  status: String
}

type Query {
  """Get basic availability response."""
  get_ping: String

  """
  Get status of services and components on which the GraphQL Pyxis depends on.
  """
  get_status: StatusGQL

  """Get Mongo DB availability response."""
  get_mongo: MongoStatusGQL

  """Get Mongo DB availability response."""
  get_logs: ForwarderStatusResponse

  """Get container image by ID."""
  get_image(id: ObjectIDFilterScalar): ContainerImageResponse

  """Get container images. Exclude total for improved performance."""
  find_images(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get all images by Brew NVR. Exclude total for improved performance."""
  find_images_by_nvr(nvr: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get container image by manifest digest."""
  get_image_by_manifest_digest_registry_and_repository(registry: String, repository: String, manifest_digest: String): ContainerImageResponse

  """List images for a repository. Exclude total for improved performance."""
  find_repository_images_by_registry_path(registry: String, repository: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """List images for a repository + tag."""
  find_repository_images_by_registry_path_tag(registry: String, repository: String, tag: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get files for an image."""
  find_image_files(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerFileFilter): ContainerFilePaginatedResponse

  """
  Get multi-arch container images grouped by manifest_list_digest by
  certification project id. Note that filtering and sorting is applied before
  aggregating by manifest_list_digest. Pagination is applied after aggregation.
  """
  find_certification_projects_images_by_digest(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImageManifestDigestPaginatedResponse

  """Get all tag histories. Exclude total for improved performance."""
  find_tag_histories(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerTagHistoryFilter): ContainerTagHistoryPaginatedResponse

  """Get a tag history by ID."""
  get_tag_history(id: ObjectIDFilterScalar): ContainerTagHistoryResponse

  """Get a tag history by tag name."""
  get_tag_history_by_tag_name(registry: String, repository: String, tag: String): ContainerTagHistoryResponse

  """
  Get images for tag history that have or used to have the tag. Exclude total for improved performance.
  """
  find_tag_history_images(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get a certification project image request"""
  get_certification_image_request_by_id(id: ObjectIDFilterScalar): CertProjectImageRequestResponse

  """Get many certification project image requests"""
  get_certification_image_requests(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: CertProjectImageRequestFilter): CertProjectImageRequestPaginatedResponse

  """Get certification project image requests using its cert project ID."""
  get_certification_image_requests_by_cert_project_id(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: CertProjectImageRequestFilter): CertProjectImageRequestPaginatedResponse

  """Get image requests using its image id."""
  get_certification_image_requests_by_image_id(id: ObjectIDFilterScalar, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: CertProjectImageRequestFilter): CertProjectImageRequestPaginatedResponse

  """Get a certification project test result"""
  get_cert_project_test_result(id: ObjectIDFilterScalar): CertProjectTestResultResponse

  """Get many certification project test results by cert project ID"""
  get_cert_project_test_results(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectTestResultFilter): CertProjectTestResultPaginatedResponse

  """Get many certification project test results"""
  find_cert_project_test_results_by_id(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectTestResultFilter): CertProjectTestResultPaginatedResponse

  """Get test results by container image id"""
  get_test_results_by_image_id(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectTestResultFilter): CertProjectTestResultPaginatedResponse

  """Get a certification project artifact"""
  get_cert_project_artifact(id: ObjectIDFilterScalar): CertProjectArtifactResponse

  """Get a certification project artifacts"""
  get_cert_project_artifacts(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectArtifactFilter): CertProjectArtifactPaginatedResponse

  """Get artifacts by container image id"""
  get_certification_artifacts_by_image_id(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertProjectArtifactFilter): CertProjectArtifactPaginatedResponse

  """List operator bundles for a repository."""
  find_repository_operator_bundles_by_registry_path(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], registry: String, repository: String, filter: OperatorBundleFilter): OperatorBundlePaginatedResponse

  """Get operator bundles."""
  find_operator_bundles(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], organization: String, ocp_version: String, channel_name: String, package: String, latest_ocp_version: Boolean, filter: OperatorBundleFilter): OperatorBundlePaginatedResponse

  """Get operator package by ID."""
  get_operator_package(id: ObjectIDFilterScalar): OperatorPackageResponse

  """Get a list of operator packages."""
  find_operator_packages(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: OperatorPackageFilter): OperatorPackagePaginatedResponse

  """Get operator index by ID."""
  get_operator_index(id: ObjectIDFilterScalar): OperatorIndexResponse

  """Get a list of operator indexes."""
  find_operator_indices(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], organization: String, ocp_version: String, ocp_versions_range: String, filter: OperatorIndexFilter): OperatorIndexPaginatedResponse

  """
  Get Red Hat advisory by ID.
  You only have access to advisories that are already shipped.
  """
  get_advisory(id: String): RedHatContainerAdvisoryResponse

  """
  Get container Red Hat advisories.
  You only have access to advisories that are already shipped.
  """
  find_advisories(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: RedHatContainerAdvisoryFilter): RedHatContainerAdvisoryPaginatedResponse

  """Find container signature data by index."""
  find_signature_data_by_index(non_zero_index: Int, manifest_digest: String, repository: String, sort_by: [SortBy], filter: ContainerSignatureExternalFilter): ContainerSignatureExternalPaginatedResponse

  """Get an RPM manifest by ID"""
  get_rpm_manifest(id: ObjectIDFilterScalar): ContainerImageRPMManifestResponse

  """Get the RPM manifest for an image"""
  get_image_rpm_manifest(id: String): ContainerImageRPMManifestResponse

  """Get a repository by ID."""
  get_repository(id: ObjectIDFilterScalar): ContainerRepositoryResponse

  """Get all repositories."""
  find_repositories(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryPaginatedResponse

  """Get a repository by registry and path (product line/image name)."""
  get_repository_by_registry_path(registry: String, repository: String): ContainerRepositoryResponse

  """Get all repositories belonging to product listing."""
  find_product_listing_repositories(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryPaginatedResponse

  """Get the certification project for a repository."""
  get_repository_project_certification_by_registry_path(registry: String, repository: String): CertificationProjectResponse

  """Get a repository by ID."""
  repository(id: ObjectIDFilterScalar): ContainerRepositoryFederated

  """Get all repositories."""
  repositories(sortBy: [SortBy], page: Int = 0, first: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryFederatedConnection

  """Get a repository by registry and path (product line/image name)."""
  repository_by_registry(registry: String, repository: String): ContainerRepositoryFederated

  """Get all repositories belonging to product listing."""
  repositories_for_product_listing(id: ObjectIDFilterScalar, sortBy: [SortBy], page: Int = 0, first: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryFederatedConnection

  """Get all container repositories owned by the team."""
  repositories_by_team_id(id: String, sortBy: [SortBy], page: Int = 0, first: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryFederatedConnection

  """Get a vendor by ID."""
  get_vendor(id: ObjectIDFilterScalar): ContainerVendorResponse

  """Get a vendor by Company Org ID."""
  get_vendor_by_org_id(org_id: Int): ContainerVendorResponse

  """Get a vendor by label."""
  get_vendor_by_label(label: String): ContainerVendorResponse

  """Get the vendor for a repository."""
  get_repository_vendor_by_registry_path(registry: String, repository: String): ContainerVendorResponse

  """Get the product listings for a vendor by Company Org ID."""
  find_vendor_product_listings_by_org_id(org_id: Int, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get certification projects for a vendor by Company Org ID."""
  find_vendor_certification_projects_by_org_id(org_id: Int, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertificationProjectFilter): CertificationProjectPaginatedResponse

  """Get the repositories for a vendor label."""
  find_vendor_repositories_by_label(label: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerRepositoryFilter): ContainerRepositoryPaginatedResponse

  """Get the product listings for a vendor by label."""
  find_vendor_product_listings_by_label(label: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get an image vulnerability by ID."""
  get_image_vulnerability(id: ObjectIDFilterScalar): ContainerImageVulnerabilityResponse

  """
  Get a list of image vulnerabilities associated with an image. Exclude total for improved performance.
  """
  find_image_vulnerabilities(id: String, page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ContainerImageVulnerabilityFilter): ContainerImageVulnerabilityPaginatedResponse

  """Get certification project using its ID."""
  get_certification_project(id: ObjectIDFilterScalar): CertificationProjectResponse

  """Get certification project using Red Hat Connect project ID."""
  get_certification_project_by_pid(pid: String): CertificationProjectResponse

  """Get registry secrets for certification project using its ID."""
  get_registry_secrets_by_certification_id(id: ObjectIDFilterScalar): RegistrySecretsResponse

  """Get product listings for certification project using its ID."""
  find_certification_projects_product_listings(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get container image by ID of associated certification project."""
  find_certification_projects_images(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ContainerImageFilter): ContainerImagePaginatedResponse

  """Get all product listings."""
  find_product_listings(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get a product listing."""
  get_product_listing(id: ObjectIDFilterScalar): ProductListingResponse

  """Get all product listings associated with repository."""
  find_repository_product_listings(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get certification projects associated with product listing."""
  find_product_listing_certification_projects(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: CertificationProjectFilter): CertificationProjectPaginatedResponse

  """Find product listings associated with repository."""
  find_repository_product_listings_by_registry_path(registry: String, repository: String, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductListingFilter): ProductListingPaginatedResponse

  """
  Get the product listings for a given org id and a name that either matches the product name or the attached project name.
  """
  find_product_listings_by_name_org_id(org_id: Int, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, name: String, filter: ProductListingFilter): ProductListingPaginatedResponse

  """Get a product validation."""
  get_product_validation(id: ObjectIDFilterScalar): ProductValidationResponse

  """Get all product validations."""
  find_product_validations(sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductValidationFilter): ProductValidationPaginatedResponse

  """Get product validations by product listing _id."""
  find_product_validations_by_product_listing_id(id: ObjectIDFilterScalar, sort_by: [SortBy], page: Int = 0, page_size: Int = 50, filter: ProductValidationFilter): ProductValidationPaginatedResponse

  """Get a product listing."""
  product_listing(id: ObjectIDFilterScalar): ProductListingFederated

  """Get all product listings."""
  product_listings(sortBy: [SortBy], page: Int = 0, first: Int = 50, filter: ProductListingFilter): ProductListingFederatedConnection

  """Get a list of API keys associated with the given ORG ID."""
  get_key(org_id: Int): ApiKeyListResponse

  """List container grades for a repository."""
  find_repository_grades_by_registry_path(registry: String, repository: String): ContainerGradesListResponse

  """List all tools."""
  find_tools(page: Int = 0, page_size: Int = 50, sort_by: [SortBy], filter: ToolFilter): ToolPaginatedResponse

  """Get a tool by ID."""
  get_tool(id: ObjectIDFilterScalar): ToolResponse

  """Access Pyxis Central Schema field metadata."""
  get_field_metadata(type_name: String, field_name: String = ""): FieldMetadataResponse
  _service: _Service!
  _entities(representations: [_Any!]!): [_Entity]!
}

type QuickStartConfiguration {
  instructions: String

  """
  A flag indicating whether a product uses a default instruction for deployment.
  """
  default_deploy_instructions: Boolean
}

input QuickStartConfigurationFilter {
  instructions: StringFilter
  default_deploy_instructions: BooleanFilter
  eq: NULL
  ne: NULL
  and: [QuickStartConfigurationFilter]
  or: [QuickStartConfigurationFilter]
  nor: [QuickStartConfigurationFilter]
  not: QuickStartConfigurationFilter
}

input QuickStartConfigurationInput {
  instructions: String

  """
  A flag indicating whether a product uses a default instruction for deployment.
  """
  default_deploy_instructions: Boolean
}

"""Advisory associated with RH container image."""
type RedHatContainerAdvisory {
  """MongoDB unique _id"""
  _id: String

  """The content type of advisory. i.e. for CONTAINER or RPM."""
  content_type: String

  """Advisory description."""
  description: String
  object_type: String

  """Severity of the advisory."""
  severity: String

  """The date the image advisory shipped."""
  ship_date: DateTime

  """The solution of the advisory."""
  solution: String

  """Short summary of the advisory."""
  synopsis: String

  """Topic of the advisory."""
  topic: String

  """The type of advisory. i.e. for RHSA:2016-1001 the type is 'RHSA'."""
  type: String

  """Array of CVEs fixed by this advisory."""
  cves: [CVE]

  """Array of issues fixed by this advisory."""
  issues: [Issue]

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

input RedHatContainerAdvisoryFilter {
  _id: StringFilter
  content_type: StringFilter
  description: StringFilter
  object_type: StringFilter
  severity: StringFilter
  ship_date: DateTimeFilter
  solution: StringFilter
  synopsis: StringFilter
  topic: StringFilter
  type: StringFilter
  cves_size: IntFilter
  cves_elemMatch: CVEElemMatchFilter
  cves: CVEListFilter
  issues_size: IntFilter
  issues_elemMatch: IssueElemMatchFilter
  issues: IssueListFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [RedHatContainerAdvisoryFilter]
  or: [RedHatContainerAdvisoryFilter]
  nor: [RedHatContainerAdvisoryFilter]
  not: RedHatContainerAdvisoryFilter
}

type RedHatContainerAdvisoryPaginatedResponse {
  data: [RedHatContainerAdvisory]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type RedHatContainerAdvisoryResponse {
  data: RedHatContainerAdvisory
  error: ResponseError
}

"""
Stores data about single Red Hat product and its versions partner claims to support.
"""
type RedHatProductAffinity {
  """ID of the Red Hat product."""
  id: Int

  """Full Red Hat product name."""
  name: String

  """Short version of Rer Hat product name, e.g. RHEL"""
  short_name: String

  """
  Flag to signalize partner claim to support any future version of the Red Hat product.
  """
  support_future_versions: Boolean

  """List of versions of the Red Hat product supported by partner product."""
  versions: [RedHatProductVersion]
}

input RedHatProductAffinityElemMatchFilter {
  and: [RedHatProductAffinityFilter]
  or: [RedHatProductAffinityFilter]
  nor: [RedHatProductAffinityFilter]
  not: RedHatProductAffinityFilter
}

input RedHatProductAffinityFilter {
  id: IntFilter
  name: StringFilter
  short_name: StringFilter
  support_future_versions: BooleanFilter
  versions_size: IntFilter
  versions_elemMatch: RedHatProductVersionElemMatchFilter
  versions: RedHatProductVersionListFilter
  eq: NULL
  ne: NULL
  and: [RedHatProductAffinityFilter]
  or: [RedHatProductAffinityFilter]
  nor: [RedHatProductAffinityFilter]
  not: RedHatProductAffinityFilter
}

"""
Stores data about single Red Hat product and its versions partner claims to support.
"""
input RedHatProductAffinityInput {
  """ID of the Red Hat product."""
  id: Int

  """Full Red Hat product name."""
  name: String

  """Short version of Rer Hat product name, e.g. RHEL"""
  short_name: String

  """
  Flag to signalize partner claim to support any future version of the Red Hat product.
  """
  support_future_versions: Boolean

  """List of versions of the Red Hat product supported by partner product."""
  versions: [RedHatProductVersionInput]
}

input RedHatProductAffinityListFilter {
  list_index_filter: RedHatProductAffinityListIndexFilter
  id: IntFilter
  name: StringFilter
  short_name: StringFilter
  support_future_versions: BooleanFilter
  versions_size: IntFilter
  versions_elemMatch: RedHatProductVersionElemMatchFilter
  versions: RedHatProductVersionListFilter
  eq: NULL
  ne: NULL
  and: [RedHatProductAffinityFilter]
  or: [RedHatProductAffinityFilter]
  nor: [RedHatProductAffinityFilter]
  not: RedHatProductAffinityFilter
}

input RedHatProductAffinityListIndexFilter {
  condition: RedHatProductAffinityFilter
  index: Int
}

"""Details about Red Hat product."""
type RedHatProductItems {
  """Red Hat product name."""
  name: String

  """
  Flag to signalize partner claim to support any future version of the Red Hat product.
  """
  support_future_versions: Boolean

  """List of versions of the Red Hat product supported by partner product."""
  versions: [String]
}

input RedHatProductItemsElemMatchFilter {
  and: [RedHatProductItemsFilter]
  or: [RedHatProductItemsFilter]
  nor: [RedHatProductItemsFilter]
  not: RedHatProductItemsFilter
}

input RedHatProductItemsFilter {
  name: StringFilter
  support_future_versions: BooleanFilter
  versions_size: IntFilter
  versions: StringListFilter
  eq: NULL
  ne: NULL
  and: [RedHatProductItemsFilter]
  or: [RedHatProductItemsFilter]
  nor: [RedHatProductItemsFilter]
  not: RedHatProductItemsFilter
}

"""Details about Red Hat product."""
input RedHatProductItemsInput {
  """Red Hat product name."""
  name: String

  """
  Flag to signalize partner claim to support any future version of the Red Hat product.
  """
  support_future_versions: Boolean

  """List of versions of the Red Hat product supported by partner product."""
  versions: [String]
}

input RedHatProductItemsListFilter {
  list_index_filter: RedHatProductItemsListIndexFilter
  name: StringFilter
  support_future_versions: BooleanFilter
  versions_size: IntFilter
  versions: StringListFilter
  eq: NULL
  ne: NULL
  and: [RedHatProductItemsFilter]
  or: [RedHatProductItemsFilter]
  nor: [RedHatProductItemsFilter]
  not: RedHatProductItemsFilter
}

input RedHatProductItemsListIndexFilter {
  condition: RedHatProductItemsFilter
  index: Int
}

"""Version of the Red Hat product."""
type RedHatProductVersion {
  """ID of the Red Hat product version."""
  id: Int

  """Red Hat product version name."""
  name: String
}

input RedHatProductVersionElemMatchFilter {
  and: [RedHatProductVersionFilter]
  or: [RedHatProductVersionFilter]
  nor: [RedHatProductVersionFilter]
  not: RedHatProductVersionFilter
}

input RedHatProductVersionFilter {
  id: IntFilter
  name: StringFilter
  eq: NULL
  ne: NULL
  and: [RedHatProductVersionFilter]
  or: [RedHatProductVersionFilter]
  nor: [RedHatProductVersionFilter]
  not: RedHatProductVersionFilter
}

"""Version of the Red Hat product."""
input RedHatProductVersionInput {
  """ID of the Red Hat product version."""
  id: Int

  """Red Hat product version name."""
  name: String
}

input RedHatProductVersionListFilter {
  list_index_filter: RedHatProductVersionListIndexFilter
  id: IntFilter
  name: StringFilter
  eq: NULL
  ne: NULL
  and: [RedHatProductVersionFilter]
  or: [RedHatProductVersionFilter]
  nor: [RedHatProductVersionFilter]
  not: RedHatProductVersionFilter
}

input RedHatProductVersionListIndexFilter {
  condition: RedHatProductVersionFilter
  index: Int
}

"""Registry credentials."""
type RegistryCredentials {
  """Container registry username."""
  username: OpenPGPEncrypted

  """Container registry password."""
  password: OpenPGPEncrypted
}

input RegistryCredentialsFilter {
  username: StringFilter
  password: StringFilter
  eq: NULL
  ne: NULL
  and: [RegistryCredentialsFilter]
  or: [RegistryCredentialsFilter]
  nor: [RegistryCredentialsFilter]
  not: RegistryCredentialsFilter
}

"""Registry credentials."""
input RegistryCredentialsInput {
  """Container registry username."""
  username: OpenPGPEncrypted

  """Container registry password."""
  password: OpenPGPEncrypted
}

"""Registry credentials."""
type RegistrySecrets {
  registry_credentials: RegistryCredentials

  """
  Docker config for operator registry projects. Value has to be a valid JSON.
  """
  docker_config_json: OpenPGPEncrypted
}

type RegistrySecretsResponse {
  data: RegistrySecrets
  error: ResponseError
}

"""Specific information from the CSV requested by customer."""
type RelatedImagesItems {
  digest: String
  image: String
  name: String
}

input RelatedImagesItemsElemMatchFilter {
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

input RelatedImagesItemsFilter {
  digest: StringFilter
  image: StringFilter
  name: StringFilter
  eq: NULL
  ne: NULL
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

input RelatedImagesItemsListFilter {
  list_index_filter: RelatedImagesItemsListIndexFilter
  digest: StringFilter
  image: StringFilter
  name: StringFilter
  eq: NULL
  ne: NULL
  and: [RelatedImagesItemsFilter]
  or: [RelatedImagesItemsFilter]
  nor: [RelatedImagesItemsFilter]
  not: RelatedImagesItemsFilter
}

input RelatedImagesItemsListIndexFilter {
  condition: RelatedImagesItemsFilter
  index: Int
}

"""
Content stream grades associated with an image tag and ids of images that
participated in the evaluation of the current image's security grade.
"""
type RepositoryContentStreamGrades {
  """Name of floating tag associated with the image."""
  tag: String

  """Current image security grade."""
  grade: String

  """
  List of images that participated in the evaluation of the current image's security grade.
  """
  image_ids: [GradesImageIds]
}

input RepositoryContentStreamGradesElemMatchFilter {
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input RepositoryContentStreamGradesFilter {
  tag: StringFilter
  grade: StringFilter
  image_ids_size: IntFilter
  image_ids_elemMatch: GradesImageIdsElemMatchFilter
  image_ids: GradesImageIdsListFilter
  eq: NULL
  ne: NULL
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input RepositoryContentStreamGradesListFilter {
  list_index_filter: RepositoryContentStreamGradesListIndexFilter
  tag: StringFilter
  grade: StringFilter
  image_ids_size: IntFilter
  image_ids_elemMatch: GradesImageIdsElemMatchFilter
  image_ids: GradesImageIdsListFilter
  eq: NULL
  ne: NULL
  and: [RepositoryContentStreamGradesFilter]
  or: [RepositoryContentStreamGradesFilter]
  nor: [RepositoryContentStreamGradesFilter]
  not: RepositoryContentStreamGradesFilter
}

input RepositoryContentStreamGradesListIndexFilter {
  condition: RepositoryContentStreamGradesFilter
  index: Int
}

"""Display data for Catalog."""
type RepositoryDisplayData {
  """The long description of the repository."""
  long_description: String

  """Markdown for the long description of the repository."""
  long_description_markdown: String

  """The repository name."""
  name: String

  """The io_openshift_tags."""
  openshift_tags: String

  """The short description of the repository."""
  short_description: String
}

input RepositoryDisplayDataFilter {
  long_description: StringFilter
  long_description_markdown: StringFilter
  name: StringFilter
  openshift_tags: StringFilter
  short_description: StringFilter
  eq: NULL
  ne: NULL
  and: [RepositoryDisplayDataFilter]
  or: [RepositoryDisplayDataFilter]
  nor: [RepositoryDisplayDataFilter]
  not: RepositoryDisplayDataFilter
}

"""Information about documentation link."""
type RepositoryDocumentationLink {
  """Title of the link."""
  title: String

  """The type of collateral."""
  type: String

  """The URL for the documentation."""
  url: URI
}

input RepositoryDocumentationLinkElemMatchFilter {
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryDocumentationLinkFilter {
  title: StringFilter
  type: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryDocumentationLinkListFilter {
  list_index_filter: RepositoryDocumentationLinkListIndexFilter
  title: StringFilter
  type: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [RepositoryDocumentationLinkFilter]
  or: [RepositoryDocumentationLinkFilter]
  nor: [RepositoryDocumentationLinkFilter]
  not: RepositoryDocumentationLinkFilter
}

input RepositoryDocumentationLinkListIndexFilter {
  condition: RepositoryDocumentationLinkFilter
  index: Int
}

"""Metrics information."""
type RepositoryMetrics {
  """
  The date and time when these metrics were last updated for the repository.
  """
  last_update_date: DateTime

  """The number of pulls in the last 30 days for the repository."""
  pulls_in_last_30_days: Int
}

input RepositoryMetricsFilter {
  last_update_date: DateTimeFilter
  pulls_in_last_30_days: IntFilter
  eq: NULL
  ne: NULL
  and: [RepositoryMetricsFilter]
  or: [RepositoryMetricsFilter]
  nor: [RepositoryMetricsFilter]
  not: RepositoryMetricsFilter
}

"""Describes what the image can be run on."""
type RepositoryRunsOn {
  """Can the image run on openshift_online."""
  openshift_online: Boolean
}

input RepositoryRunsOnFilter {
  openshift_online: BooleanFilter
  eq: NULL
  ne: NULL
  and: [RepositoryRunsOnFilter]
  or: [RepositoryRunsOnFilter]
  nor: [RepositoryRunsOnFilter]
  not: RepositoryRunsOnFilter
}

type ResponseError {
  status: Int
  detail: String
}

"""The test results stored in lists based on result status."""
type Results {
  """Test results of cert project certification"""
  failed: [TestResults]

  """Test results of cert project certification"""
  errors: [TestResults]

  """Test results of cert project certification"""
  passed: [TestResults]

  """Test results of cert project certification"""
  warning: [TestResults]
}

input ResultsFilter {
  failed_size: IntFilter
  failed_elemMatch: TestResultsElemMatchFilter
  failed: TestResultsListFilter
  errors_size: IntFilter
  errors_elemMatch: TestResultsElemMatchFilter
  errors: TestResultsListFilter
  passed_size: IntFilter
  passed_elemMatch: TestResultsElemMatchFilter
  passed: TestResultsListFilter
  warning_size: IntFilter
  warning_elemMatch: TestResultsElemMatchFilter
  warning: TestResultsListFilter
  eq: NULL
  ne: NULL
  and: [ResultsFilter]
  or: [ResultsFilter]
  nor: [ResultsFilter]
  not: ResultsFilter
}

"""The test results stored in lists based on result status."""
input ResultsInput {
  """Test results of cert project certification"""
  failed: [TestResultsInput]

  """Test results of cert project certification"""
  errors: [TestResultsInput]

  """Test results of cert project certification"""
  passed: [TestResultsInput]

  """Test results of cert project certification"""
  warning: [TestResultsInput]
}

"""RPM content of an image."""
type RpmsItems {
  """RPM architecture."""
  architecture: String

  """GPG key used to sign the RPM."""
  gpg: String

  """RPM name."""
  name: String

  """RPM name, version, release, and architecture."""
  nvra: String

  """RPM release."""
  release: String

  """Source RPM name."""
  srpm_name: String

  """Source RPM NEVRA (name, epoch, version, release, architecture)."""
  srpm_nevra: String

  """RPM summary."""
  summary: String

  """RPM version."""
  version: String

  """RPM epoch."""
  epoch: String

  """RPM module."""
  module: String
}

"""RPM content of an image."""
input RpmsItemsInput {
  """RPM architecture."""
  architecture: String

  """GPG key used to sign the RPM."""
  gpg: String

  """RPM name."""
  name: String

  """RPM name, version, release, and architecture."""
  nvra: String

  """RPM release."""
  release: String

  """Source RPM name."""
  srpm_name: String

  """Source RPM NEVRA (name, epoch, version, release, architecture)."""
  srpm_nevra: String

  """RPM summary."""
  summary: String

  """RPM version."""
  version: String

  """RPM epoch."""
  epoch: String

  """RPM module."""
  module: String
}

type SearchAliasesItems {
  key: String
  value: String
}

input SearchAliasesItemsElemMatchFilter {
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SearchAliasesItemsFilter {
  key: StringFilter
  value: StringFilter
  eq: NULL
  ne: NULL
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SearchAliasesItemsInput {
  key: String
  value: String
}

input SearchAliasesItemsListFilter {
  list_index_filter: SearchAliasesItemsListIndexFilter
  key: StringFilter
  value: StringFilter
  eq: NULL
  ne: NULL
  and: [SearchAliasesItemsFilter]
  or: [SearchAliasesItemsFilter]
  nor: [SearchAliasesItemsFilter]
  not: SearchAliasesItemsFilter
}

input SearchAliasesItemsListIndexFilter {
  condition: SearchAliasesItemsFilter
  index: Int
}

"""
SemVer scalar type is used for validating, serializing
and deserializing SemVer values in input and output.
Due to historical reasons and dependent workflows,
SemVer must be padded with leading zeros before writing
to MongoDB and stripped of zeros when data are being read
during the process of serialization and deserialization.
Using custom Marshmallow validator and semver library.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output)
"""
scalar SemVer

input SemVerFilter {
  eq: SemVerFilterScalar
  ne: SemVerFilterScalar
  le: SemVerFilterScalar
  lt: SemVerFilterScalar
  ge: SemVerFilterScalar
  gt: SemVerFilterScalar
  in: [SemVerFilterScalar]
  out: [SemVerFilterScalar]
}

"""
Scalar is validating SemVer correctness and padding it with
leading zeros enabling filtering over values in MongoDB.
Using semver library.

Scope: Pyxis subgraph
Usage: In (Filtering)
"""
scalar SemVerFilterScalar

type SignatureInfo {
  """The long 16-byte gpg key id."""
  key_long_id: String

  """List of image tags that are signed with the given key."""
  tags: [String]
}

input SignatureInfoElemMatchFilter {
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input SignatureInfoFilter {
  key_long_id: StringFilter
  tags_size: IntFilter
  tags: StringListFilter
  eq: NULL
  ne: NULL
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input SignatureInfoInput {
  """The long 16-byte gpg key id."""
  key_long_id: String

  """List of image tags that are signed with the given key."""
  tags: [String]
}

input SignatureInfoListFilter {
  list_index_filter: SignatureInfoListIndexFilter
  key_long_id: StringFilter
  tags_size: IntFilter
  tags: StringListFilter
  eq: NULL
  ne: NULL
  and: [SignatureInfoFilter]
  or: [SignatureInfoFilter]
  nor: [SignatureInfoFilter]
  not: SignatureInfoFilter
}

input SignatureInfoListIndexFilter {
  condition: SignatureInfoFilter
  index: Int
}

"""Single_arch image which is part of the manifest_list_digest"""
type SingleArchImage {
  """Unique identifier for the container image."""
  image_id: ObjectID
  edges: SingleArchImageEdges
}

type SingleArchImageEdges {
  """Get container image by ID."""
  container_image(id: ObjectIDFilterScalar): ContainerImageResponse
}

input SingleArchImageElemMatchFilter {
  and: [SingleArchImageFilter]
  or: [SingleArchImageFilter]
  nor: [SingleArchImageFilter]
  not: SingleArchImageFilter
}

input SingleArchImageFilter {
  image_id: ObjectIDFilter
  eq: NULL
  ne: NULL
  and: [SingleArchImageFilter]
  or: [SingleArchImageFilter]
  nor: [SingleArchImageFilter]
  not: SingleArchImageFilter
}

"""Single_arch image which is part of the manifest_list_digest"""
input SingleArchImageInput {
  """Unique identifier for the container image."""
  image_id: ObjectID
}

input SingleArchImageListFilter {
  list_index_filter: SingleArchImageListIndexFilter
  image_id: ObjectIDFilter
  eq: NULL
  ne: NULL
  and: [SingleArchImageFilter]
  or: [SingleArchImageFilter]
  nor: [SingleArchImageFilter]
  not: SingleArchImageFilter
}

input SingleArchImageListIndexFilter {
  condition: SingleArchImageFilter
  index: Int
}

input SortBy {
  field: String
  order: SortDirectionEnum
}

enum SortDirectionEnum {
  ASC
  DESC
}

"""
Status object of services and components on which the GraphQL Pyxis depends on.
"""
type StatusGQL {
  pyxis_rest: Boolean
}

input StringFilter {
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  out: [String]
  all: [String]
  iregex: String
  regex: String
}

input StringListFilter {
  list_index_filter: StringListIndexFilter
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String]
  out: [String]
  all: [String]
  iregex: String
  regex: String
}

input StringListIndexFilter {
  condition: StringFilter
  index: Int
}

"""This field is required when the product listing is published."""
type Support {
  description: String
  email_address: Email
  phone_number: String
  url: URI
}

input SupportFilter {
  description: StringFilter
  email_address: EmailFilter
  phone_number: StringFilter
  url: URIFilter
  eq: NULL
  ne: NULL
  and: [SupportFilter]
  or: [SupportFilter]
  nor: [SupportFilter]
  not: SupportFilter
}

"""This field is required when the product listing is published."""
input SupportInput {
  description: String
  email_address: Email
  phone_number: String
  url: URI
}

"""A platform where tests were executed."""
type TestedOn {
  name: String
  version: String
}

input TestedOnFilter {
  name: StringFilter
  version: StringFilter
  eq: NULL
  ne: NULL
  and: [TestedOnFilter]
  or: [TestedOnFilter]
  nor: [TestedOnFilter]
  not: TestedOnFilter
}

"""A platform where tests were executed."""
input TestedOnInput {
  name: String
  version: String
}

"""The test library of the test result."""
type TestLibrary {
  commit: String
  name: String
  version: String
}

input TestLibraryFilter {
  commit: StringFilter
  name: StringFilter
  version: StringFilter
  eq: NULL
  ne: NULL
  and: [TestLibraryFilter]
  or: [TestLibraryFilter]
  nor: [TestLibraryFilter]
  not: TestLibraryFilter
}

"""The test library of the test result."""
input TestLibraryInput {
  commit: String
  name: String
  version: String
}

"""The cert project pipeline test result."""
type TestResults {
  check_url: URI
  description: String
  elapsed_time: Float
  help: String
  knowledgebase_url: URI
  name: String
  suggestion: String
}

input TestResultsElemMatchFilter {
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

input TestResultsFilter {
  check_url: URIFilter
  description: StringFilter
  elapsed_time: FloatFilter
  help: StringFilter
  knowledgebase_url: URIFilter
  name: StringFilter
  suggestion: StringFilter
  eq: NULL
  ne: NULL
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

"""The cert project pipeline test result."""
input TestResultsInput {
  check_url: URI
  description: String
  elapsed_time: Float
  help: String
  knowledgebase_url: URI
  name: String
  suggestion: String
}

input TestResultsListFilter {
  list_index_filter: TestResultsListIndexFilter
  check_url: URIFilter
  description: StringFilter
  elapsed_time: FloatFilter
  help: StringFilter
  knowledgebase_url: URIFilter
  name: StringFilter
  suggestion: StringFilter
  eq: NULL
  ne: NULL
  and: [TestResultsFilter]
  or: [TestResultsFilter]
  nor: [TestResultsFilter]
  not: TestResultsFilter
}

input TestResultsListIndexFilter {
  condition: TestResultsFilter
  index: Int
}

"""
Stores data about software tools, e.g. Preflight version. Read only external access. Used for supported version check.
"""
type Tool {
  """Name of the tool."""
  name: String

  """Tool version, e.g. 1.4.0"""
  version: SemVer

  """Commit hash of the tool version."""
  commit: String

  """Whether this tool version is enabled for testing."""
  enabled_for_testing: Boolean

  """MongoDB unique _id"""
  _id: ObjectID

  """
  The date when the entry was created. Value is created automatically on creation.
  """
  creation_date: DateTime

  """The date when the entry was last updated."""
  last_update_date: DateTime
}

input ToolFilter {
  name: StringFilter
  version: SemVerFilter
  commit: StringFilter
  enabled_for_testing: BooleanFilter
  _id: ObjectIDFilter
  creation_date: DateTimeFilter
  last_update_date: DateTimeFilter
  eq: NULL
  ne: NULL
  and: [ToolFilter]
  or: [ToolFilter]
  nor: [ToolFilter]
  not: ToolFilter
}

type ToolPaginatedResponse {
  data: [Tool]
  error: ResponseError
  page: Int
  page_size: Int
  total: Int
}

type ToolResponse {
  data: Tool
  error: ResponseError
}

type UncompressedLayerSize {
  """The SHA256 layer ID."""
  layer_id: String

  """The uncompressed layer size in bytes."""
  size_bytes: Int64
}

input UncompressedLayerSizeElemMatchFilter {
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input UncompressedLayerSizeFilter {
  layer_id: StringFilter
  size_bytes: Int64Filter
  eq: NULL
  ne: NULL
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input UncompressedLayerSizeInput {
  """The SHA256 layer ID."""
  layer_id: String

  """The uncompressed layer size in bytes."""
  size_bytes: Int64
}

input UncompressedLayerSizeListFilter {
  list_index_filter: UncompressedLayerSizeListIndexFilter
  layer_id: StringFilter
  size_bytes: Int64Filter
  eq: NULL
  ne: NULL
  and: [UncompressedLayerSizeFilter]
  or: [UncompressedLayerSizeFilter]
  nor: [UncompressedLayerSizeFilter]
  not: UncompressedLayerSizeFilter
}

input UncompressedLayerSizeListIndexFilter {
  condition: UncompressedLayerSizeFilter
  index: Int
}

"""
Scalar is ensuring that user input (and filter value)
is a valid URI.
Utilizing Marshmallow Validator, combining urllib
library and validators package covering all exceptions.

Scope: Pyxis subgraph
Usage: In and Out (Input, Output, Filtering)
"""
scalar URI

input URIFilter {
  eq: URI
  ne: URI
  le: URI
  lt: URI
  ge: URI
  gt: URI
  in: [URI]
  out: [URI]
  iregex: String
  regex: String
}

"""Details about approved Red Hat validation."""
type ValidationItems {
  """ID of productValidation."""
  _id: ObjectID

  """List of Red Hat products."""
  redhat_products: [RedHatProductItems]
}

input ValidationItemsElemMatchFilter {
  and: [ValidationItemsFilter]
  or: [ValidationItemsFilter]
  nor: [ValidationItemsFilter]
  not: ValidationItemsFilter
}

input ValidationItemsFilter {
  _id: ObjectIDFilter
  redhat_products_size: IntFilter
  redhat_products_elemMatch: RedHatProductItemsElemMatchFilter
  redhat_products: RedHatProductItemsListFilter
  eq: NULL
  ne: NULL
  and: [ValidationItemsFilter]
  or: [ValidationItemsFilter]
  nor: [ValidationItemsFilter]
  not: ValidationItemsFilter
}

"""Details about approved Red Hat validation."""
input ValidationItemsInput {
  """ID of productValidation."""
  _id: ObjectID

  """List of Red Hat products."""
  redhat_products: [RedHatProductItemsInput]
}

input ValidationItemsListFilter {
  list_index_filter: ValidationItemsListIndexFilter
  _id: ObjectIDFilter
  redhat_products_size: IntFilter
  redhat_products_elemMatch: RedHatProductItemsElemMatchFilter
  redhat_products: RedHatProductItemsListFilter
  eq: NULL
  ne: NULL
  and: [ValidationItemsFilter]
  or: [ValidationItemsFilter]
  nor: [ValidationItemsFilter]
  not: ValidationItemsFilter
}

input ValidationItemsListIndexFilter {
  condition: ValidationItemsFilter
  index: Int
}

