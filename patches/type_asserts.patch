diff --git a/internal/server/openapi/type_asserts.go b/internal/server/openapi/type_asserts.go
index b001018..9907fbc 100644
--- a/internal/server/openapi/type_asserts.go
+++ b/internal/server/openapi/type_asserts.go
@@ -449,21 +449,22 @@ func AssertMetadataStructValueConstraints(obj model.MetadataStructValue) error {
 
 // AssertMetadataValueRequired checks if the required fields are not zero-ed
 func AssertMetadataValueRequired(obj model.MetadataValue) error {
-	elements := map[string]interface{}{
-		"int_value":    obj.IntValue,
-		"metadataType": obj.MetadataType,
-		"double_value": obj.DoubleValue,
-		"string_value": obj.StringValue,
-		"struct_value": obj.StructValue,
-		"type":         obj.Type,
-		"proto_value":  obj.ProtoValue,
-		"bool_value":   obj.BoolValue,
-	}
-	for name, el := range elements {
-		if isZero := IsZeroValue(el); isZero {
-			return &RequiredError{Field: name}
-		}
-	}
+	// FIXME(manual): Wrong autogenerated logic, just one elem should be non-zero.
+	// elements := map[string]interface{}{
+	// 	"int_value":    obj.IntValue,
+	// 	"metadataType": obj.MetadataType,
+	// 	"double_value": obj.DoubleValue,
+	// 	"string_value": obj.StringValue,
+	// 	"struct_value": obj.StructValue,
+	// 	"type":         obj.Type,
+	// 	"proto_value":  obj.ProtoValue,
+	// 	"bool_value":   obj.BoolValue,
+	// }
+	// for name, el := range elements {
+	// 	if isZero := IsZeroValue(el); isZero {
+	// 		return &RequiredError{Field: name}
+	// 	}
+	// }
 
 	return nil
 }
