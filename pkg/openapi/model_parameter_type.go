/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ParameterType The data type of the parameter (e.g., \"string\", \"number\", \"boolean\", \"object\").
type ParameterType string

// List of ParameterType
const (
	PARAMETERTYPE_STRING  ParameterType = "string"
	PARAMETERTYPE_NUMBER  ParameterType = "number"
	PARAMETERTYPE_BOOLEAN ParameterType = "boolean"
	PARAMETERTYPE_OBJECT  ParameterType = "object"
)

// All allowed values of ParameterType enum
var AllowedParameterTypeEnumValues = []ParameterType{
	"string",
	"number",
	"boolean",
	"object",
}

func (v *ParameterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParameterType(value)
	for _, existing := range AllowedParameterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParameterType", value)
}

// NewParameterTypeFromValue returns a pointer to a valid ParameterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParameterTypeFromValue(v string) (*ParameterType, error) {
	ev := ParameterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParameterType: valid values are %v", v, AllowedParameterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParameterType) IsValid() bool {
	for _, existing := range AllowedParameterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParameterType value
func (v ParameterType) Ptr() *ParameterType {
	return &v
}

type NullableParameterType struct {
	value *ParameterType
	isSet bool
}

func (v NullableParameterType) Get() *ParameterType {
	return v.value
}

func (v *NullableParameterType) Set(val *ParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterType(val *ParameterType) *NullableParameterType {
	return &NullableParameterType{value: val, isSet: true}
}

func (v NullableParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
