/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExperimentRunState - LIVE: A state indicating that the `ExperimentRun` exists - ARCHIVED: A state indicating that the `ExperimentRun` has been archived.
type ExperimentRunState string

// List of ExperimentRunState
const (
	EXPERIMENTRUNSTATE_LIVE     ExperimentRunState = "LIVE"
	EXPERIMENTRUNSTATE_ARCHIVED ExperimentRunState = "ARCHIVED"
)

// All allowed values of ExperimentRunState enum
var AllowedExperimentRunStateEnumValues = []ExperimentRunState{
	"LIVE",
	"ARCHIVED",
}

func (v *ExperimentRunState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExperimentRunState(value)
	for _, existing := range AllowedExperimentRunStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExperimentRunState", value)
}

// NewExperimentRunStateFromValue returns a pointer to a valid ExperimentRunState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExperimentRunStateFromValue(v string) (*ExperimentRunState, error) {
	ev := ExperimentRunState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExperimentRunState: valid values are %v", v, AllowedExperimentRunStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExperimentRunState) IsValid() bool {
	for _, existing := range AllowedExperimentRunStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExperimentRunState value
func (v ExperimentRunState) Ptr() *ExperimentRunState {
	return &v
}

type NullableExperimentRunState struct {
	value *ExperimentRunState
	isSet bool
}

func (v NullableExperimentRunState) Get() *ExperimentRunState {
	return v.value
}

func (v *NullableExperimentRunState) Set(val *ExperimentRunState) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentRunState) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentRunState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentRunState(val *ExperimentRunState) *NullableExperimentRunState {
	return &NullableExperimentRunState{value: val, isSet: true}
}

func (v NullableExperimentRunState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentRunState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
