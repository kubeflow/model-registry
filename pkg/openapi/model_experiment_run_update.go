/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExperimentRunUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperimentRunUpdate{}

// ExperimentRunUpdate Represents an ExperimentRun belonging to an Experiment.
type ExperimentRunUpdate struct {
	// User provided custom properties which are not defined by its type.
	CustomProperties *map[string]MetadataValue `json:"customProperties,omitempty"`
	// An optional description about the resource.
	Description *string `json:"description,omitempty"`
	// The external id that come from the clientsâ€™ system. This field is optional. If set, it must be unique among all resources within a database instance.
	ExternalId *string `json:"externalId,omitempty"`
	// End time of the actual experiment run in milliseconds since epoch. Different from lastUpdateTimeSinceEpoch, which is registry resource update time.
	EndTimeSinceEpoch *string              `json:"endTimeSinceEpoch,omitempty"`
	Status            *ExperimentRunStatus `json:"status,omitempty"`
	State             *ExperimentRunState  `json:"state,omitempty"`
	// Experiment run owner id or name.
	Owner *string `json:"owner,omitempty"`
}

// NewExperimentRunUpdate instantiates a new ExperimentRunUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentRunUpdate() *ExperimentRunUpdate {
	this := ExperimentRunUpdate{}
	var status ExperimentRunStatus = EXPERIMENTRUNSTATUS_RUNNING
	this.Status = &status
	var state ExperimentRunState = EXPERIMENTRUNSTATE_LIVE
	this.State = &state
	return &this
}

// NewExperimentRunUpdateWithDefaults instantiates a new ExperimentRunUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentRunUpdateWithDefaults() *ExperimentRunUpdate {
	this := ExperimentRunUpdate{}
	var status ExperimentRunStatus = EXPERIMENTRUNSTATUS_RUNNING
	this.Status = &status
	var state ExperimentRunState = EXPERIMENTRUNSTATE_LIVE
	this.State = &state
	return &this
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *ExperimentRunUpdate) GetCustomProperties() map[string]MetadataValue {
	if o == nil || IsNil(o.CustomProperties) {
		var ret map[string]MetadataValue
		return ret
	}
	return *o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRunUpdate) GetCustomPropertiesOk() (*map[string]MetadataValue, bool) {
	if o == nil || IsNil(o.CustomProperties) {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *ExperimentRunUpdate) HasCustomProperties() bool {
	if o != nil && !IsNil(o.CustomProperties) {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given map[string]MetadataValue and assigns it to the CustomProperties field.
func (o *ExperimentRunUpdate) SetCustomProperties(v map[string]MetadataValue) {
	o.CustomProperties = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExperimentRunUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRunUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExperimentRunUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExperimentRunUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ExperimentRunUpdate) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRunUpdate) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ExperimentRunUpdate) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ExperimentRunUpdate) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetEndTimeSinceEpoch returns the EndTimeSinceEpoch field value if set, zero value otherwise.
func (o *ExperimentRunUpdate) GetEndTimeSinceEpoch() string {
	if o == nil || IsNil(o.EndTimeSinceEpoch) {
		var ret string
		return ret
	}
	return *o.EndTimeSinceEpoch
}

// GetEndTimeSinceEpochOk returns a tuple with the EndTimeSinceEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRunUpdate) GetEndTimeSinceEpochOk() (*string, bool) {
	if o == nil || IsNil(o.EndTimeSinceEpoch) {
		return nil, false
	}
	return o.EndTimeSinceEpoch, true
}

// HasEndTimeSinceEpoch returns a boolean if a field has been set.
func (o *ExperimentRunUpdate) HasEndTimeSinceEpoch() bool {
	if o != nil && !IsNil(o.EndTimeSinceEpoch) {
		return true
	}

	return false
}

// SetEndTimeSinceEpoch gets a reference to the given string and assigns it to the EndTimeSinceEpoch field.
func (o *ExperimentRunUpdate) SetEndTimeSinceEpoch(v string) {
	o.EndTimeSinceEpoch = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExperimentRunUpdate) GetStatus() ExperimentRunStatus {
	if o == nil || IsNil(o.Status) {
		var ret ExperimentRunStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRunUpdate) GetStatusOk() (*ExperimentRunStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExperimentRunUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ExperimentRunStatus and assigns it to the Status field.
func (o *ExperimentRunUpdate) SetStatus(v ExperimentRunStatus) {
	o.Status = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ExperimentRunUpdate) GetState() ExperimentRunState {
	if o == nil || IsNil(o.State) {
		var ret ExperimentRunState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRunUpdate) GetStateOk() (*ExperimentRunState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ExperimentRunUpdate) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ExperimentRunState and assigns it to the State field.
func (o *ExperimentRunUpdate) SetState(v ExperimentRunState) {
	o.State = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ExperimentRunUpdate) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentRunUpdate) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ExperimentRunUpdate) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *ExperimentRunUpdate) SetOwner(v string) {
	o.Owner = &v
}

func (o ExperimentRunUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperimentRunUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomProperties) {
		toSerialize["customProperties"] = o.CustomProperties
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.EndTimeSinceEpoch) {
		toSerialize["endTimeSinceEpoch"] = o.EndTimeSinceEpoch
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullableExperimentRunUpdate struct {
	value *ExperimentRunUpdate
	isSet bool
}

func (v NullableExperimentRunUpdate) Get() *ExperimentRunUpdate {
	return v.value
}

func (v *NullableExperimentRunUpdate) Set(val *ExperimentRunUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentRunUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentRunUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentRunUpdate(val *ExperimentRunUpdate) *NullableExperimentRunUpdate {
	return &NullableExperimentRunUpdate{value: val, isSet: true}
}

func (v NullableExperimentRunUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentRunUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
