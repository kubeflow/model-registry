/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetricList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricList{}

// MetricList List of Metric entities.
type MetricList struct {
	// Token to use to retrieve next page of results.
	NextPageToken string `json:"nextPageToken"`
	// Maximum number of resources to return in the result.
	PageSize int32 `json:"pageSize"`
	// Number of items in result list.
	Size int32 `json:"size"`
	// Array of `Metric` entities.
	Items []Metric `json:"items"`
}

type _MetricList MetricList

// NewMetricList instantiates a new MetricList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricList(nextPageToken string, pageSize int32, size int32, items []Metric) *MetricList {
	this := MetricList{}
	this.NextPageToken = nextPageToken
	this.PageSize = pageSize
	this.Size = size
	this.Items = items
	return &this
}

// NewMetricListWithDefaults instantiates a new MetricList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricListWithDefaults() *MetricList {
	this := MetricList{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value
func (o *MetricList) GetNextPageToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value
// and a boolean to check if the value has been set.
func (o *MetricList) GetNextPageTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextPageToken, true
}

// SetNextPageToken sets field value
func (o *MetricList) SetNextPageToken(v string) {
	o.NextPageToken = v
}

// GetPageSize returns the PageSize field value
func (o *MetricList) GetPageSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *MetricList) GetPageSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *MetricList) SetPageSize(v int32) {
	o.PageSize = v
}

// GetSize returns the Size field value
func (o *MetricList) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *MetricList) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *MetricList) SetSize(v int32) {
	o.Size = v
}

// GetItems returns the Items field value
func (o *MetricList) GetItems() []Metric {
	if o == nil {
		var ret []Metric
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *MetricList) GetItemsOk() ([]Metric, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *MetricList) SetItems(v []Metric) {
	o.Items = v
}

func (o MetricList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nextPageToken"] = o.NextPageToken
	toSerialize["pageSize"] = o.PageSize
	toSerialize["size"] = o.Size
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *MetricList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nextPageToken",
		"pageSize",
		"size",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricList := _MetricList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricList)

	if err != nil {
		return err
	}

	*o = MetricList(varMetricList)

	return err
}

type NullableMetricList struct {
	value *MetricList
	isSet bool
}

func (v NullableMetricList) Get() *MetricList {
	return v.value
}

func (v *NullableMetricList) Set(val *MetricList) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricList) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricList(val *MetricList) *NullableMetricList {
	return &NullableMetricList{value: val, isSet: true}
}

func (v NullableMetricList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
