/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RegisteredModelState - LIVE: A state indicating that the `RegisteredModel` exists - ARCHIVED: A state indicating that the `RegisteredModel` has been archived.
type RegisteredModelState string

// List of RegisteredModelState
const (
	REGISTEREDMODELSTATE_LIVE     RegisteredModelState = "LIVE"
	REGISTEREDMODELSTATE_ARCHIVED RegisteredModelState = "ARCHIVED"
)

// All allowed values of RegisteredModelState enum
var AllowedRegisteredModelStateEnumValues = []RegisteredModelState{
	"LIVE",
	"ARCHIVED",
}

func (v *RegisteredModelState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegisteredModelState(value)
	for _, existing := range AllowedRegisteredModelStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegisteredModelState", value)
}

// NewRegisteredModelStateFromValue returns a pointer to a valid RegisteredModelState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegisteredModelStateFromValue(v string) (*RegisteredModelState, error) {
	ev := RegisteredModelState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegisteredModelState: valid values are %v", v, AllowedRegisteredModelStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegisteredModelState) IsValid() bool {
	for _, existing := range AllowedRegisteredModelStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegisteredModelState value
func (v RegisteredModelState) Ptr() *RegisteredModelState {
	return &v
}

type NullableRegisteredModelState struct {
	value *RegisteredModelState
	isSet bool
}

func (v NullableRegisteredModelState) Get() *RegisteredModelState {
	return v.value
}

func (v *NullableRegisteredModelState) Set(val *RegisteredModelState) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredModelState) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredModelState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredModelState(val *RegisteredModelState) *NullableRegisteredModelState {
	return &NullableRegisteredModelState{value: val, isSet: true}
}

func (v NullableRegisteredModelState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredModelState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
