/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegisteredModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisteredModel{}

// RegisteredModel A registered model in model registry. A registered model has ModelVersion children.
type RegisteredModel struct {
	// User provided custom properties which are not defined by its type.
	CustomProperties *map[string]MetadataValue `json:"customProperties,omitempty"`
	// Human-readable description of the model.
	Description *string `json:"description,omitempty"`
	// The external id that come from the clientsâ€™ system. This field is optional. If set, it must be unique among all resources within a database instance.
	ExternalId *string `json:"externalId,omitempty"`
	// The client provided name of the model. It must be unique among all the RegisteredModels of the same type within a Model Registry instance and cannot be changed once set.
	Name string `json:"name"`
	// The unique server generated id of the resource.
	Id *string `json:"id,omitempty"`
	// Output only. Create time of the resource in millisecond since epoch.
	CreateTimeSinceEpoch *string `json:"createTimeSinceEpoch,omitempty"`
	// Output only. Last update time of the resource since epoch in millisecond since epoch.
	LastUpdateTimeSinceEpoch *string `json:"lastUpdateTimeSinceEpoch,omitempty"`
	// Model documentation in Markdown.
	Readme *string `json:"readme,omitempty"`
	// Maturity level of the model.
	Maturity *string `json:"maturity,omitempty"`
	// List of supported languages (https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes).
	Language []string `json:"language,omitempty"`
	// List of tasks the model is designed for.
	Tasks []string `json:"tasks,omitempty"`
	// Name of the organization or entity that provides the model.
	Provider *string `json:"provider,omitempty"`
	// URL to the model's logo. A [data URL](https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data) is recommended.
	Logo *string `json:"logo,omitempty"`
	// Short name of the model's license.
	License *string `json:"license,omitempty"`
	// URL to the license text.
	LicenseLink *string               `json:"licenseLink,omitempty"`
	LibraryName *string               `json:"libraryName,omitempty"`
	Owner       *string               `json:"owner,omitempty"`
	State       *RegisteredModelState `json:"state,omitempty"`
}

// NewRegisteredModel instantiates a new RegisteredModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredModel(name string) *RegisteredModel {
	this := RegisteredModel{}
	this.Name = name
	var state RegisteredModelState = REGISTEREDMODELSTATE_LIVE
	this.State = &state
	return &this
}

// NewRegisteredModelWithDefaults instantiates a new RegisteredModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredModelWithDefaults() *RegisteredModel {
	this := RegisteredModel{}
	var state RegisteredModelState = REGISTEREDMODELSTATE_LIVE
	this.State = &state
	return &this
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *RegisteredModel) GetCustomProperties() map[string]MetadataValue {
	if o == nil || IsNil(o.CustomProperties) {
		var ret map[string]MetadataValue
		return ret
	}
	return *o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetCustomPropertiesOk() (*map[string]MetadataValue, bool) {
	if o == nil || IsNil(o.CustomProperties) {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *RegisteredModel) HasCustomProperties() bool {
	if o != nil && !IsNil(o.CustomProperties) {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given map[string]MetadataValue and assigns it to the CustomProperties field.
func (o *RegisteredModel) SetCustomProperties(v map[string]MetadataValue) {
	o.CustomProperties = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RegisteredModel) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RegisteredModel) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RegisteredModel) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *RegisteredModel) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *RegisteredModel) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *RegisteredModel) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetName returns the Name field value
func (o *RegisteredModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisteredModel) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisteredModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisteredModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RegisteredModel) SetId(v string) {
	o.Id = &v
}

// GetCreateTimeSinceEpoch returns the CreateTimeSinceEpoch field value if set, zero value otherwise.
func (o *RegisteredModel) GetCreateTimeSinceEpoch() string {
	if o == nil || IsNil(o.CreateTimeSinceEpoch) {
		var ret string
		return ret
	}
	return *o.CreateTimeSinceEpoch
}

// GetCreateTimeSinceEpochOk returns a tuple with the CreateTimeSinceEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetCreateTimeSinceEpochOk() (*string, bool) {
	if o == nil || IsNil(o.CreateTimeSinceEpoch) {
		return nil, false
	}
	return o.CreateTimeSinceEpoch, true
}

// HasCreateTimeSinceEpoch returns a boolean if a field has been set.
func (o *RegisteredModel) HasCreateTimeSinceEpoch() bool {
	if o != nil && !IsNil(o.CreateTimeSinceEpoch) {
		return true
	}

	return false
}

// SetCreateTimeSinceEpoch gets a reference to the given string and assigns it to the CreateTimeSinceEpoch field.
func (o *RegisteredModel) SetCreateTimeSinceEpoch(v string) {
	o.CreateTimeSinceEpoch = &v
}

// GetLastUpdateTimeSinceEpoch returns the LastUpdateTimeSinceEpoch field value if set, zero value otherwise.
func (o *RegisteredModel) GetLastUpdateTimeSinceEpoch() string {
	if o == nil || IsNil(o.LastUpdateTimeSinceEpoch) {
		var ret string
		return ret
	}
	return *o.LastUpdateTimeSinceEpoch
}

// GetLastUpdateTimeSinceEpochOk returns a tuple with the LastUpdateTimeSinceEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetLastUpdateTimeSinceEpochOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdateTimeSinceEpoch) {
		return nil, false
	}
	return o.LastUpdateTimeSinceEpoch, true
}

// HasLastUpdateTimeSinceEpoch returns a boolean if a field has been set.
func (o *RegisteredModel) HasLastUpdateTimeSinceEpoch() bool {
	if o != nil && !IsNil(o.LastUpdateTimeSinceEpoch) {
		return true
	}

	return false
}

// SetLastUpdateTimeSinceEpoch gets a reference to the given string and assigns it to the LastUpdateTimeSinceEpoch field.
func (o *RegisteredModel) SetLastUpdateTimeSinceEpoch(v string) {
	o.LastUpdateTimeSinceEpoch = &v
}

// GetReadme returns the Readme field value if set, zero value otherwise.
func (o *RegisteredModel) GetReadme() string {
	if o == nil || IsNil(o.Readme) {
		var ret string
		return ret
	}
	return *o.Readme
}

// GetReadmeOk returns a tuple with the Readme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetReadmeOk() (*string, bool) {
	if o == nil || IsNil(o.Readme) {
		return nil, false
	}
	return o.Readme, true
}

// HasReadme returns a boolean if a field has been set.
func (o *RegisteredModel) HasReadme() bool {
	if o != nil && !IsNil(o.Readme) {
		return true
	}

	return false
}

// SetReadme gets a reference to the given string and assigns it to the Readme field.
func (o *RegisteredModel) SetReadme(v string) {
	o.Readme = &v
}

// GetMaturity returns the Maturity field value if set, zero value otherwise.
func (o *RegisteredModel) GetMaturity() string {
	if o == nil || IsNil(o.Maturity) {
		var ret string
		return ret
	}
	return *o.Maturity
}

// GetMaturityOk returns a tuple with the Maturity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetMaturityOk() (*string, bool) {
	if o == nil || IsNil(o.Maturity) {
		return nil, false
	}
	return o.Maturity, true
}

// HasMaturity returns a boolean if a field has been set.
func (o *RegisteredModel) HasMaturity() bool {
	if o != nil && !IsNil(o.Maturity) {
		return true
	}

	return false
}

// SetMaturity gets a reference to the given string and assigns it to the Maturity field.
func (o *RegisteredModel) SetMaturity(v string) {
	o.Maturity = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *RegisteredModel) GetLanguage() []string {
	if o == nil || IsNil(o.Language) {
		var ret []string
		return ret
	}
	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetLanguageOk() ([]string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *RegisteredModel) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given []string and assigns it to the Language field.
func (o *RegisteredModel) SetLanguage(v []string) {
	o.Language = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *RegisteredModel) GetTasks() []string {
	if o == nil || IsNil(o.Tasks) {
		var ret []string
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetTasksOk() ([]string, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *RegisteredModel) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []string and assigns it to the Tasks field.
func (o *RegisteredModel) SetTasks(v []string) {
	o.Tasks = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *RegisteredModel) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *RegisteredModel) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *RegisteredModel) SetProvider(v string) {
	o.Provider = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *RegisteredModel) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *RegisteredModel) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *RegisteredModel) SetLogo(v string) {
	o.Logo = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *RegisteredModel) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *RegisteredModel) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *RegisteredModel) SetLicense(v string) {
	o.License = &v
}

// GetLicenseLink returns the LicenseLink field value if set, zero value otherwise.
func (o *RegisteredModel) GetLicenseLink() string {
	if o == nil || IsNil(o.LicenseLink) {
		var ret string
		return ret
	}
	return *o.LicenseLink
}

// GetLicenseLinkOk returns a tuple with the LicenseLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetLicenseLinkOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseLink) {
		return nil, false
	}
	return o.LicenseLink, true
}

// HasLicenseLink returns a boolean if a field has been set.
func (o *RegisteredModel) HasLicenseLink() bool {
	if o != nil && !IsNil(o.LicenseLink) {
		return true
	}

	return false
}

// SetLicenseLink gets a reference to the given string and assigns it to the LicenseLink field.
func (o *RegisteredModel) SetLicenseLink(v string) {
	o.LicenseLink = &v
}

// GetLibraryName returns the LibraryName field value if set, zero value otherwise.
func (o *RegisteredModel) GetLibraryName() string {
	if o == nil || IsNil(o.LibraryName) {
		var ret string
		return ret
	}
	return *o.LibraryName
}

// GetLibraryNameOk returns a tuple with the LibraryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetLibraryNameOk() (*string, bool) {
	if o == nil || IsNil(o.LibraryName) {
		return nil, false
	}
	return o.LibraryName, true
}

// HasLibraryName returns a boolean if a field has been set.
func (o *RegisteredModel) HasLibraryName() bool {
	if o != nil && !IsNil(o.LibraryName) {
		return true
	}

	return false
}

// SetLibraryName gets a reference to the given string and assigns it to the LibraryName field.
func (o *RegisteredModel) SetLibraryName(v string) {
	o.LibraryName = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *RegisteredModel) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *RegisteredModel) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *RegisteredModel) SetOwner(v string) {
	o.Owner = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RegisteredModel) GetState() RegisteredModelState {
	if o == nil || IsNil(o.State) {
		var ret RegisteredModelState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredModel) GetStateOk() (*RegisteredModelState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RegisteredModel) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given RegisteredModelState and assigns it to the State field.
func (o *RegisteredModel) SetState(v RegisteredModelState) {
	o.State = &v
}

func (o RegisteredModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisteredModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomProperties) {
		toSerialize["customProperties"] = o.CustomProperties
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreateTimeSinceEpoch) {
		toSerialize["createTimeSinceEpoch"] = o.CreateTimeSinceEpoch
	}
	if !IsNil(o.LastUpdateTimeSinceEpoch) {
		toSerialize["lastUpdateTimeSinceEpoch"] = o.LastUpdateTimeSinceEpoch
	}
	if !IsNil(o.Readme) {
		toSerialize["readme"] = o.Readme
	}
	if !IsNil(o.Maturity) {
		toSerialize["maturity"] = o.Maturity
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.LicenseLink) {
		toSerialize["licenseLink"] = o.LicenseLink
	}
	if !IsNil(o.LibraryName) {
		toSerialize["libraryName"] = o.LibraryName
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableRegisteredModel struct {
	value *RegisteredModel
	isSet bool
}

func (v NullableRegisteredModel) Get() *RegisteredModel {
	return v.value
}

func (v *NullableRegisteredModel) Set(val *RegisteredModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredModel(val *RegisteredModel) *NullableRegisteredModel {
	return &NullableRegisteredModel{value: val, isSet: true}
}

func (v NullableRegisteredModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
