/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExperimentRunStatus The state of the Experiment Run. The state transitions are   [SCHEDULED ->] RUNNING -> FINISHED | FAILED | KILLED RUNNING: Run has been initiated. SCHEDULED: Run is scheduled to run at a later time. FINISHED: Run has completed. FAILED: Run execution failed. KILLED: Run killed by user.
type ExperimentRunStatus string

// List of ExperimentRunStatus
const (
	EXPERIMENTRUNSTATUS_RUNNING   ExperimentRunStatus = "RUNNING"
	EXPERIMENTRUNSTATUS_SCHEDULED ExperimentRunStatus = "SCHEDULED"
	EXPERIMENTRUNSTATUS_FINISHED  ExperimentRunStatus = "FINISHED"
	EXPERIMENTRUNSTATUS_FAILED    ExperimentRunStatus = "FAILED"
	EXPERIMENTRUNSTATUS_KILLED    ExperimentRunStatus = "KILLED"
)

// All allowed values of ExperimentRunStatus enum
var AllowedExperimentRunStatusEnumValues = []ExperimentRunStatus{
	"RUNNING",
	"SCHEDULED",
	"FINISHED",
	"FAILED",
	"KILLED",
}

func (v *ExperimentRunStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExperimentRunStatus(value)
	for _, existing := range AllowedExperimentRunStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExperimentRunStatus", value)
}

// NewExperimentRunStatusFromValue returns a pointer to a valid ExperimentRunStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExperimentRunStatusFromValue(v string) (*ExperimentRunStatus, error) {
	ev := ExperimentRunStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExperimentRunStatus: valid values are %v", v, AllowedExperimentRunStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExperimentRunStatus) IsValid() bool {
	for _, existing := range AllowedExperimentRunStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExperimentRunStatus value
func (v ExperimentRunStatus) Ptr() *ExperimentRunStatus {
	return &v
}

type NullableExperimentRunStatus struct {
	value *ExperimentRunStatus
	isSet bool
}

func (v NullableExperimentRunStatus) Get() *ExperimentRunStatus {
	return v.value
}

func (v *NullableExperimentRunStatus) Set(val *ExperimentRunStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentRunStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentRunStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentRunStatus(val *ExperimentRunStatus) *NullableExperimentRunStatus {
	return &NullableExperimentRunStatus{value: val, isSet: true}
}

func (v NullableExperimentRunStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentRunStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
