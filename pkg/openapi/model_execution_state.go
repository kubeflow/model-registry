/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExecutionState The state of the Execution. The state transitions are   NEW -> RUNNING -> COMPLETE | CACHED | FAILED | CANCELED CACHED means the execution is skipped due to cached results. CANCELED means the execution is skipped due to precondition not met. It is different from CACHED in that a CANCELED execution will not have any event associated with it. It is different from FAILED in that there is no unexpected error happened and it is regarded as a normal state.  See also: ml-metadata Execution.State
type ExecutionState string

// List of ExecutionState
const (
	EXECUTIONSTATE_UNKNOWN  ExecutionState = "UNKNOWN"
	EXECUTIONSTATE_NEW      ExecutionState = "NEW"
	EXECUTIONSTATE_RUNNING  ExecutionState = "RUNNING"
	EXECUTIONSTATE_COMPLETE ExecutionState = "COMPLETE"
	EXECUTIONSTATE_FAILED   ExecutionState = "FAILED"
	EXECUTIONSTATE_CACHED   ExecutionState = "CACHED"
	EXECUTIONSTATE_CANCELED ExecutionState = "CANCELED"
)

// All allowed values of ExecutionState enum
var AllowedExecutionStateEnumValues = []ExecutionState{
	"UNKNOWN",
	"NEW",
	"RUNNING",
	"COMPLETE",
	"FAILED",
	"CACHED",
	"CANCELED",
}

func (v *ExecutionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExecutionState(value)
	for _, existing := range AllowedExecutionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExecutionState", value)
}

// NewExecutionStateFromValue returns a pointer to a valid ExecutionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExecutionStateFromValue(v string) (*ExecutionState, error) {
	ev := ExecutionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExecutionState: valid values are %v", v, AllowedExecutionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExecutionState) IsValid() bool {
	for _, existing := range AllowedExecutionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExecutionState value
func (v ExecutionState) Ptr() *ExecutionState {
	return &v
}

type NullableExecutionState struct {
	value *ExecutionState
	isSet bool
}

func (v NullableExecutionState) Get() *ExecutionState {
	return v.value
}

func (v *NullableExecutionState) Set(val *ExecutionState) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionState) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionState(val *ExecutionState) *NullableExecutionState {
	return &NullableExecutionState{value: val, isSet: true}
}

func (v NullableExecutionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
