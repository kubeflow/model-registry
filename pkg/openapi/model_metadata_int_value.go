/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetadataIntValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataIntValue{}

// MetadataIntValue An integer (int64) property value.
type MetadataIntValue struct {
	IntValue     string `json:"int_value"`
	MetadataType string `json:"metadataType"`
}

type _MetadataIntValue MetadataIntValue

// NewMetadataIntValue instantiates a new MetadataIntValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataIntValue(intValue string, metadataType string) *MetadataIntValue {
	this := MetadataIntValue{}
	this.IntValue = intValue
	this.MetadataType = metadataType
	return &this
}

// NewMetadataIntValueWithDefaults instantiates a new MetadataIntValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataIntValueWithDefaults() *MetadataIntValue {
	this := MetadataIntValue{}
	var metadataType string = "MetadataIntValue"
	this.MetadataType = metadataType
	return &this
}

// GetIntValue returns the IntValue field value
func (o *MetadataIntValue) GetIntValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntValue
}

// GetIntValueOk returns a tuple with the IntValue field value
// and a boolean to check if the value has been set.
func (o *MetadataIntValue) GetIntValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntValue, true
}

// SetIntValue sets field value
func (o *MetadataIntValue) SetIntValue(v string) {
	o.IntValue = v
}

// GetMetadataType returns the MetadataType field value
func (o *MetadataIntValue) GetMetadataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataType
}

// GetMetadataTypeOk returns a tuple with the MetadataType field value
// and a boolean to check if the value has been set.
func (o *MetadataIntValue) GetMetadataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataType, true
}

// SetMetadataType sets field value
func (o *MetadataIntValue) SetMetadataType(v string) {
	o.MetadataType = v
}

func (o MetadataIntValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataIntValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["int_value"] = o.IntValue
	toSerialize["metadataType"] = o.MetadataType
	return toSerialize, nil
}

func (o *MetadataIntValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"int_value",
		"metadataType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadataIntValue := _MetadataIntValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetadataIntValue)

	if err != nil {
		return err
	}

	*o = MetadataIntValue(varMetadataIntValue)

	return err
}

type NullableMetadataIntValue struct {
	value *MetadataIntValue
	isSet bool
}

func (v NullableMetadataIntValue) Get() *MetadataIntValue {
	return v.value
}

func (v *NullableMetadataIntValue) Set(val *MetadataIntValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataIntValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataIntValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataIntValue(val *MetadataIntValue) *NullableMetadataIntValue {
	return &NullableMetadataIntValue{value: val, isSet: true}
}

func (v NullableMetadataIntValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataIntValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
