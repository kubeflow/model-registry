/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ArtifactTypeQueryParam Supported artifact types for querying.
type ArtifactTypeQueryParam string

// List of ArtifactTypeQueryParam
const (
	ARTIFACTTYPEQUERYPARAM_MODEL_ARTIFACT   ArtifactTypeQueryParam = "model-artifact"
	ARTIFACTTYPEQUERYPARAM_DOC_ARTIFACT     ArtifactTypeQueryParam = "doc-artifact"
	ARTIFACTTYPEQUERYPARAM_DATASET_ARTIFACT ArtifactTypeQueryParam = "dataset-artifact"
	ARTIFACTTYPEQUERYPARAM_METRIC           ArtifactTypeQueryParam = "metric"
	ARTIFACTTYPEQUERYPARAM_PARAMETER        ArtifactTypeQueryParam = "parameter"
)

// All allowed values of ArtifactTypeQueryParam enum
var AllowedArtifactTypeQueryParamEnumValues = []ArtifactTypeQueryParam{
	"model-artifact",
	"doc-artifact",
	"dataset-artifact",
	"metric",
	"parameter",
}

func (v *ArtifactTypeQueryParam) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ArtifactTypeQueryParam(value)
	for _, existing := range AllowedArtifactTypeQueryParamEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ArtifactTypeQueryParam", value)
}

// NewArtifactTypeQueryParamFromValue returns a pointer to a valid ArtifactTypeQueryParam
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewArtifactTypeQueryParamFromValue(v string) (*ArtifactTypeQueryParam, error) {
	ev := ArtifactTypeQueryParam(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ArtifactTypeQueryParam: valid values are %v", v, AllowedArtifactTypeQueryParamEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ArtifactTypeQueryParam) IsValid() bool {
	for _, existing := range AllowedArtifactTypeQueryParamEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ArtifactTypeQueryParam value
func (v ArtifactTypeQueryParam) Ptr() *ArtifactTypeQueryParam {
	return &v
}

type NullableArtifactTypeQueryParam struct {
	value *ArtifactTypeQueryParam
	isSet bool
}

func (v NullableArtifactTypeQueryParam) Get() *ArtifactTypeQueryParam {
	return v.value
}

func (v *NullableArtifactTypeQueryParam) Set(val *ArtifactTypeQueryParam) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactTypeQueryParam) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactTypeQueryParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactTypeQueryParam(val *ArtifactTypeQueryParam) *NullableArtifactTypeQueryParam {
	return &NullableArtifactTypeQueryParam{value: val, isSet: true}
}

func (v NullableArtifactTypeQueryParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactTypeQueryParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
