/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ArtifactUpdate - An Artifact to be updated.
type ArtifactUpdate struct {
	DocArtifactUpdate   *DocArtifactUpdate
	ModelArtifactUpdate *ModelArtifactUpdate
}

// DocArtifactUpdateAsArtifactUpdate is a convenience function that returns DocArtifactUpdate wrapped in ArtifactUpdate
func DocArtifactUpdateAsArtifactUpdate(v *DocArtifactUpdate) ArtifactUpdate {
	return ArtifactUpdate{
		DocArtifactUpdate: v,
	}
}

// ModelArtifactUpdateAsArtifactUpdate is a convenience function that returns ModelArtifactUpdate wrapped in ArtifactUpdate
func ModelArtifactUpdateAsArtifactUpdate(v *ModelArtifactUpdate) ArtifactUpdate {
	return ArtifactUpdate{
		ModelArtifactUpdate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ArtifactUpdate) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'DocArtifactUpdate'
	if jsonDict["artifactType"] == "DocArtifactUpdate" {
		// try to unmarshal JSON data into DocArtifactUpdate
		err = json.Unmarshal(data, &dst.DocArtifactUpdate)
		if err == nil {
			return nil // data stored in dst.DocArtifactUpdate, return on the first match
		} else {
			dst.DocArtifactUpdate = nil
			return fmt.Errorf("failed to unmarshal ArtifactUpdate as DocArtifactUpdate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ModelArtifactUpdate'
	if jsonDict["artifactType"] == "ModelArtifactUpdate" {
		// try to unmarshal JSON data into ModelArtifactUpdate
		err = json.Unmarshal(data, &dst.ModelArtifactUpdate)
		if err == nil {
			return nil // data stored in dst.ModelArtifactUpdate, return on the first match
		} else {
			dst.ModelArtifactUpdate = nil
			return fmt.Errorf("failed to unmarshal ArtifactUpdate as ModelArtifactUpdate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'doc-artifact'
	if jsonDict["artifactType"] == "doc-artifact" {
		// try to unmarshal JSON data into DocArtifactUpdate
		err = json.Unmarshal(data, &dst.DocArtifactUpdate)
		if err == nil {
			return nil // data stored in dst.DocArtifactUpdate, return on the first match
		} else {
			dst.DocArtifactUpdate = nil
			return fmt.Errorf("failed to unmarshal ArtifactUpdate as DocArtifactUpdate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'model-artifact'
	if jsonDict["artifactType"] == "model-artifact" {
		// try to unmarshal JSON data into ModelArtifactUpdate
		err = json.Unmarshal(data, &dst.ModelArtifactUpdate)
		if err == nil {
			return nil // data stored in dst.ModelArtifactUpdate, return on the first match
		} else {
			dst.ModelArtifactUpdate = nil
			return fmt.Errorf("failed to unmarshal ArtifactUpdate as ModelArtifactUpdate: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ArtifactUpdate) MarshalJSON() ([]byte, error) {
	if src.DocArtifactUpdate != nil {
		return json.Marshal(&src.DocArtifactUpdate)
	}

	if src.ModelArtifactUpdate != nil {
		return json.Marshal(&src.ModelArtifactUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ArtifactUpdate) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DocArtifactUpdate != nil {
		return obj.DocArtifactUpdate
	}

	if obj.ModelArtifactUpdate != nil {
		return obj.ModelArtifactUpdate
	}

	// all schemas are nil
	return nil
}

type NullableArtifactUpdate struct {
	value *ArtifactUpdate
	isSet bool
}

func (v NullableArtifactUpdate) Get() *ArtifactUpdate {
	return v.value
}

func (v *NullableArtifactUpdate) Set(val *ArtifactUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactUpdate(val *ArtifactUpdate) *NullableArtifactUpdate {
	return &NullableArtifactUpdate{value: val, isSet: true}
}

func (v NullableArtifactUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
