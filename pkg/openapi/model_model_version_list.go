/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelVersionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelVersionList{}

// ModelVersionList List of ModelVersion entities.
type ModelVersionList struct {
	// Token to use to retrieve next page of results.
	NextPageToken string `json:"nextPageToken"`
	// Maximum number of resources to return in the result.
	PageSize int32 `json:"pageSize"`
	// Number of items in result list.
	Size int32 `json:"size"`
	// Array of `ModelVersion` entities.
	Items []ModelVersion `json:"items,omitempty"`
}

// NewModelVersionList instantiates a new ModelVersionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelVersionList(nextPageToken string, pageSize int32, size int32) *ModelVersionList {
	this := ModelVersionList{}
	this.NextPageToken = nextPageToken
	this.PageSize = pageSize
	this.Size = size
	return &this
}

// NewModelVersionListWithDefaults instantiates a new ModelVersionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelVersionListWithDefaults() *ModelVersionList {
	this := ModelVersionList{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value
func (o *ModelVersionList) GetNextPageToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value
// and a boolean to check if the value has been set.
func (o *ModelVersionList) GetNextPageTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextPageToken, true
}

// SetNextPageToken sets field value
func (o *ModelVersionList) SetNextPageToken(v string) {
	o.NextPageToken = v
}

// GetPageSize returns the PageSize field value
func (o *ModelVersionList) GetPageSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *ModelVersionList) GetPageSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *ModelVersionList) SetPageSize(v int32) {
	o.PageSize = v
}

// GetSize returns the Size field value
func (o *ModelVersionList) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ModelVersionList) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ModelVersionList) SetSize(v int32) {
	o.Size = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ModelVersionList) GetItems() []ModelVersion {
	if o == nil || IsNil(o.Items) {
		var ret []ModelVersion
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVersionList) GetItemsOk() ([]ModelVersion, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ModelVersionList) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ModelVersion and assigns it to the Items field.
func (o *ModelVersionList) SetItems(v []ModelVersion) {
	o.Items = v
}

func (o ModelVersionList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelVersionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nextPageToken"] = o.NextPageToken
	toSerialize["pageSize"] = o.PageSize
	toSerialize["size"] = o.Size
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableModelVersionList struct {
	value *ModelVersionList
	isSet bool
}

func (v NullableModelVersionList) Get() *ModelVersionList {
	return v.value
}

func (v *NullableModelVersionList) Set(val *ModelVersionList) {
	v.value = val
	v.isSet = true
}

func (v NullableModelVersionList) IsSet() bool {
	return v.isSet
}

func (v *NullableModelVersionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelVersionList(val *ModelVersionList) *NullableModelVersionList {
	return &NullableModelVersionList{value: val, isSet: true}
}

func (v NullableModelVersionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelVersionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
